################################################################
GPU n=8
################################################################
################################################################
Running: mpirun -n 1 python polymer_brush.py --mode=gpu --user=8
HOOMD-blue 1.3.3-unknown CUDA (7.5) SINGLE MPI SSE SSE2 SSE3 
Compiled: 03/06/2016
Copyright 2009-2016 The Regents of the University of Michigan.

All publications and presentations based on HOOMD-blue, including any reports
or published results obtained, in whole or in part, with HOOMD-blue, will
acknowledge its use according to the terms posted at the time of submission on:
http://codeblue.umich.edu/hoomd-blue/citations.html
-----
You are using HOOMD-blue. Read and cite the following:
* J A Anderson, C D Lorenz, and A Travesset. "General purpose molecular dynamics
  simulations fully implemented on graphics processing units", Journal of
  Computational Physics 227 (2008) 5342--5359
and
* J Glaser, T D Nguyen, J A Anderson, P Liu, F Spiga, J A Millan, D C Morse, and
  S C Glotzer. "Strong scaling of general-purpose molecular dynamics simulations
  on GPUs", Computer Physics Communications 192 (2015) 97--107
and
* http://codeblue.umich.edu/hoomd-blue
You can save these citations to file using cite.save().
-----
notice(2): This system is not compute exclusive, using local rank to select GPUs
notice(2): Unable to identify node local rank information
notice(2): Using global rank to select GPUs
HOOMD-blue is running on the following GPU(s):
 [0]            Tesla K40m  15 SM_3.5 @ 0.745 GHz, 11439 MiB DRAM
polymer_brush.py:012  |  system=init.read_xml(filename='init.xml')
notice(2): Reading init.xml...
notice(2): --- hoomd_xml file read summary
notice(2): 1740 positions at timestep 0
notice(2): 1740 velocities
notice(2): 1740 masses
notice(2): 1740 diameters
notice(2): 5 particle types
notice(2): 1740 particle body values
notice(2): 1580 bonds
notice(2): 1420 angles
notice(2): 3780 dihedrals
notice(2): 1740 charges
notice(2): Group "all" created containing 1740 particles
polymer_brush.py:018  |  system.replicate(nx=rep, ny=rep, nz=1)
polymer_brush.py:019  |  typeW1=group.type('W1')
notice(2): Group "type W1" created containing 3840 particles
polymer_brush.py:020  |  typeW2=group.type('W2')
*Warning*: W2 does not exist in the system, creating an empty group
notice(2): Group "type W2" created containing 0 particles
notice(2): Group "Wall" created containing 3840 particles
polymer_brush.py:022  |  typeB= group.type('B')
notice(2): Group "type B" created containing 65280 particles
polymer_brush.py:023  |  typeSolvBackBone = group.type('Solvent')
notice(2): Group "type Solvent" created containing 25600 particles
polymer_brush.py:024  |  typeC= group.type('C')
*Warning*: C does not exist in the system, creating an empty group
notice(2): Group "type C" created containing 0 particles
polymer_brush.py:025  |  typeCH3_W1=group.type('CH3_W1')
notice(2): Group "type CH3_W1" created containing 3840 particles
polymer_brush.py:026  |  typeCH3_W2=group.type('CH3_W2')
*Warning*: CH3_W2 does not exist in the system, creating an empty group
notice(2): Group "type CH3_W2" created containing 0 particles
polymer_brush.py:027  |  typeSolvTail=group.type('SolvTail')
notice(2): Group "type SolvTail" created containing 12800 particles
notice(2): Group "BCH3-particles" created containing 69120 particles
notice(2): Group "CCH3-particles" created containing 0 particles
notice(2): Group "all-solvent" created containing 38400 particles
notice(2): Group "bc-particles" created containing 69120 particles
notice(2): Group "typeAll" created containing 107520 particles
notice(2): Group "typeNPT" created containing 111360 particles
Number of polymeric particles 107520
polymer_brush.py:044  |  lj = pair.lj(r_cut=3.3)
nlist.py:1051  |          globals.neighbor_list = cell();
polymer_brush.py:052  |  lj.pair_coeff.set('Solvent','W1' ,epsilon=0 , sigma=1.3144)
polymer_brush.py:053  |  lj.pair_coeff.set('Solvent','W2' ,epsilon=0 , sigma=1.3144)
polymer_brush.py:054  |  lj.pair_coeff.set('Solvent','Solvent' ,epsilon=1.0*tether_bulk , sigma=1.3144)
polymer_brush.py:055  |  lj.pair_coeff.set('Solvent','B' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:056  |  lj.pair_coeff.set('Solvent','C' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:057  |  lj.pair_coeff.set('Solvent','CH3_W1' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:058  |  lj.pair_coeff.set('Solvent','CH3_W2' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:059  |  lj.pair_coeff.set('Solvent','SolvTail' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:060  |  lj.pair_coeff.set('B','B' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:061  |  lj.pair_coeff.set('C','C' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:062  |  lj.pair_coeff.set('B','C' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:063  |  lj.pair_coeff.set('B','CH3_W1' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:064  |  lj.pair_coeff.set('B','CH3_W2' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:065  |  lj.pair_coeff.set('C','CH3_W1' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:066  |  lj.pair_coeff.set('C','CH3_W2' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:067  |  lj.pair_coeff.set('CH3_W1','CH3_W1' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:068  |  lj.pair_coeff.set('CH3_W1','CH3_W2' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:069  |  lj.pair_coeff.set('CH3_W2' ,'CH3_W2' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:071  |  lj.pair_coeff.set('B','SolvTail' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:072  |  lj.pair_coeff.set('C','SolvTail' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:073  |  lj.pair_coeff.set('CH3_W1','SolvTail' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:074  |  lj.pair_coeff.set('CH3_W2','SolvTail' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:075  |  lj.pair_coeff.set('SolvTail' ,'SolvTail' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:077  |  lj.pair_coeff.set('B','C' ,epsilon=0.01 , sigma=2.62 , alpha=0.0)
polymer_brush.py:078  |  lj.pair_coeff.set('W1','W2' ,epsilon=0.0 , sigma=1.0)
polymer_brush.py:079  |  lj.pair_coeff.set('W1','W1' ,epsilon=0.0 , sigma=1.0)
polymer_brush.py:080  |  lj.pair_coeff.set('W1','B' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:081  |  lj.pair_coeff.set('W1','C' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:082  |  lj.pair_coeff.set('W2','W2' ,epsilon=0.0 , sigma=1.0)
polymer_brush.py:083  |  lj.pair_coeff.set('W2','B' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:084  |  lj.pair_coeff.set('W2','C' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:085  |  lj.pair_coeff.set('W1','CH3_W1' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:086  |  lj.pair_coeff.set('W1','CH3_W2' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:087  |  lj.pair_coeff.set('W1','SolvTail' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:088  |  lj.pair_coeff.set('W2','CH3_W1' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:089  |  lj.pair_coeff.set('W2','CH3_W2' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:090  |  lj.pair_coeff.set('W2','SolvTail' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:091  |  lj.pair_coeff.set('A','C' ,epsilon=0.0 , sigma=1.0 , alpha=0.0)
polymer_brush.py:093  |  slj = pair.slj(r_cut= 1.3)
notice(2): Notice: slj set d_max=2.0
polymer_brush.py:094  |  slj.set_params(mode="shift")
pair.py:886  |          pair.set_params(self, mode=mode);
polymer_brush.py:095  |  slj.pair_coeff.set('W2','Solvent', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:096  |  slj.pair_coeff.set('W1','Solvent', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:097  |  slj.pair_coeff.set('Solvent','Solvent', epsilon = 0, sigma = 1.0)
polymer_brush.py:098  |  slj.pair_coeff.set('Solvent','B', epsilon = 0, sigma = 1.0)
polymer_brush.py:099  |  slj.pair_coeff.set('Solvent','C', epsilon = 0, sigma = 1.0)
polymer_brush.py:100  |  slj.pair_coeff.set('Solvent','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:101  |  slj.pair_coeff.set('Solvent','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:102  |  slj.pair_coeff.set('Solvent','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:103  |  slj.pair_coeff.set('W1','W2', epsilon = 0 , sigma =1.0)
polymer_brush.py:104  |  slj.pair_coeff.set('W1','W1', epsilon = 0 , sigma =1.0)
polymer_brush.py:105  |  slj.pair_coeff.set('W2','W2', epsilon = 0 , sigma =1.0)
polymer_brush.py:106  |  slj.pair_coeff.set('W1','B', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:107  |  slj.pair_coeff.set('W1','C', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:108  |  slj.pair_coeff.set('W2','B', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:109  |  slj.pair_coeff.set('W2','C', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:110  |  slj.pair_coeff.set('W1','CH3_W1', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:111  |  slj.pair_coeff.set('W1','CH3_W2', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:112  |  slj.pair_coeff.set('W2','CH3_W1', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:113  |  slj.pair_coeff.set('W2','CH3_W2', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:114  |  slj.pair_coeff.set('W1','SolvTail', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:115  |  slj.pair_coeff.set('W2','SolvTail', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:116  |  slj.pair_coeff.set('B','B', epsilon = 0, sigma = 1.0)
polymer_brush.py:117  |  slj.pair_coeff.set('C','C', epsilon = 0, sigma = 1.0)
polymer_brush.py:118  |  slj.pair_coeff.set('B','C', epsilon = 0, sigma = 1.0)
polymer_brush.py:119  |  slj.pair_coeff.set('B','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:120  |  slj.pair_coeff.set('B','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:121  |  slj.pair_coeff.set('B','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:122  |  slj.pair_coeff.set('C','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:123  |  slj.pair_coeff.set('C','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:124  |  slj.pair_coeff.set('C','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:125  |  slj.pair_coeff.set('CH3_W1','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:126  |  slj.pair_coeff.set('CH3_W1','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:127  |  slj.pair_coeff.set('CH3_W2','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:128  |  slj.pair_coeff.set('CH3_W1','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:129  |  slj.pair_coeff.set('CH3_W2','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:130  |  slj.pair_coeff.set('SolvTail','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:133  |  harmonicO_O= bond.harmonic(name = 'O-O-bond')
polymer_brush.py:135  |  harmonicO_O.bond_coeff.set('oleic', k=9892.9362 , r0=0.5)
polymer_brush.py:138  |  harmonicO_O.bond_coeff.set('wall', k=9892.9362, r0=1.25)
polymer_brush.py:141  |  angleWO = angle.harmonic()
polymer_brush.py:142  |  angleWO.set_coeff('W-O' , k = 201.2878 , t0= 2.5307)
polymer_brush.py:143  |  angleWO.set_coeff('O-O' , k = 201.2878 , t0= 1.92)
polymer_brush.py:144  |  angleWO.set_coeff('kink' , k = 1000.2878 , t0= 2.8)
polymer_brush.py:150  |  dihedralField = dihedral.harmonic()
polymer_brush.py:151  |  dihedralField.set_coeff('DihedralW1' , k = 2.6838 , d=1 , n= 1)
polymer_brush.py:152  |  dihedralField.set_coeff('DihedralW2' , k = 1.4543 , d=-1 , n= 2)
polymer_brush.py:153  |  dihedralField.set_coeff('DihedralW3' , k =5.4347 , d=1 , n= 3)
polymer_brush.py:154  |  dihedralField.set_coeff('Dihedral1' , k =2.6838 , d=1 , n= 1)
polymer_brush.py:155  |  dihedralField.set_coeff('Dihedral2' , k = 1.4543 , d=-1 , n= 2)
polymer_brush.py:156  |  dihedralField.set_coeff('Dihedral3' , k =5.4347 , d=1 , n= 3)
polymer_brush.py:158  |  integrate.mode_standard(dt= 0.005)
polymer_brush.py:160  |  integrator=integrate.nve(group=typeAll , limit=0.01 )
polymer_brush.py:161  |  zeroer = update.zero_momentum(period = 1)
polymer_brush.py:164  |  run(200)
notice(2): -- Neighborlist exclusion statistics -- :
notice(2): Particles with 1 exclusions             : 20480
notice(2): Particles with 2 exclusions             : 90880
notice(2): Neighbors included by diameter          : yes
notice(2): Neighbors excluded when in the same body: no
** starting run **
Time 00:00:03 | Step 200 / 200 | TPS 77.3734 | ETA 00:00:00
Average TPS: 77.3715
---------
-- Neighborlist stats:
9 normal updates / 1 forced updates / 0 dangerous updates
n_neigh_min: 5 / n_neigh_max: 141 / n_neigh_avg: 84.0213
shortest rebuild period: 21
-- Cell list stats:
Dimension: 20, 20, 8
n_min    : 0 / n_max: 121 / n_avg: 34.8
** run complete **
polymer_brush.py:165  |  zeroer.disable()
polymer_brush.py:167  |  integrator.disable()
polymer_brush.py:169  |  integrator=integrate.npt(group=typeAll , tau=1.0 , T= 1.0 , tauP = 1.2 , P = 0.00078 , x=False , y = False , z = True , rescale_all=True )
polymer_brush.py:172  |  run(5e3, profile=True, limit_hours=1)
** starting run **
Time 00:00:13 | Step 1069 / 5200 | TPS 86.726 | ETA 00:00:47
Time 00:00:23 | Step 2554 / 5200 | TPS 148.444 | ETA 00:00:17
Time 00:00:33 | Step 4107 / 5200 | TPS 155.274 | ETA 00:00:07
Time 00:00:41 | Step 5200 / 5200 | TPS 150.167 | ETA 00:00:00
Average TPS: 134.033
Simulation: 37.3041s | 100.000% 
        Bond harmonic:      0.4057s |  1.088% 
                update bond table:  0.0133s |  0.036% 
                Self:               0.3924s |  1.052% 
        Harmonic Angle:     0.8531s |  2.287% 
        Harmonic Dihedral:  2.8429s |  7.621% 
        Integrate:          2.3326s |  6.253% 
                NPT step 1:  0.0936s |  0.251% 
                        Thermo:  0.0011s |  0.003% 
                        Self:    0.0926s |  0.248% 
                NPT step 2:  1.0043s |  2.692% 
                        Thermo:  0.7055s |  1.891% 
                        Self:    0.2988s |  0.801% 
                Net force:   1.1997s |  3.216% 
        Neighbor:          16.3825s | 43.916% 
                Cell:        0.2256s |  0.605% 
                        compute:  0.0564s |  0.151% 
                        init:     0.1435s |  0.385% 
                compute:    12.3178s | 33.020% 
                dist-check:  0.1888s |  0.506% 
                filter:      2.9912s |  8.018% 
                head-list:   0.0904s |  0.242% 
                update-ex:   0.0011s |  0.003% 
                Self:        0.5676s |  1.522% 
        Pair lj:            6.0887s | 16.322% 
        Pair slj:           8.2932s | 22.231% 
        SFCPack:            0.0116s |  0.031% 
        Self:               0.0939s |  0.252% 
---------
-- Neighborlist stats:
599 normal updates / 18 forced updates / 0 dangerous updates
n_neigh_min: 3 / n_neigh_max: 146 / n_neigh_avg: 78.74346
shortest rebuild period: 6
-- Cell list stats:
Dimension: 20, 20, 19
n_min    : 0 / n_max: 128 / n_avg: 14.65263
** run complete **










################################################################
Running: mpirun -n 2 python polymer_brush.py --mode=gpu --user=8
HOOMD-blue 1.3.3-unknown CUDA (7.5) SINGLE MPI SSE SSE2 SSE3 
Compiled: 03/06/2016
Copyright 2009-2016 The Regents of the University of Michigan.

All publications and presentations based on HOOMD-blue, including any reports
or published results obtained, in whole or in part, with HOOMD-blue, will
acknowledge its use according to the terms posted at the time of submission on:
http://codeblue.umich.edu/hoomd-blue/citations.html
-----
You are using HOOMD-blue. Read and cite the following:
* J A Anderson, C D Lorenz, and A Travesset. "General purpose molecular dynamics
  simulations fully implemented on graphics processing units", Journal of
  Computational Physics 227 (2008) 5342--5359
and
* J Glaser, T D Nguyen, J A Anderson, P Liu, F Spiga, J A Millan, D C Morse, and
  S C Glotzer. "Strong scaling of general-purpose molecular dynamics simulations
  on GPUs", Computer Physics Communications 192 (2015) 97--107
and
* http://codeblue.umich.edu/hoomd-blue
You can save these citations to file using cite.save().
-----
notice(2): This system is not compute exclusive, using local rank to select GPUs
notice(2): Unable to identify node local rank information
notice(2): Using global rank to select GPUs
HOOMD-blue is running on the following GPU(s):
Rank 0:  [0]            Tesla K40m  15 SM_3.5 @ 0.745 GHz, 11439 MiB DRAM
Rank 1:  [1]            Tesla K40m  15 SM_3.5 @ 0.745 GHz, 11439 MiB DRAM
polymer_brush.py:012  |  system=init.read_xml(filename='init.xml')
notice(2): Reading init.xml...
notice(2): --- hoomd_xml file read summary
notice(2): 1740 positions at timestep 0
notice(2): 1740 velocities
notice(2): 1740 masses
notice(2): 1740 diameters
notice(2): 5 particle types
notice(2): 1740 particle body values
notice(2): 1580 bonds
notice(2): 1420 angles
notice(2): 3780 dihedrals
notice(2): 1740 charges
HOOMD-blue is using domain decomposition: n_x = 1 n_y = 1 n_z = 2.
1 x 1 x 2 local grid on 1 nodes
notice(2): Group "all" created containing 1740 particles
polymer_brush.py:018  |  system.replicate(nx=rep, ny=rep, nz=1)
polymer_brush.py:019  |  typeW1=group.type('W1')
notice(2): Group "type W1" created containing 3840 particles
polymer_brush.py:020  |  typeW2=group.type('W2')
*Warning*: W2 does not exist in the system, creating an empty group
notice(2): Group "type W2" created containing 0 particles
notice(2): Group "Wall" created containing 3840 particles
polymer_brush.py:022  |  typeB= group.type('B')
notice(2): Group "type B" created containing 65280 particles
polymer_brush.py:023  |  typeSolvBackBone = group.type('Solvent')
notice(2): Group "type Solvent" created containing 25600 particles
polymer_brush.py:024  |  typeC= group.type('C')
*Warning*: C does not exist in the system, creating an empty group
notice(2): Group "type C" created containing 0 particles
polymer_brush.py:025  |  typeCH3_W1=group.type('CH3_W1')
notice(2): Group "type CH3_W1" created containing 3840 particles
polymer_brush.py:026  |  typeCH3_W2=group.type('CH3_W2')
*Warning*: CH3_W2 does not exist in the system, creating an empty group
notice(2): Group "type CH3_W2" created containing 0 particles
polymer_brush.py:027  |  typeSolvTail=group.type('SolvTail')
notice(2): Group "type SolvTail" created containing 12800 particles
notice(2): Group "BCH3-particles" created containing 69120 particles
notice(2): Group "CCH3-particles" created containing 0 particles
notice(2): Group "all-solvent" created containing 38400 particles
notice(2): Group "bc-particles" created containing 69120 particles
notice(2): Group "typeAll" created containing 107520 particles
notice(2): Group "typeNPT" created containing 111360 particles
Number of polymeric particles 107520
polymer_brush.py:044  |  lj = pair.lj(r_cut=3.3)
nlist.py:1051  |          globals.neighbor_list = cell();
polymer_brush.py:052  |  lj.pair_coeff.set('Solvent','W1' ,epsilon=0 , sigma=1.3144)
polymer_brush.py:053  |  lj.pair_coeff.set('Solvent','W2' ,epsilon=0 , sigma=1.3144)
polymer_brush.py:054  |  lj.pair_coeff.set('Solvent','Solvent' ,epsilon=1.0*tether_bulk , sigma=1.3144)
polymer_brush.py:055  |  lj.pair_coeff.set('Solvent','B' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:056  |  lj.pair_coeff.set('Solvent','C' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:057  |  lj.pair_coeff.set('Solvent','CH3_W1' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:058  |  lj.pair_coeff.set('Solvent','CH3_W2' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:059  |  lj.pair_coeff.set('Solvent','SolvTail' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:060  |  lj.pair_coeff.set('B','B' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:061  |  lj.pair_coeff.set('C','C' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:062  |  lj.pair_coeff.set('B','C' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:063  |  lj.pair_coeff.set('B','CH3_W1' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:064  |  lj.pair_coeff.set('B','CH3_W2' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:065  |  lj.pair_coeff.set('C','CH3_W1' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:066  |  lj.pair_coeff.set('C','CH3_W2' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:067  |  lj.pair_coeff.set('CH3_W1','CH3_W1' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:068  |  lj.pair_coeff.set('CH3_W1','CH3_W2' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:069  |  lj.pair_coeff.set('CH3_W2' ,'CH3_W2' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:071  |  lj.pair_coeff.set('B','SolvTail' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:072  |  lj.pair_coeff.set('C','SolvTail' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:073  |  lj.pair_coeff.set('CH3_W1','SolvTail' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:074  |  lj.pair_coeff.set('CH3_W2','SolvTail' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:075  |  lj.pair_coeff.set('SolvTail' ,'SolvTail' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:077  |  lj.pair_coeff.set('B','C' ,epsilon=0.01 , sigma=2.62 , alpha=0.0)
polymer_brush.py:078  |  lj.pair_coeff.set('W1','W2' ,epsilon=0.0 , sigma=1.0)
polymer_brush.py:079  |  lj.pair_coeff.set('W1','W1' ,epsilon=0.0 , sigma=1.0)
polymer_brush.py:080  |  lj.pair_coeff.set('W1','B' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:081  |  lj.pair_coeff.set('W1','C' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:082  |  lj.pair_coeff.set('W2','W2' ,epsilon=0.0 , sigma=1.0)
polymer_brush.py:083  |  lj.pair_coeff.set('W2','B' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:084  |  lj.pair_coeff.set('W2','C' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:085  |  lj.pair_coeff.set('W1','CH3_W1' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:086  |  lj.pair_coeff.set('W1','CH3_W2' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:087  |  lj.pair_coeff.set('W1','SolvTail' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:088  |  lj.pair_coeff.set('W2','CH3_W1' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:089  |  lj.pair_coeff.set('W2','CH3_W2' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:090  |  lj.pair_coeff.set('W2','SolvTail' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:091  |  lj.pair_coeff.set('A','C' ,epsilon=0.0 , sigma=1.0 , alpha=0.0)
polymer_brush.py:093  |  slj = pair.slj(r_cut= 1.3)
notice(2): Notice: slj set d_max=2.0
polymer_brush.py:094  |  slj.set_params(mode="shift")
pair.py:886  |          pair.set_params(self, mode=mode);
polymer_brush.py:095  |  slj.pair_coeff.set('W2','Solvent', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:096  |  slj.pair_coeff.set('W1','Solvent', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:097  |  slj.pair_coeff.set('Solvent','Solvent', epsilon = 0, sigma = 1.0)
polymer_brush.py:098  |  slj.pair_coeff.set('Solvent','B', epsilon = 0, sigma = 1.0)
polymer_brush.py:099  |  slj.pair_coeff.set('Solvent','C', epsilon = 0, sigma = 1.0)
polymer_brush.py:100  |  slj.pair_coeff.set('Solvent','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:101  |  slj.pair_coeff.set('Solvent','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:102  |  slj.pair_coeff.set('Solvent','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:103  |  slj.pair_coeff.set('W1','W2', epsilon = 0 , sigma =1.0)
polymer_brush.py:104  |  slj.pair_coeff.set('W1','W1', epsilon = 0 , sigma =1.0)
polymer_brush.py:105  |  slj.pair_coeff.set('W2','W2', epsilon = 0 , sigma =1.0)
polymer_brush.py:106  |  slj.pair_coeff.set('W1','B', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:107  |  slj.pair_coeff.set('W1','C', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:108  |  slj.pair_coeff.set('W2','B', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:109  |  slj.pair_coeff.set('W2','C', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:110  |  slj.pair_coeff.set('W1','CH3_W1', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:111  |  slj.pair_coeff.set('W1','CH3_W2', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:112  |  slj.pair_coeff.set('W2','CH3_W1', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:113  |  slj.pair_coeff.set('W2','CH3_W2', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:114  |  slj.pair_coeff.set('W1','SolvTail', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:115  |  slj.pair_coeff.set('W2','SolvTail', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:116  |  slj.pair_coeff.set('B','B', epsilon = 0, sigma = 1.0)
polymer_brush.py:117  |  slj.pair_coeff.set('C','C', epsilon = 0, sigma = 1.0)
polymer_brush.py:118  |  slj.pair_coeff.set('B','C', epsilon = 0, sigma = 1.0)
polymer_brush.py:119  |  slj.pair_coeff.set('B','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:120  |  slj.pair_coeff.set('B','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:121  |  slj.pair_coeff.set('B','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:122  |  slj.pair_coeff.set('C','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:123  |  slj.pair_coeff.set('C','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:124  |  slj.pair_coeff.set('C','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:125  |  slj.pair_coeff.set('CH3_W1','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:126  |  slj.pair_coeff.set('CH3_W1','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:127  |  slj.pair_coeff.set('CH3_W2','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:128  |  slj.pair_coeff.set('CH3_W1','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:129  |  slj.pair_coeff.set('CH3_W2','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:130  |  slj.pair_coeff.set('SolvTail','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:133  |  harmonicO_O= bond.harmonic(name = 'O-O-bond')
polymer_brush.py:135  |  harmonicO_O.bond_coeff.set('oleic', k=9892.9362 , r0=0.5)
polymer_brush.py:138  |  harmonicO_O.bond_coeff.set('wall', k=9892.9362, r0=1.25)
polymer_brush.py:141  |  angleWO = angle.harmonic()
polymer_brush.py:142  |  angleWO.set_coeff('W-O' , k = 201.2878 , t0= 2.5307)
polymer_brush.py:143  |  angleWO.set_coeff('O-O' , k = 201.2878 , t0= 1.92)
polymer_brush.py:144  |  angleWO.set_coeff('kink' , k = 1000.2878 , t0= 2.8)
polymer_brush.py:150  |  dihedralField = dihedral.harmonic()
polymer_brush.py:151  |  dihedralField.set_coeff('DihedralW1' , k = 2.6838 , d=1 , n= 1)
polymer_brush.py:152  |  dihedralField.set_coeff('DihedralW2' , k = 1.4543 , d=-1 , n= 2)
polymer_brush.py:153  |  dihedralField.set_coeff('DihedralW3' , k =5.4347 , d=1 , n= 3)
polymer_brush.py:154  |  dihedralField.set_coeff('Dihedral1' , k =2.6838 , d=1 , n= 1)
polymer_brush.py:155  |  dihedralField.set_coeff('Dihedral2' , k = 1.4543 , d=-1 , n= 2)
polymer_brush.py:156  |  dihedralField.set_coeff('Dihedral3' , k =5.4347 , d=1 , n= 3)
polymer_brush.py:158  |  integrate.mode_standard(dt= 0.005)
polymer_brush.py:160  |  integrator=integrate.nve(group=typeAll , limit=0.01 )
polymer_brush.py:161  |  zeroer = update.zero_momentum(period = 1)
polymer_brush.py:164  |  run(200)
notice(2): -- Neighborlist exclusion statistics -- :
notice(2): Particles with 1 exclusions             : 20480
notice(2): Particles with 2 exclusions             : 90880
notice(2): Neighbors included by diameter          : yes
notice(2): Neighbors excluded when in the same body: no
** starting run **
Time 00:00:04 | Step 200 / 200 | TPS 65.8971 | ETA 00:00:00
Average TPS: 65.896
---------
-- Neighborlist stats:
9 normal updates / 1 forced updates / 0 dangerous updates
n_neigh_min: 14 / n_neigh_max: 140 / n_neigh_avg: 91.808
shortest rebuild period: 21
-- Cell list stats:
Dimension: 20, 20, 5
n_min    : 8 / n_max: 135 / n_avg: 52.288
** run complete **
polymer_brush.py:165  |  zeroer.disable()
polymer_brush.py:167  |  integrator.disable()
polymer_brush.py:169  |  integrator=integrate.npt(group=typeAll , tau=1.0 , T= 1.0 , tauP = 1.2 , P = 0.00078 , x=False , y = False , z = True , rescale_all=True )
polymer_brush.py:172  |  run(5e3, profile=True, limit_hours=1)
** starting run **
Time 00:00:15 | Step 996 / 5200 | TPS 79.5705 | ETA 00:00:52
Time 00:00:25 | Step 2356 / 5200 | TPS 135.994 | ETA 00:00:20
Time 00:00:35 | Step 3830 / 5200 | TPS 146.968 | ETA 00:00:09
Time 00:00:44 | Step 5200 / 5200 | TPS 147.743 | ETA 00:00:00
Average TPS: 127.206
Simulation: 39.3064s | 100.000% 
        Bond harmonic:      0.7309s |  1.859% 
                update bond table:  0.3907s |  0.994% 
                Self:               0.3401s |  0.865% 
        Harmonic Angle:     1.2245s |  3.115% 
        Harmonic Dihedral:  3.8969s |  9.914% 
        Integrate:          2.0687s |  5.263% 
                NPT step 1:  0.1775s |  0.452% 
                        Thermo:  0.0017s |  0.004% 
                        Self:    0.1758s |  0.447% 
                NPT step 2:  0.8966s |  2.281% 
                        Thermo:  0.6206s |  1.579% 
                        Self:    0.2760s |  0.702% 
                Net force:   0.9215s |  2.344% 
                Self:        0.0732s |  0.186% 
        Neighbor:          14.5404s | 36.992% 
                Cell:           0.1160s |  0.295% 
                        compute:  0.0485s |  0.123% 
                        init:     0.0560s |  0.143% 
                MPI allreduce:  0.0250s |  0.063% 
                compute:       11.3937s | 28.987% 
                filter:         2.8229s |  7.182% 
                head-list:      0.0983s |  0.250% 
                update-ex:      0.0351s |  0.089% 
                Self:           0.0495s |  0.126% 
        Pair lj:            5.4355s | 13.829% 
        Pair slj:           7.4266s | 18.894% 
        SFCPack:            0.0105s |  0.027% 
        comm_ghost_exch:    0.5844s |  1.487% 
                MPI send/recv:  0.1132s |  0.288% 4.49276 GiB/s 
                Self:           0.4712s |  1.199% 
        comm_ghost_update:  1.0585s |  2.693% 
                MPI send/recv:  0.4336s |  1.103% 5.88481 GiB/s 
                pack:           0.3350s |  0.852% 
                unpack:         0.2079s |  0.529% 
                Self:           0.0821s |  0.209% 
        comm_migrate:       1.3807s |  3.513% 
                MPI send/recv:  0.0495s |  0.126% 66.16395 MiB/s 
                angle:          0.3003s |  0.764% 
                        MPI send/recv:  0.0426s |  0.108% 60.70790 MiB/s 
                        Self:           0.2577s |  0.656% 
                bond:           0.2562s |  0.652% 
                        MPI send/recv:  0.0243s |  0.062% 55.12721 MiB/s 
                        Self:           0.2318s |  0.590% 
                dihedral:       0.5200s |  1.323% 
                        MPI send/recv:  0.0462s |  0.118% 243.41765 MiB/s 
                        Self:           0.4738s |  1.205% 
                pack:           0.1338s |  0.340% 
                unpack:         0.0160s |  0.041% 
                Self:           0.1050s |  0.267% 
        dist-check:         0.3368s |  0.857% 
        Self:               0.6120s |  1.557% 
---------
-- Neighborlist stats:
604 normal updates / 18 forced updates / 0 dangerous updates
n_neigh_min: 3 / n_neigh_max: 146 / n_neigh_avg: 96.14850
shortest rebuild period: 6
-- Cell list stats:
Dimension: 20, 20, 10
n_min    : 0 / n_max: 123 / n_avg: 22.28875
** run complete **










################################################################
Running: mpirun -n 4 python polymer_brush.py --mode=gpu --user=8
HOOMD-blue 1.3.3-unknown CUDA (7.5) SINGLE MPI SSE SSE2 SSE3 
Compiled: 03/06/2016
Copyright 2009-2016 The Regents of the University of Michigan.

All publications and presentations based on HOOMD-blue, including any reports
or published results obtained, in whole or in part, with HOOMD-blue, will
acknowledge its use according to the terms posted at the time of submission on:
http://codeblue.umich.edu/hoomd-blue/citations.html
-----
You are using HOOMD-blue. Read and cite the following:
* J A Anderson, C D Lorenz, and A Travesset. "General purpose molecular dynamics
  simulations fully implemented on graphics processing units", Journal of
  Computational Physics 227 (2008) 5342--5359
and
* J Glaser, T D Nguyen, J A Anderson, P Liu, F Spiga, J A Millan, D C Morse, and
  S C Glotzer. "Strong scaling of general-purpose molecular dynamics simulations
  on GPUs", Computer Physics Communications 192 (2015) 97--107
and
* http://codeblue.umich.edu/hoomd-blue
You can save these citations to file using cite.save().
-----
notice(2): This system is not compute exclusive, using local rank to select GPUs
notice(2): Unable to identify node local rank information
notice(2): Using global rank to select GPUs
HOOMD-blue is running on the following GPU(s):
Rank 0:  [0]            Tesla K40m  15 SM_3.5 @ 0.745 GHz, 11439 MiB DRAM
Rank 1:  [1]            Tesla K40m  15 SM_3.5 @ 0.745 GHz, 11439 MiB DRAM
Rank 2:  [2]            Tesla K40m  15 SM_3.5 @ 0.745 GHz, 11439 MiB DRAM
Rank 3:  [3]            Tesla K40m  15 SM_3.5 @ 0.745 GHz, 11439 MiB DRAM
polymer_brush.py:012  |  system=init.read_xml(filename='init.xml')
notice(2): Reading init.xml...
notice(2): --- hoomd_xml file read summary
notice(2): 1740 positions at timestep 0
notice(2): 1740 velocities
notice(2): 1740 masses
notice(2): 1740 diameters
notice(2): 5 particle types
notice(2): 1740 particle body values
notice(2): 1580 bonds
notice(2): 1420 angles
notice(2): 3780 dihedrals
notice(2): 1740 charges
HOOMD-blue is using domain decomposition: n_x = 1 n_y = 1 n_z = 4.
1 x 1 x 4 local grid on 1 nodes
notice(2): Group "all" created containing 1740 particles
polymer_brush.py:018  |  system.replicate(nx=rep, ny=rep, nz=1)
polymer_brush.py:019  |  typeW1=group.type('W1')
notice(2): Group "type W1" created containing 3840 particles
polymer_brush.py:020  |  typeW2=group.type('W2')
*Warning*: W2 does not exist in the system, creating an empty group
notice(2): Group "type W2" created containing 0 particles
notice(2): Group "Wall" created containing 3840 particles
polymer_brush.py:022  |  typeB= group.type('B')
notice(2): Group "type B" created containing 65280 particles
polymer_brush.py:023  |  typeSolvBackBone = group.type('Solvent')
notice(2): Group "type Solvent" created containing 25600 particles
polymer_brush.py:024  |  typeC= group.type('C')
*Warning*: C does not exist in the system, creating an empty group
notice(2): Group "type C" created containing 0 particles
polymer_brush.py:025  |  typeCH3_W1=group.type('CH3_W1')
notice(2): Group "type CH3_W1" created containing 3840 particles
polymer_brush.py:026  |  typeCH3_W2=group.type('CH3_W2')
*Warning*: CH3_W2 does not exist in the system, creating an empty group
notice(2): Group "type CH3_W2" created containing 0 particles
polymer_brush.py:027  |  typeSolvTail=group.type('SolvTail')
notice(2): Group "type SolvTail" created containing 12800 particles
notice(2): Group "BCH3-particles" created containing 69120 particles
notice(2): Group "CCH3-particles" created containing 0 particles
notice(2): Group "all-solvent" created containing 38400 particles
notice(2): Group "bc-particles" created containing 69120 particles
notice(2): Group "typeAll" created containing 107520 particles
notice(2): Group "typeNPT" created containing 111360 particles
Number of polymeric particles 107520
polymer_brush.py:044  |  lj = pair.lj(r_cut=3.3)
nlist.py:1051  |          globals.neighbor_list = cell();
polymer_brush.py:052  |  lj.pair_coeff.set('Solvent','W1' ,epsilon=0 , sigma=1.3144)
polymer_brush.py:053  |  lj.pair_coeff.set('Solvent','W2' ,epsilon=0 , sigma=1.3144)
polymer_brush.py:054  |  lj.pair_coeff.set('Solvent','Solvent' ,epsilon=1.0*tether_bulk , sigma=1.3144)
polymer_brush.py:055  |  lj.pair_coeff.set('Solvent','B' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:056  |  lj.pair_coeff.set('Solvent','C' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:057  |  lj.pair_coeff.set('Solvent','CH3_W1' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:058  |  lj.pair_coeff.set('Solvent','CH3_W2' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:059  |  lj.pair_coeff.set('Solvent','SolvTail' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:060  |  lj.pair_coeff.set('B','B' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:061  |  lj.pair_coeff.set('C','C' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:062  |  lj.pair_coeff.set('B','C' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:063  |  lj.pair_coeff.set('B','CH3_W1' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:064  |  lj.pair_coeff.set('B','CH3_W2' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:065  |  lj.pair_coeff.set('C','CH3_W1' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:066  |  lj.pair_coeff.set('C','CH3_W2' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:067  |  lj.pair_coeff.set('CH3_W1','CH3_W1' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:068  |  lj.pair_coeff.set('CH3_W1','CH3_W2' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:069  |  lj.pair_coeff.set('CH3_W2' ,'CH3_W2' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:071  |  lj.pair_coeff.set('B','SolvTail' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:072  |  lj.pair_coeff.set('C','SolvTail' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:073  |  lj.pair_coeff.set('CH3_W1','SolvTail' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:074  |  lj.pair_coeff.set('CH3_W2','SolvTail' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:075  |  lj.pair_coeff.set('SolvTail' ,'SolvTail' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:077  |  lj.pair_coeff.set('B','C' ,epsilon=0.01 , sigma=2.62 , alpha=0.0)
polymer_brush.py:078  |  lj.pair_coeff.set('W1','W2' ,epsilon=0.0 , sigma=1.0)
polymer_brush.py:079  |  lj.pair_coeff.set('W1','W1' ,epsilon=0.0 , sigma=1.0)
polymer_brush.py:080  |  lj.pair_coeff.set('W1','B' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:081  |  lj.pair_coeff.set('W1','C' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:082  |  lj.pair_coeff.set('W2','W2' ,epsilon=0.0 , sigma=1.0)
polymer_brush.py:083  |  lj.pair_coeff.set('W2','B' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:084  |  lj.pair_coeff.set('W2','C' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:085  |  lj.pair_coeff.set('W1','CH3_W1' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:086  |  lj.pair_coeff.set('W1','CH3_W2' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:087  |  lj.pair_coeff.set('W1','SolvTail' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:088  |  lj.pair_coeff.set('W2','CH3_W1' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:089  |  lj.pair_coeff.set('W2','CH3_W2' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:090  |  lj.pair_coeff.set('W2','SolvTail' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:091  |  lj.pair_coeff.set('A','C' ,epsilon=0.0 , sigma=1.0 , alpha=0.0)
polymer_brush.py:093  |  slj = pair.slj(r_cut= 1.3)
notice(2): Notice: slj set d_max=2.0
polymer_brush.py:094  |  slj.set_params(mode="shift")
pair.py:886  |          pair.set_params(self, mode=mode);
polymer_brush.py:095  |  slj.pair_coeff.set('W2','Solvent', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:096  |  slj.pair_coeff.set('W1','Solvent', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:097  |  slj.pair_coeff.set('Solvent','Solvent', epsilon = 0, sigma = 1.0)
polymer_brush.py:098  |  slj.pair_coeff.set('Solvent','B', epsilon = 0, sigma = 1.0)
polymer_brush.py:099  |  slj.pair_coeff.set('Solvent','C', epsilon = 0, sigma = 1.0)
polymer_brush.py:100  |  slj.pair_coeff.set('Solvent','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:101  |  slj.pair_coeff.set('Solvent','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:102  |  slj.pair_coeff.set('Solvent','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:103  |  slj.pair_coeff.set('W1','W2', epsilon = 0 , sigma =1.0)
polymer_brush.py:104  |  slj.pair_coeff.set('W1','W1', epsilon = 0 , sigma =1.0)
polymer_brush.py:105  |  slj.pair_coeff.set('W2','W2', epsilon = 0 , sigma =1.0)
polymer_brush.py:106  |  slj.pair_coeff.set('W1','B', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:107  |  slj.pair_coeff.set('W1','C', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:108  |  slj.pair_coeff.set('W2','B', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:109  |  slj.pair_coeff.set('W2','C', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:110  |  slj.pair_coeff.set('W1','CH3_W1', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:111  |  slj.pair_coeff.set('W1','CH3_W2', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:112  |  slj.pair_coeff.set('W2','CH3_W1', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:113  |  slj.pair_coeff.set('W2','CH3_W2', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:114  |  slj.pair_coeff.set('W1','SolvTail', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:115  |  slj.pair_coeff.set('W2','SolvTail', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:116  |  slj.pair_coeff.set('B','B', epsilon = 0, sigma = 1.0)
polymer_brush.py:117  |  slj.pair_coeff.set('C','C', epsilon = 0, sigma = 1.0)
polymer_brush.py:118  |  slj.pair_coeff.set('B','C', epsilon = 0, sigma = 1.0)
polymer_brush.py:119  |  slj.pair_coeff.set('B','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:120  |  slj.pair_coeff.set('B','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:121  |  slj.pair_coeff.set('B','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:122  |  slj.pair_coeff.set('C','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:123  |  slj.pair_coeff.set('C','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:124  |  slj.pair_coeff.set('C','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:125  |  slj.pair_coeff.set('CH3_W1','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:126  |  slj.pair_coeff.set('CH3_W1','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:127  |  slj.pair_coeff.set('CH3_W2','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:128  |  slj.pair_coeff.set('CH3_W1','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:129  |  slj.pair_coeff.set('CH3_W2','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:130  |  slj.pair_coeff.set('SolvTail','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:133  |  harmonicO_O= bond.harmonic(name = 'O-O-bond')
polymer_brush.py:135  |  harmonicO_O.bond_coeff.set('oleic', k=9892.9362 , r0=0.5)
polymer_brush.py:138  |  harmonicO_O.bond_coeff.set('wall', k=9892.9362, r0=1.25)
polymer_brush.py:141  |  angleWO = angle.harmonic()
polymer_brush.py:142  |  angleWO.set_coeff('W-O' , k = 201.2878 , t0= 2.5307)
polymer_brush.py:143  |  angleWO.set_coeff('O-O' , k = 201.2878 , t0= 1.92)
polymer_brush.py:144  |  angleWO.set_coeff('kink' , k = 1000.2878 , t0= 2.8)
polymer_brush.py:150  |  dihedralField = dihedral.harmonic()
polymer_brush.py:151  |  dihedralField.set_coeff('DihedralW1' , k = 2.6838 , d=1 , n= 1)
polymer_brush.py:152  |  dihedralField.set_coeff('DihedralW2' , k = 1.4543 , d=-1 , n= 2)
polymer_brush.py:153  |  dihedralField.set_coeff('DihedralW3' , k =5.4347 , d=1 , n= 3)
polymer_brush.py:154  |  dihedralField.set_coeff('Dihedral1' , k =2.6838 , d=1 , n= 1)
polymer_brush.py:155  |  dihedralField.set_coeff('Dihedral2' , k = 1.4543 , d=-1 , n= 2)
polymer_brush.py:156  |  dihedralField.set_coeff('Dihedral3' , k =5.4347 , d=1 , n= 3)
polymer_brush.py:158  |  integrate.mode_standard(dt= 0.005)
polymer_brush.py:160  |  integrator=integrate.nve(group=typeAll , limit=0.01 )
polymer_brush.py:161  |  zeroer = update.zero_momentum(period = 1)
polymer_brush.py:164  |  run(200)
notice(2): -- Neighborlist exclusion statistics -- :
notice(2): Particles with 1 exclusions             : 20480
notice(2): Particles with 2 exclusions             : 90880
notice(2): Neighbors included by diameter          : yes
notice(2): Neighbors excluded when in the same body: no
** starting run **
Time 00:00:05 | Step 200 / 200 | TPS 66.6923 | ETA 00:00:00
Average TPS: 66.6913
---------
-- Neighborlist stats:
9 normal updates / 1 forced updates / 0 dangerous updates
n_neigh_min: 60 / n_neigh_max: 140 / n_neigh_avg: 110.133
shortest rebuild period: 21
-- Cell list stats:
Dimension: 20, 20, 3
n_min    : 8 / n_max: 169 / n_avg: 68.64
** run complete **
polymer_brush.py:165  |  zeroer.disable()
polymer_brush.py:167  |  integrator.disable()
polymer_brush.py:169  |  integrator=integrate.npt(group=typeAll , tau=1.0 , T= 1.0 , tauP = 1.2 , P = 0.00078 , x=False , y = False , z = True , rescale_all=True )
polymer_brush.py:172  |  run(5e3, profile=True, limit_hours=1)
** starting run **
Time 00:00:15 | Step 1072 / 5200 | TPS 87.1902 | ETA 00:00:47
Time 00:00:25 | Step 2329 / 5200 | TPS 125.367 | ETA 00:00:22
Time 00:00:35 | Step 3817 / 5200 | TPS 148.62 | ETA 00:00:09
Time 00:00:44 | Step 5200 / 5200 | TPS 146.515 | ETA 00:00:00
Average TPS: 126.649
Simulation: 39.4791s | 100.000% 
        Bond harmonic:      1.2606s |  3.193% 
                update bond table:  0.9633s |  2.440% 
                Self:               0.2973s |  0.753% 
        Harmonic Angle:     1.6414s |  4.158% 
        Harmonic Dihedral:  4.0656s | 10.298% 
        Integrate:          1.8806s |  4.764% 
                NPT step 1:  0.1841s |  0.466% 
                        Thermo:  0.0038s |  0.010% 
                        Self:    0.1803s |  0.457% 
                NPT step 2:  0.8295s |  2.101% 
                        Thermo:  0.5790s |  1.467% 
                        Self:    0.2504s |  0.634% 
                Net force:   0.7887s |  1.998% 
                Self:        0.0784s |  0.198% 
        Neighbor:          13.5207s | 34.248% 
                Cell:           0.1153s |  0.292% 
                        compute:  0.0444s |  0.113% 
                        init:     0.0592s |  0.150% 
                MPI allreduce:  0.0324s |  0.082% 
                compute:       10.4224s | 26.400% 
                filter:         2.6864s |  6.805% 
                head-list:      0.1786s |  0.452% 
                update-ex:      0.0348s |  0.088% 
                Self:           0.0509s |  0.129% 
        Pair lj:            5.0246s | 12.727% 
        Pair slj:           7.7288s | 19.577% 
        SFCPack:            0.0088s |  0.022% 
        comm_ghost_exch:    0.6587s |  1.668% 
                MPI send/recv:  0.2213s |  0.560% 2.25080 GiB/s 
                Self:           0.4374s |  1.108% 
        comm_ghost_update:  0.9471s |  2.399% 
                MPI send/recv:  0.4003s |  1.014% 5.77312 GiB/s 
                pack:           0.3397s |  0.861% 
                unpack:         0.1229s |  0.311% 
                Self:           0.0842s |  0.213% 
        comm_migrate:       1.8729s |  4.744% 
                MPI send/recv:  0.1651s |  0.418% 3.71483 MiB/s 
                angle:          0.4934s |  1.250% 
                        MPI send/recv:  0.2435s |  0.617% 1.97524 MiB/s 
                        Self:           0.2499s |  0.633% 
                bond:           0.3329s |  0.843% 
                        MPI send/recv:  0.1061s |  0.269% 2.45834 MiB/s 
                        Self:           0.2268s |  0.574% 
                dihedral:       0.6585s |  1.668% 
                        MPI send/recv:  0.2249s |  0.570% 9.03375 MiB/s 
                        Self:           0.4336s |  1.098% 
                pack:           0.1159s |  0.294% 
                unpack:         0.0155s |  0.039% 
                Self:           0.0916s |  0.232% 
        dist-check:         0.3155s |  0.799% 
        Self:               0.5537s |  1.403% 
---------
-- Neighborlist stats:
599 normal updates / 18 forced updates / 0 dangerous updates
n_neigh_min: 3 / n_neigh_max: 150 / n_neigh_avg: 105.36298
shortest rebuild period: 5
-- Cell list stats:
Dimension: 20, 20, 6
n_min    : 0 / n_max: 129 / n_avg: 31.53833
** run complete **










################################################################
Running: mpirun -n 8 python polymer_brush.py --mode=gpu --user=8
HOOMD-blue 1.3.3-unknown CUDA (7.5) SINGLE MPI SSE SSE2 SSE3 
Compiled: 03/06/2016
Copyright 2009-2016 The Regents of the University of Michigan.

All publications and presentations based on HOOMD-blue, including any reports
or published results obtained, in whole or in part, with HOOMD-blue, will
acknowledge its use according to the terms posted at the time of submission on:
http://codeblue.umich.edu/hoomd-blue/citations.html
-----
You are using HOOMD-blue. Read and cite the following:
* J A Anderson, C D Lorenz, and A Travesset. "General purpose molecular dynamics
  simulations fully implemented on graphics processing units", Journal of
  Computational Physics 227 (2008) 5342--5359
and
* J Glaser, T D Nguyen, J A Anderson, P Liu, F Spiga, J A Millan, D C Morse, and
  S C Glotzer. "Strong scaling of general-purpose molecular dynamics simulations
  on GPUs", Computer Physics Communications 192 (2015) 97--107
and
* http://codeblue.umich.edu/hoomd-blue
You can save these citations to file using cite.save().
-----
notice(2): This system is not compute exclusive, using local rank to select GPUs
notice(2): Unable to identify node local rank information
notice(2): Using global rank to select GPUs
HOOMD-blue is running on the following GPU(s):
Rank 0:  [0]            Tesla K40m  15 SM_3.5 @ 0.745 GHz, 11439 MiB DRAM
Rank 1:  [1]            Tesla K40m  15 SM_3.5 @ 0.745 GHz, 11439 MiB DRAM
Rank 2:  [2]            Tesla K40m  15 SM_3.5 @ 0.745 GHz, 11439 MiB DRAM
Rank 3:  [3]            Tesla K40m  15 SM_3.5 @ 0.745 GHz, 11439 MiB DRAM
Rank 4:  [4]            Tesla K40m  15 SM_3.5 @ 0.745 GHz, 11439 MiB DRAM
Rank 5:  [5]            Tesla K40m  15 SM_3.5 @ 0.745 GHz, 11439 MiB DRAM
Rank 6:  [0]            Tesla K40m  15 SM_3.5 @ 0.745 GHz, 11439 MiB DRAM
Rank 7:  [1]            Tesla K40m  15 SM_3.5 @ 0.745 GHz, 11439 MiB DRAM
polymer_brush.py:012  |  system=init.read_xml(filename='init.xml')
notice(2): Reading init.xml...
notice(2): --- hoomd_xml file read summary
notice(2): 1740 positions at timestep 0
notice(2): 1740 velocities
notice(2): 1740 masses
notice(2): 1740 diameters
notice(2): 5 particle types
notice(2): 1740 particle body values
notice(2): 1580 bonds
notice(2): 1420 angles
notice(2): 3780 dihedrals
notice(2): 1740 charges
HOOMD-blue is using domain decomposition: n_x = 1 n_y = 2 n_z = 4.
1 x 2 x 4 local grid on 1 nodes
notice(2): Group "all" created containing 1740 particles
polymer_brush.py:018  |  system.replicate(nx=rep, ny=rep, nz=1)
polymer_brush.py:019  |  typeW1=group.type('W1')
notice(2): Group "type W1" created containing 3840 particles
polymer_brush.py:020  |  typeW2=group.type('W2')
*Warning*: W2 does not exist in the system, creating an empty group
notice(2): Group "type W2" created containing 0 particles
notice(2): Group "Wall" created containing 3840 particles
polymer_brush.py:022  |  typeB= group.type('B')
notice(2): Group "type B" created containing 65280 particles
polymer_brush.py:023  |  typeSolvBackBone = group.type('Solvent')
notice(2): Group "type Solvent" created containing 25600 particles
polymer_brush.py:024  |  typeC= group.type('C')
*Warning*: C does not exist in the system, creating an empty group
notice(2): Group "type C" created containing 0 particles
polymer_brush.py:025  |  typeCH3_W1=group.type('CH3_W1')
notice(2): Group "type CH3_W1" created containing 3840 particles
polymer_brush.py:026  |  typeCH3_W2=group.type('CH3_W2')
*Warning*: CH3_W2 does not exist in the system, creating an empty group
notice(2): Group "type CH3_W2" created containing 0 particles
polymer_brush.py:027  |  typeSolvTail=group.type('SolvTail')
notice(2): Group "type SolvTail" created containing 12800 particles
notice(2): Group "BCH3-particles" created containing 69120 particles
notice(2): Group "CCH3-particles" created containing 0 particles
notice(2): Group "all-solvent" created containing 38400 particles
notice(2): Group "bc-particles" created containing 69120 particles
notice(2): Group "typeAll" created containing 107520 particles
notice(2): Group "typeNPT" created containing 111360 particles
Number of polymeric particles 107520
polymer_brush.py:044  |  lj = pair.lj(r_cut=3.3)
nlist.py:1051  |          globals.neighbor_list = cell();
polymer_brush.py:052  |  lj.pair_coeff.set('Solvent','W1' ,epsilon=0 , sigma=1.3144)
polymer_brush.py:053  |  lj.pair_coeff.set('Solvent','W2' ,epsilon=0 , sigma=1.3144)
polymer_brush.py:054  |  lj.pair_coeff.set('Solvent','Solvent' ,epsilon=1.0*tether_bulk , sigma=1.3144)
polymer_brush.py:055  |  lj.pair_coeff.set('Solvent','B' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:056  |  lj.pair_coeff.set('Solvent','C' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:057  |  lj.pair_coeff.set('Solvent','CH3_W1' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:058  |  lj.pair_coeff.set('Solvent','CH3_W2' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:059  |  lj.pair_coeff.set('Solvent','SolvTail' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:060  |  lj.pair_coeff.set('B','B' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:061  |  lj.pair_coeff.set('C','C' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:062  |  lj.pair_coeff.set('B','C' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:063  |  lj.pair_coeff.set('B','CH3_W1' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:064  |  lj.pair_coeff.set('B','CH3_W2' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:065  |  lj.pair_coeff.set('C','CH3_W1' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:066  |  lj.pair_coeff.set('C','CH3_W2' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:067  |  lj.pair_coeff.set('CH3_W1','CH3_W1' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:068  |  lj.pair_coeff.set('CH3_W1','CH3_W2' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:069  |  lj.pair_coeff.set('CH3_W2' ,'CH3_W2' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:071  |  lj.pair_coeff.set('B','SolvTail' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:072  |  lj.pair_coeff.set('C','SolvTail' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:073  |  lj.pair_coeff.set('CH3_W1','SolvTail' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:074  |  lj.pair_coeff.set('CH3_W2','SolvTail' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:075  |  lj.pair_coeff.set('SolvTail' ,'SolvTail' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:077  |  lj.pair_coeff.set('B','C' ,epsilon=0.01 , sigma=2.62 , alpha=0.0)
polymer_brush.py:078  |  lj.pair_coeff.set('W1','W2' ,epsilon=0.0 , sigma=1.0)
polymer_brush.py:079  |  lj.pair_coeff.set('W1','W1' ,epsilon=0.0 , sigma=1.0)
polymer_brush.py:080  |  lj.pair_coeff.set('W1','B' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:081  |  lj.pair_coeff.set('W1','C' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:082  |  lj.pair_coeff.set('W2','W2' ,epsilon=0.0 , sigma=1.0)
polymer_brush.py:083  |  lj.pair_coeff.set('W2','B' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:084  |  lj.pair_coeff.set('W2','C' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:085  |  lj.pair_coeff.set('W1','CH3_W1' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:086  |  lj.pair_coeff.set('W1','CH3_W2' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:087  |  lj.pair_coeff.set('W1','SolvTail' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:088  |  lj.pair_coeff.set('W2','CH3_W1' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:089  |  lj.pair_coeff.set('W2','CH3_W2' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:090  |  lj.pair_coeff.set('W2','SolvTail' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:091  |  lj.pair_coeff.set('A','C' ,epsilon=0.0 , sigma=1.0 , alpha=0.0)
polymer_brush.py:093  |  slj = pair.slj(r_cut= 1.3)
notice(2): Notice: slj set d_max=2.0
polymer_brush.py:094  |  slj.set_params(mode="shift")
pair.py:886  |          pair.set_params(self, mode=mode);
polymer_brush.py:095  |  slj.pair_coeff.set('W2','Solvent', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:096  |  slj.pair_coeff.set('W1','Solvent', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:097  |  slj.pair_coeff.set('Solvent','Solvent', epsilon = 0, sigma = 1.0)
polymer_brush.py:098  |  slj.pair_coeff.set('Solvent','B', epsilon = 0, sigma = 1.0)
polymer_brush.py:099  |  slj.pair_coeff.set('Solvent','C', epsilon = 0, sigma = 1.0)
polymer_brush.py:100  |  slj.pair_coeff.set('Solvent','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:101  |  slj.pair_coeff.set('Solvent','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:102  |  slj.pair_coeff.set('Solvent','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:103  |  slj.pair_coeff.set('W1','W2', epsilon = 0 , sigma =1.0)
polymer_brush.py:104  |  slj.pair_coeff.set('W1','W1', epsilon = 0 , sigma =1.0)
polymer_brush.py:105  |  slj.pair_coeff.set('W2','W2', epsilon = 0 , sigma =1.0)
polymer_brush.py:106  |  slj.pair_coeff.set('W1','B', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:107  |  slj.pair_coeff.set('W1','C', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:108  |  slj.pair_coeff.set('W2','B', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:109  |  slj.pair_coeff.set('W2','C', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:110  |  slj.pair_coeff.set('W1','CH3_W1', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:111  |  slj.pair_coeff.set('W1','CH3_W2', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:112  |  slj.pair_coeff.set('W2','CH3_W1', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:113  |  slj.pair_coeff.set('W2','CH3_W2', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:114  |  slj.pair_coeff.set('W1','SolvTail', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:115  |  slj.pair_coeff.set('W2','SolvTail', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:116  |  slj.pair_coeff.set('B','B', epsilon = 0, sigma = 1.0)
polymer_brush.py:117  |  slj.pair_coeff.set('C','C', epsilon = 0, sigma = 1.0)
polymer_brush.py:118  |  slj.pair_coeff.set('B','C', epsilon = 0, sigma = 1.0)
polymer_brush.py:119  |  slj.pair_coeff.set('B','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:120  |  slj.pair_coeff.set('B','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:121  |  slj.pair_coeff.set('B','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:122  |  slj.pair_coeff.set('C','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:123  |  slj.pair_coeff.set('C','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:124  |  slj.pair_coeff.set('C','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:125  |  slj.pair_coeff.set('CH3_W1','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:126  |  slj.pair_coeff.set('CH3_W1','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:127  |  slj.pair_coeff.set('CH3_W2','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:128  |  slj.pair_coeff.set('CH3_W1','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:129  |  slj.pair_coeff.set('CH3_W2','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:130  |  slj.pair_coeff.set('SolvTail','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:133  |  harmonicO_O= bond.harmonic(name = 'O-O-bond')
polymer_brush.py:135  |  harmonicO_O.bond_coeff.set('oleic', k=9892.9362 , r0=0.5)
polymer_brush.py:138  |  harmonicO_O.bond_coeff.set('wall', k=9892.9362, r0=1.25)
polymer_brush.py:141  |  angleWO = angle.harmonic()
polymer_brush.py:142  |  angleWO.set_coeff('W-O' , k = 201.2878 , t0= 2.5307)
polymer_brush.py:143  |  angleWO.set_coeff('O-O' , k = 201.2878 , t0= 1.92)
polymer_brush.py:144  |  angleWO.set_coeff('kink' , k = 1000.2878 , t0= 2.8)
polymer_brush.py:150  |  dihedralField = dihedral.harmonic()
polymer_brush.py:151  |  dihedralField.set_coeff('DihedralW1' , k = 2.6838 , d=1 , n= 1)
polymer_brush.py:152  |  dihedralField.set_coeff('DihedralW2' , k = 1.4543 , d=-1 , n= 2)
polymer_brush.py:153  |  dihedralField.set_coeff('DihedralW3' , k =5.4347 , d=1 , n= 3)
polymer_brush.py:154  |  dihedralField.set_coeff('Dihedral1' , k =2.6838 , d=1 , n= 1)
polymer_brush.py:155  |  dihedralField.set_coeff('Dihedral2' , k = 1.4543 , d=-1 , n= 2)
polymer_brush.py:156  |  dihedralField.set_coeff('Dihedral3' , k =5.4347 , d=1 , n= 3)
polymer_brush.py:158  |  integrate.mode_standard(dt= 0.005)
polymer_brush.py:160  |  integrator=integrate.nve(group=typeAll , limit=0.01 )
polymer_brush.py:161  |  zeroer = update.zero_momentum(period = 1)
polymer_brush.py:164  |  run(200)
notice(2): -- Neighborlist exclusion statistics -- :
notice(2): Particles with 1 exclusions             : 20480
notice(2): Particles with 2 exclusions             : 90880
notice(2): Neighbors included by diameter          : yes
notice(2): Neighbors excluded when in the same body: no
** starting run **
Time 00:00:07 | Step 200 / 200 | TPS 77.3181 | ETA 00:00:00
Average TPS: 77.3169
---------
-- Neighborlist stats:
9 normal updates / 1 forced updates / 0 dangerous updates
n_neigh_min: 60 / n_neigh_max: 139 / n_neigh_avg: 110.104
shortest rebuild period: 21
-- Cell list stats:
Dimension: 20, 11, 3
n_min    : 8 / n_max: 189 / n_avg: 74.4727
** run complete **
polymer_brush.py:165  |  zeroer.disable()
polymer_brush.py:167  |  integrator.disable()
polymer_brush.py:169  |  integrator=integrate.npt(group=typeAll , tau=1.0 , T= 1.0 , tauP = 1.2 , P = 0.00078 , x=False , y = False , z = True , rescale_all=True )
polymer_brush.py:172  |  run(5e3, profile=True, limit_hours=1)
** starting run **
Time 00:00:17 | Step 1469 / 5200 | TPS 126.861 | ETA 00:00:29
Time 00:00:27 | Step 3084 / 5200 | TPS 161.26 | ETA 00:00:13
Time 00:00:37 | Step 4768 / 5200 | TPS 168.397 | ETA 00:00:02
Time 00:00:40 | Step 5200 / 5200 | TPS 179.673 | ETA 00:00:00
Average TPS: 154.214
Simulation: 32.4225s | 100.000% 
        Bond harmonic:      1.0032s |  3.094% 
                update bond table:  0.4040s |  1.246% 
                Self:               0.5992s |  1.848% 
        Harmonic Angle:     1.1735s |  3.619% 
        Harmonic Dihedral:  2.5205s |  7.774% 
        Integrate:          3.4872s | 10.756% 
                NPT step 1:  0.2004s |  0.618% 
                        Thermo:  0.0070s |  0.022% 
                        Self:    0.1934s |  0.597% 
                NPT step 2:  2.2865s |  7.052% 
                        Thermo:  0.8375s |  2.583% 
                        Self:    1.4490s |  4.469% 
                Net force:   0.9113s |  2.811% 
                Self:        0.0890s |  0.275% 
        Neighbor:           9.3343s | 28.790% 
                Cell:           0.3804s |  1.173% 
                        compute:  0.2685s |  0.828% 
                        init:     0.0871s |  0.269% 
                MPI allreduce:  0.4385s |  1.352% 
                compute:        6.6383s | 20.474% 
                filter:         1.4764s |  4.554% 
                head-list:      0.2396s |  0.739% 
                update-ex:      0.0734s |  0.226% 
                Self:           0.0876s |  0.270% 
        Pair lj:            3.1592s |  9.744% 
        Pair slj:           4.0543s | 12.504% 
        SFCPack:            0.0075s |  0.023% 
        comm_ghost_exch:    1.1126s |  3.431% 
                MPI send/recv:  0.3375s |  1.041% 1.38010 GiB/s 
                Self:           0.7751s |  2.390% 
        comm_ghost_update:  1.5397s |  4.749% 
                MPI send/recv:  0.4971s |  1.533% 4.83855 GiB/s 
                pack:           0.5270s |  1.626% 
                unpack:         0.4302s |  1.327% 
                Self:           0.0853s |  0.263% 
        comm_migrate:       3.4534s | 10.651% 
                MPI send/recv:  0.2414s |  0.745% 20.41927 MiB/s 
                angle:          0.9236s |  2.849% 
                        MPI send/recv:  0.3990s |  1.231% 13.33687 MiB/s 
                        Self:           0.5245s |  1.618% 
                bond:           0.7254s |  2.237% 
                        MPI send/recv:  0.2310s |  0.713% 10.40925 MiB/s 
                        Self:           0.4944s |  1.525% 
                dihedral:       1.1370s |  3.507% 
                        MPI send/recv:  0.3667s |  1.131% 76.78289 MiB/s 
                        Self:           0.7703s |  2.376% 
                pack:           0.1528s |  0.471% 
                unpack:         0.0700s |  0.216% 
                Self:           0.2033s |  0.627% 
        dist-check:         1.0733s |  3.310% 
        Self:               0.5039s |  1.554% 
---------
-- Neighborlist stats:
601 normal updates / 18 forced updates / 0 dangerous updates
n_neigh_min: 3 / n_neigh_max: 141 / n_neigh_avg: 105.57283
shortest rebuild period: 5
-- Cell list stats:
Dimension: 20, 11, 5
n_min    : 0 / n_max: 147 / n_avg: 41.02818
** run complete **










################################################################
Running: mpirun -n 16 python polymer_brush.py --mode=gpu --user=8
HOOMD-blue 1.3.3-unknown CUDA (7.5) SINGLE MPI SSE SSE2 SSE3 
Compiled: 03/06/2016
Copyright 2009-2016 The Regents of the University of Michigan.

All publications and presentations based on HOOMD-blue, including any reports
or published results obtained, in whole or in part, with HOOMD-blue, will
acknowledge its use according to the terms posted at the time of submission on:
http://codeblue.umich.edu/hoomd-blue/citations.html
-----
You are using HOOMD-blue. Read and cite the following:
* J A Anderson, C D Lorenz, and A Travesset. "General purpose molecular dynamics
  simulations fully implemented on graphics processing units", Journal of
  Computational Physics 227 (2008) 5342--5359
and
* J Glaser, T D Nguyen, J A Anderson, P Liu, F Spiga, J A Millan, D C Morse, and
  S C Glotzer. "Strong scaling of general-purpose molecular dynamics simulations
  on GPUs", Computer Physics Communications 192 (2015) 97--107
and
* http://codeblue.umich.edu/hoomd-blue
You can save these citations to file using cite.save().
-----
notice(2): This system is not compute exclusive, using local rank to select GPUs
notice(2): Unable to identify node local rank information
notice(2): Using global rank to select GPUs
HOOMD-blue is running on the following GPU(s):
Rank 0:  [0]            Tesla K40m  15 SM_3.5 @ 0.745 GHz, 11439 MiB DRAM
Rank 1:  [1]            Tesla K40m  15 SM_3.5 @ 0.745 GHz, 11439 MiB DRAM
Rank 2:  [2]            Tesla K40m  15 SM_3.5 @ 0.745 GHz, 11439 MiB DRAM
Rank 3:  [3]            Tesla K40m  15 SM_3.5 @ 0.745 GHz, 11439 MiB DRAM
Rank 4:  [4]            Tesla K40m  15 SM_3.5 @ 0.745 GHz, 11439 MiB DRAM
Rank 5:  [5]            Tesla K40m  15 SM_3.5 @ 0.745 GHz, 11439 MiB DRAM
Rank 6:  [0]            Tesla K40m  15 SM_3.5 @ 0.745 GHz, 11439 MiB DRAM
Rank 7:  [1]            Tesla K40m  15 SM_3.5 @ 0.745 GHz, 11439 MiB DRAM
Rank 8:  [2]            Tesla K40m  15 SM_3.5 @ 0.745 GHz, 11439 MiB DRAM
Rank 9:  [3]            Tesla K40m  15 SM_3.5 @ 0.745 GHz, 11439 MiB DRAM
Rank 10:  [4]            Tesla K40m  15 SM_3.5 @ 0.745 GHz, 11439 MiB DRAM
Rank 11:  [5]            Tesla K40m  15 SM_3.5 @ 0.745 GHz, 11439 MiB DRAM
Rank 12:  [0]            Tesla K40m  15 SM_3.5 @ 0.745 GHz, 11439 MiB DRAM
Rank 13:  [1]            Tesla K40m  15 SM_3.5 @ 0.745 GHz, 11439 MiB DRAM
Rank 14:  [2]            Tesla K40m  15 SM_3.5 @ 0.745 GHz, 11439 MiB DRAM
Rank 15:  [3]            Tesla K40m  15 SM_3.5 @ 0.745 GHz, 11439 MiB DRAM
polymer_brush.py:012  |  system=init.read_xml(filename='init.xml')
notice(2): Reading init.xml...
notice(2): --- hoomd_xml file read summary
notice(2): 1740 positions at timestep 0
notice(2): 1740 velocities
notice(2): 1740 masses
notice(2): 1740 diameters
notice(2): 5 particle types
notice(2): 1740 particle body values
notice(2): 1580 bonds
notice(2): 1420 angles
notice(2): 3780 dihedrals
notice(2): 1740 charges
HOOMD-blue is using domain decomposition: n_x = 2 n_y = 2 n_z = 4.
2 x 2 x 4 local grid on 1 nodes
notice(2): Group "all" created containing 1740 particles
polymer_brush.py:018  |  system.replicate(nx=rep, ny=rep, nz=1)
polymer_brush.py:019  |  typeW1=group.type('W1')
notice(2): Group "type W1" created containing 3840 particles
polymer_brush.py:020  |  typeW2=group.type('W2')
*Warning*: W2 does not exist in the system, creating an empty group
notice(2): Group "type W2" created containing 0 particles
notice(2): Group "Wall" created containing 3840 particles
polymer_brush.py:022  |  typeB= group.type('B')
notice(2): Group "type B" created containing 65280 particles
polymer_brush.py:023  |  typeSolvBackBone = group.type('Solvent')
notice(2): Group "type Solvent" created containing 25600 particles
polymer_brush.py:024  |  typeC= group.type('C')
*Warning*: C does not exist in the system, creating an empty group
notice(2): Group "type C" created containing 0 particles
polymer_brush.py:025  |  typeCH3_W1=group.type('CH3_W1')
notice(2): Group "type CH3_W1" created containing 3840 particles
polymer_brush.py:026  |  typeCH3_W2=group.type('CH3_W2')
*Warning*: CH3_W2 does not exist in the system, creating an empty group
notice(2): Group "type CH3_W2" created containing 0 particles
polymer_brush.py:027  |  typeSolvTail=group.type('SolvTail')
notice(2): Group "type SolvTail" created containing 12800 particles
notice(2): Group "BCH3-particles" created containing 69120 particles
notice(2): Group "CCH3-particles" created containing 0 particles
notice(2): Group "all-solvent" created containing 38400 particles
notice(2): Group "bc-particles" created containing 69120 particles
notice(2): Group "typeAll" created containing 107520 particles
notice(2): Group "typeNPT" created containing 111360 particles
Number of polymeric particles 107520
polymer_brush.py:044  |  lj = pair.lj(r_cut=3.3)
nlist.py:1051  |          globals.neighbor_list = cell();
polymer_brush.py:052  |  lj.pair_coeff.set('Solvent','W1' ,epsilon=0 , sigma=1.3144)
polymer_brush.py:053  |  lj.pair_coeff.set('Solvent','W2' ,epsilon=0 , sigma=1.3144)
polymer_brush.py:054  |  lj.pair_coeff.set('Solvent','Solvent' ,epsilon=1.0*tether_bulk , sigma=1.3144)
polymer_brush.py:055  |  lj.pair_coeff.set('Solvent','B' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:056  |  lj.pair_coeff.set('Solvent','C' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:057  |  lj.pair_coeff.set('Solvent','CH3_W1' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:058  |  lj.pair_coeff.set('Solvent','CH3_W2' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:059  |  lj.pair_coeff.set('Solvent','SolvTail' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:060  |  lj.pair_coeff.set('B','B' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:061  |  lj.pair_coeff.set('C','C' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:062  |  lj.pair_coeff.set('B','C' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:063  |  lj.pair_coeff.set('B','CH3_W1' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:064  |  lj.pair_coeff.set('B','CH3_W2' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:065  |  lj.pair_coeff.set('C','CH3_W1' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:066  |  lj.pair_coeff.set('C','CH3_W2' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:067  |  lj.pair_coeff.set('CH3_W1','CH3_W1' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:068  |  lj.pair_coeff.set('CH3_W1','CH3_W2' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:069  |  lj.pair_coeff.set('CH3_W2' ,'CH3_W2' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:071  |  lj.pair_coeff.set('B','SolvTail' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:072  |  lj.pair_coeff.set('C','SolvTail' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:073  |  lj.pair_coeff.set('CH3_W1','SolvTail' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:074  |  lj.pair_coeff.set('CH3_W2','SolvTail' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:075  |  lj.pair_coeff.set('SolvTail' ,'SolvTail' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:077  |  lj.pair_coeff.set('B','C' ,epsilon=0.01 , sigma=2.62 , alpha=0.0)
polymer_brush.py:078  |  lj.pair_coeff.set('W1','W2' ,epsilon=0.0 , sigma=1.0)
polymer_brush.py:079  |  lj.pair_coeff.set('W1','W1' ,epsilon=0.0 , sigma=1.0)
polymer_brush.py:080  |  lj.pair_coeff.set('W1','B' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:081  |  lj.pair_coeff.set('W1','C' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:082  |  lj.pair_coeff.set('W2','W2' ,epsilon=0.0 , sigma=1.0)
polymer_brush.py:083  |  lj.pair_coeff.set('W2','B' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:084  |  lj.pair_coeff.set('W2','C' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:085  |  lj.pair_coeff.set('W1','CH3_W1' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:086  |  lj.pair_coeff.set('W1','CH3_W2' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:087  |  lj.pair_coeff.set('W1','SolvTail' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:088  |  lj.pair_coeff.set('W2','CH3_W1' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:089  |  lj.pair_coeff.set('W2','CH3_W2' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:090  |  lj.pair_coeff.set('W2','SolvTail' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:091  |  lj.pair_coeff.set('A','C' ,epsilon=0.0 , sigma=1.0 , alpha=0.0)
polymer_brush.py:093  |  slj = pair.slj(r_cut= 1.3)
notice(2): Notice: slj set d_max=2.0
polymer_brush.py:094  |  slj.set_params(mode="shift")
pair.py:886  |          pair.set_params(self, mode=mode);
polymer_brush.py:095  |  slj.pair_coeff.set('W2','Solvent', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:096  |  slj.pair_coeff.set('W1','Solvent', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:097  |  slj.pair_coeff.set('Solvent','Solvent', epsilon = 0, sigma = 1.0)
polymer_brush.py:098  |  slj.pair_coeff.set('Solvent','B', epsilon = 0, sigma = 1.0)
polymer_brush.py:099  |  slj.pair_coeff.set('Solvent','C', epsilon = 0, sigma = 1.0)
polymer_brush.py:100  |  slj.pair_coeff.set('Solvent','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:101  |  slj.pair_coeff.set('Solvent','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:102  |  slj.pair_coeff.set('Solvent','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:103  |  slj.pair_coeff.set('W1','W2', epsilon = 0 , sigma =1.0)
polymer_brush.py:104  |  slj.pair_coeff.set('W1','W1', epsilon = 0 , sigma =1.0)
polymer_brush.py:105  |  slj.pair_coeff.set('W2','W2', epsilon = 0 , sigma =1.0)
polymer_brush.py:106  |  slj.pair_coeff.set('W1','B', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:107  |  slj.pair_coeff.set('W1','C', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:108  |  slj.pair_coeff.set('W2','B', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:109  |  slj.pair_coeff.set('W2','C', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:110  |  slj.pair_coeff.set('W1','CH3_W1', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:111  |  slj.pair_coeff.set('W1','CH3_W2', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:112  |  slj.pair_coeff.set('W2','CH3_W1', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:113  |  slj.pair_coeff.set('W2','CH3_W2', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:114  |  slj.pair_coeff.set('W1','SolvTail', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:115  |  slj.pair_coeff.set('W2','SolvTail', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:116  |  slj.pair_coeff.set('B','B', epsilon = 0, sigma = 1.0)
polymer_brush.py:117  |  slj.pair_coeff.set('C','C', epsilon = 0, sigma = 1.0)
polymer_brush.py:118  |  slj.pair_coeff.set('B','C', epsilon = 0, sigma = 1.0)
polymer_brush.py:119  |  slj.pair_coeff.set('B','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:120  |  slj.pair_coeff.set('B','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:121  |  slj.pair_coeff.set('B','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:122  |  slj.pair_coeff.set('C','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:123  |  slj.pair_coeff.set('C','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:124  |  slj.pair_coeff.set('C','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:125  |  slj.pair_coeff.set('CH3_W1','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:126  |  slj.pair_coeff.set('CH3_W1','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:127  |  slj.pair_coeff.set('CH3_W2','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:128  |  slj.pair_coeff.set('CH3_W1','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:129  |  slj.pair_coeff.set('CH3_W2','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:130  |  slj.pair_coeff.set('SolvTail','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:133  |  harmonicO_O= bond.harmonic(name = 'O-O-bond')
polymer_brush.py:135  |  harmonicO_O.bond_coeff.set('oleic', k=9892.9362 , r0=0.5)
polymer_brush.py:138  |  harmonicO_O.bond_coeff.set('wall', k=9892.9362, r0=1.25)
polymer_brush.py:141  |  angleWO = angle.harmonic()
polymer_brush.py:142  |  angleWO.set_coeff('W-O' , k = 201.2878 , t0= 2.5307)
polymer_brush.py:143  |  angleWO.set_coeff('O-O' , k = 201.2878 , t0= 1.92)
polymer_brush.py:144  |  angleWO.set_coeff('kink' , k = 1000.2878 , t0= 2.8)
polymer_brush.py:150  |  dihedralField = dihedral.harmonic()
polymer_brush.py:151  |  dihedralField.set_coeff('DihedralW1' , k = 2.6838 , d=1 , n= 1)
polymer_brush.py:152  |  dihedralField.set_coeff('DihedralW2' , k = 1.4543 , d=-1 , n= 2)
polymer_brush.py:153  |  dihedralField.set_coeff('DihedralW3' , k =5.4347 , d=1 , n= 3)
polymer_brush.py:154  |  dihedralField.set_coeff('Dihedral1' , k =2.6838 , d=1 , n= 1)
polymer_brush.py:155  |  dihedralField.set_coeff('Dihedral2' , k = 1.4543 , d=-1 , n= 2)
polymer_brush.py:156  |  dihedralField.set_coeff('Dihedral3' , k =5.4347 , d=1 , n= 3)
polymer_brush.py:158  |  integrate.mode_standard(dt= 0.005)
polymer_brush.py:160  |  integrator=integrate.nve(group=typeAll , limit=0.01 )
polymer_brush.py:161  |  zeroer = update.zero_momentum(period = 1)
polymer_brush.py:164  |  run(200)
notice(2): -- Neighborlist exclusion statistics -- :
notice(2): Particles with 1 exclusions             : 20480
notice(2): Particles with 2 exclusions             : 90880
notice(2): Neighbors included by diameter          : yes
notice(2): Neighbors excluded when in the same body: no
** starting run **
Time 00:00:12 | Step 200 / 200 | TPS 53.5724 | ETA 00:00:00
Average TPS: 53.5718
---------
-- Neighborlist stats:
9 normal updates / 1 forced updates / 0 dangerous updates
n_neigh_min: 60 / n_neigh_max: 139 / n_neigh_avg: 110.103
shortest rebuild period: 21
-- Cell list stats:
Dimension: 11, 11, 3
n_min    : 8 / n_max: 205 / n_avg: 80.4738
** run complete **
polymer_brush.py:165  |  zeroer.disable()
polymer_brush.py:167  |  integrator.disable()
polymer_brush.py:169  |  integrator=integrate.npt(group=typeAll , tau=1.0 , T= 1.0 , tauP = 1.2 , P = 0.00078 , x=False , y = False , z = True , rescale_all=True )
polymer_brush.py:172  |  run(5e3, profile=True, limit_hours=1)
** starting run **
Time 00:00:22 | Step 1430 / 5200 | TPS 122.993 | ETA 00:00:30
Time 00:00:32 | Step 2950 / 5200 | TPS 151.98 | ETA 00:00:14
Time 00:00:42 | Step 4555 / 5200 | TPS 160.175 | ETA 00:00:04
Time 00:00:46 | Step 5200 / 5200 | TPS 166.9 | ETA 00:00:00
Average TPS: 147.55
Simulation: 33.8868s | 100.000% 
        Bond harmonic:      1.0793s |  3.185% 
                update bond table:  0.5548s |  1.637% 
                Self:               0.5244s |  1.548% 
        Harmonic Angle:     1.4004s |  4.133% 
        Harmonic Dihedral:  2.2268s |  6.571% 
        Integrate:          4.9430s | 14.587% 
                NPT step 1:  0.2180s |  0.643% 
                        Thermo:  0.0163s |  0.048% 
                        Self:    0.2018s |  0.595% 
                NPT step 2:  3.4211s | 10.096% 
                        Thermo:  0.9708s |  2.865% 
                        Self:    2.4502s |  7.231% 
                Net force:   1.1967s |  3.532% 
                Self:        0.1072s |  0.316% 
        Neighbor:           6.9030s | 20.371% 
                Cell:           0.4308s |  1.271% 
                        compute:  0.1447s |  0.427% 
                        init:     0.2299s |  0.678% 
                        Self:     0.0563s |  0.166% 
                MPI allreduce:  0.7013s |  2.070% 
                compute:        4.4341s | 13.085% 
                filter:         0.8194s |  2.418% 
                head-list:      0.2685s |  0.792% 
                update-ex:      0.1006s |  0.297% 
                Self:           0.1483s |  0.438% 
        Pair lj:            2.6759s |  7.897% 
        Pair slj:           3.2345s |  9.545% 
        SFCPack:            0.0069s |  0.020% 
        comm_ghost_exch:    1.8180s |  5.365% 
                MPI send/recv:  0.7006s |  2.067% 509.41812 MiB/s 
                Self:           1.1175s |  3.298% 
        comm_ghost_update:  2.4979s |  7.371% 
                MPI send/recv:  0.7788s |  2.298% 2.82045 GiB/s 
                pack:           1.0722s |  3.164% 
                unpack:         0.5431s |  1.603% 
                Self:           0.1037s |  0.306% 
        comm_migrate:       5.1903s | 15.316% 
                MPI send/recv:  0.3902s |  1.151% 10.41066 MiB/s 
                angle:          1.4131s |  4.170% 
                        MPI send/recv:  0.6774s |  1.999% 6.60650 MiB/s 
                        Self:           0.7357s |  2.171% 
                bond:           1.1656s |  3.440% 
                        MPI send/recv:  0.4249s |  1.254% 4.78366 MiB/s 
                        Self:           0.7407s |  2.186% 
                dihedral:       1.6583s |  4.894% 
                        MPI send/recv:  0.6916s |  2.041% 34.31803 MiB/s 
                        Self:           0.9668s |  2.853% 
                pack:           0.2236s |  0.660% 
                unpack:         0.1133s |  0.334% 
                Self:           0.2262s |  0.667% 
        dist-check:         1.2675s |  3.740% 
        Self:               0.6433s |  1.898% 
---------
-- Neighborlist stats:
599 normal updates / 18 forced updates / 0 dangerous updates
n_neigh_min: 3 / n_neigh_max: 141 / n_neigh_avg: 105.38455
shortest rebuild period: 6
-- Cell list stats:
Dimension: 11, 11, 6
n_min    : 0 / n_max: 149 / n_avg: 37.17218
** run complete **










################################################################
GPU n=16
################################################################
################################################################
Running: mpirun -n 1 python polymer_brush.py --mode=gpu --user=16
HOOMD-blue 1.3.3-unknown CUDA (7.5) SINGLE MPI SSE SSE2 SSE3 
Compiled: 03/06/2016
Copyright 2009-2016 The Regents of the University of Michigan.

All publications and presentations based on HOOMD-blue, including any reports
or published results obtained, in whole or in part, with HOOMD-blue, will
acknowledge its use according to the terms posted at the time of submission on:
http://codeblue.umich.edu/hoomd-blue/citations.html
-----
You are using HOOMD-blue. Read and cite the following:
* J A Anderson, C D Lorenz, and A Travesset. "General purpose molecular dynamics
  simulations fully implemented on graphics processing units", Journal of
  Computational Physics 227 (2008) 5342--5359
and
* J Glaser, T D Nguyen, J A Anderson, P Liu, F Spiga, J A Millan, D C Morse, and
  S C Glotzer. "Strong scaling of general-purpose molecular dynamics simulations
  on GPUs", Computer Physics Communications 192 (2015) 97--107
and
* http://codeblue.umich.edu/hoomd-blue
You can save these citations to file using cite.save().
-----
notice(2): This system is not compute exclusive, using local rank to select GPUs
notice(2): Unable to identify node local rank information
notice(2): Using global rank to select GPUs
HOOMD-blue is running on the following GPU(s):
 [0]            Tesla K40m  15 SM_3.5 @ 0.745 GHz, 11439 MiB DRAM
polymer_brush.py:012  |  system=init.read_xml(filename='init.xml')
notice(2): Reading init.xml...
notice(2): --- hoomd_xml file read summary
notice(2): 1740 positions at timestep 0
notice(2): 1740 velocities
notice(2): 1740 masses
notice(2): 1740 diameters
notice(2): 5 particle types
notice(2): 1740 particle body values
notice(2): 1580 bonds
notice(2): 1420 angles
notice(2): 3780 dihedrals
notice(2): 1740 charges
notice(2): Group "all" created containing 1740 particles
polymer_brush.py:018  |  system.replicate(nx=rep, ny=rep, nz=1)
polymer_brush.py:019  |  typeW1=group.type('W1')
notice(2): Group "type W1" created containing 15360 particles
polymer_brush.py:020  |  typeW2=group.type('W2')
*Warning*: W2 does not exist in the system, creating an empty group
notice(2): Group "type W2" created containing 0 particles
notice(2): Group "Wall" created containing 15360 particles
polymer_brush.py:022  |  typeB= group.type('B')
notice(2): Group "type B" created containing 261120 particles
polymer_brush.py:023  |  typeSolvBackBone = group.type('Solvent')
notice(2): Group "type Solvent" created containing 102400 particles
polymer_brush.py:024  |  typeC= group.type('C')
*Warning*: C does not exist in the system, creating an empty group
notice(2): Group "type C" created containing 0 particles
polymer_brush.py:025  |  typeCH3_W1=group.type('CH3_W1')
notice(2): Group "type CH3_W1" created containing 15360 particles
polymer_brush.py:026  |  typeCH3_W2=group.type('CH3_W2')
*Warning*: CH3_W2 does not exist in the system, creating an empty group
notice(2): Group "type CH3_W2" created containing 0 particles
polymer_brush.py:027  |  typeSolvTail=group.type('SolvTail')
notice(2): Group "type SolvTail" created containing 51200 particles
notice(2): Group "BCH3-particles" created containing 276480 particles
notice(2): Group "CCH3-particles" created containing 0 particles
notice(2): Group "all-solvent" created containing 153600 particles
notice(2): Group "bc-particles" created containing 276480 particles
notice(2): Group "typeAll" created containing 430080 particles
notice(2): Group "typeNPT" created containing 445440 particles
Number of polymeric particles 430080
polymer_brush.py:044  |  lj = pair.lj(r_cut=3.3)
nlist.py:1051  |          globals.neighbor_list = cell();
polymer_brush.py:052  |  lj.pair_coeff.set('Solvent','W1' ,epsilon=0 , sigma=1.3144)
polymer_brush.py:053  |  lj.pair_coeff.set('Solvent','W2' ,epsilon=0 , sigma=1.3144)
polymer_brush.py:054  |  lj.pair_coeff.set('Solvent','Solvent' ,epsilon=1.0*tether_bulk , sigma=1.3144)
polymer_brush.py:055  |  lj.pair_coeff.set('Solvent','B' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:056  |  lj.pair_coeff.set('Solvent','C' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:057  |  lj.pair_coeff.set('Solvent','CH3_W1' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:058  |  lj.pair_coeff.set('Solvent','CH3_W2' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:059  |  lj.pair_coeff.set('Solvent','SolvTail' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:060  |  lj.pair_coeff.set('B','B' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:061  |  lj.pair_coeff.set('C','C' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:062  |  lj.pair_coeff.set('B','C' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:063  |  lj.pair_coeff.set('B','CH3_W1' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:064  |  lj.pair_coeff.set('B','CH3_W2' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:065  |  lj.pair_coeff.set('C','CH3_W1' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:066  |  lj.pair_coeff.set('C','CH3_W2' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:067  |  lj.pair_coeff.set('CH3_W1','CH3_W1' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:068  |  lj.pair_coeff.set('CH3_W1','CH3_W2' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:069  |  lj.pair_coeff.set('CH3_W2' ,'CH3_W2' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:071  |  lj.pair_coeff.set('B','SolvTail' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:072  |  lj.pair_coeff.set('C','SolvTail' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:073  |  lj.pair_coeff.set('CH3_W1','SolvTail' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:074  |  lj.pair_coeff.set('CH3_W2','SolvTail' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:075  |  lj.pair_coeff.set('SolvTail' ,'SolvTail' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:077  |  lj.pair_coeff.set('B','C' ,epsilon=0.01 , sigma=2.62 , alpha=0.0)
polymer_brush.py:078  |  lj.pair_coeff.set('W1','W2' ,epsilon=0.0 , sigma=1.0)
polymer_brush.py:079  |  lj.pair_coeff.set('W1','W1' ,epsilon=0.0 , sigma=1.0)
polymer_brush.py:080  |  lj.pair_coeff.set('W1','B' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:081  |  lj.pair_coeff.set('W1','C' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:082  |  lj.pair_coeff.set('W2','W2' ,epsilon=0.0 , sigma=1.0)
polymer_brush.py:083  |  lj.pair_coeff.set('W2','B' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:084  |  lj.pair_coeff.set('W2','C' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:085  |  lj.pair_coeff.set('W1','CH3_W1' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:086  |  lj.pair_coeff.set('W1','CH3_W2' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:087  |  lj.pair_coeff.set('W1','SolvTail' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:088  |  lj.pair_coeff.set('W2','CH3_W1' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:089  |  lj.pair_coeff.set('W2','CH3_W2' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:090  |  lj.pair_coeff.set('W2','SolvTail' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:091  |  lj.pair_coeff.set('A','C' ,epsilon=0.0 , sigma=1.0 , alpha=0.0)
polymer_brush.py:093  |  slj = pair.slj(r_cut= 1.3)
notice(2): Notice: slj set d_max=2.0
polymer_brush.py:094  |  slj.set_params(mode="shift")
pair.py:886  |          pair.set_params(self, mode=mode);
polymer_brush.py:095  |  slj.pair_coeff.set('W2','Solvent', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:096  |  slj.pair_coeff.set('W1','Solvent', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:097  |  slj.pair_coeff.set('Solvent','Solvent', epsilon = 0, sigma = 1.0)
polymer_brush.py:098  |  slj.pair_coeff.set('Solvent','B', epsilon = 0, sigma = 1.0)
polymer_brush.py:099  |  slj.pair_coeff.set('Solvent','C', epsilon = 0, sigma = 1.0)
polymer_brush.py:100  |  slj.pair_coeff.set('Solvent','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:101  |  slj.pair_coeff.set('Solvent','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:102  |  slj.pair_coeff.set('Solvent','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:103  |  slj.pair_coeff.set('W1','W2', epsilon = 0 , sigma =1.0)
polymer_brush.py:104  |  slj.pair_coeff.set('W1','W1', epsilon = 0 , sigma =1.0)
polymer_brush.py:105  |  slj.pair_coeff.set('W2','W2', epsilon = 0 , sigma =1.0)
polymer_brush.py:106  |  slj.pair_coeff.set('W1','B', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:107  |  slj.pair_coeff.set('W1','C', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:108  |  slj.pair_coeff.set('W2','B', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:109  |  slj.pair_coeff.set('W2','C', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:110  |  slj.pair_coeff.set('W1','CH3_W1', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:111  |  slj.pair_coeff.set('W1','CH3_W2', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:112  |  slj.pair_coeff.set('W2','CH3_W1', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:113  |  slj.pair_coeff.set('W2','CH3_W2', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:114  |  slj.pair_coeff.set('W1','SolvTail', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:115  |  slj.pair_coeff.set('W2','SolvTail', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:116  |  slj.pair_coeff.set('B','B', epsilon = 0, sigma = 1.0)
polymer_brush.py:117  |  slj.pair_coeff.set('C','C', epsilon = 0, sigma = 1.0)
polymer_brush.py:118  |  slj.pair_coeff.set('B','C', epsilon = 0, sigma = 1.0)
polymer_brush.py:119  |  slj.pair_coeff.set('B','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:120  |  slj.pair_coeff.set('B','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:121  |  slj.pair_coeff.set('B','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:122  |  slj.pair_coeff.set('C','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:123  |  slj.pair_coeff.set('C','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:124  |  slj.pair_coeff.set('C','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:125  |  slj.pair_coeff.set('CH3_W1','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:126  |  slj.pair_coeff.set('CH3_W1','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:127  |  slj.pair_coeff.set('CH3_W2','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:128  |  slj.pair_coeff.set('CH3_W1','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:129  |  slj.pair_coeff.set('CH3_W2','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:130  |  slj.pair_coeff.set('SolvTail','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:133  |  harmonicO_O= bond.harmonic(name = 'O-O-bond')
polymer_brush.py:135  |  harmonicO_O.bond_coeff.set('oleic', k=9892.9362 , r0=0.5)
polymer_brush.py:138  |  harmonicO_O.bond_coeff.set('wall', k=9892.9362, r0=1.25)
polymer_brush.py:141  |  angleWO = angle.harmonic()
polymer_brush.py:142  |  angleWO.set_coeff('W-O' , k = 201.2878 , t0= 2.5307)
polymer_brush.py:143  |  angleWO.set_coeff('O-O' , k = 201.2878 , t0= 1.92)
polymer_brush.py:144  |  angleWO.set_coeff('kink' , k = 1000.2878 , t0= 2.8)
polymer_brush.py:150  |  dihedralField = dihedral.harmonic()
polymer_brush.py:151  |  dihedralField.set_coeff('DihedralW1' , k = 2.6838 , d=1 , n= 1)
polymer_brush.py:152  |  dihedralField.set_coeff('DihedralW2' , k = 1.4543 , d=-1 , n= 2)
polymer_brush.py:153  |  dihedralField.set_coeff('DihedralW3' , k =5.4347 , d=1 , n= 3)
polymer_brush.py:154  |  dihedralField.set_coeff('Dihedral1' , k =2.6838 , d=1 , n= 1)
polymer_brush.py:155  |  dihedralField.set_coeff('Dihedral2' , k = 1.4543 , d=-1 , n= 2)
polymer_brush.py:156  |  dihedralField.set_coeff('Dihedral3' , k =5.4347 , d=1 , n= 3)
polymer_brush.py:158  |  integrate.mode_standard(dt= 0.005)
polymer_brush.py:160  |  integrator=integrate.nve(group=typeAll , limit=0.01 )
polymer_brush.py:161  |  zeroer = update.zero_momentum(period = 1)
polymer_brush.py:164  |  run(200)
notice(2): -- Neighborlist exclusion statistics -- :
notice(2): Particles with 1 exclusions             : 81920
notice(2): Particles with 2 exclusions             : 363520
notice(2): Neighbors included by diameter          : yes
notice(2): Neighbors excluded when in the same body: no
** starting run **
Time 00:00:11 | Step 200 / 200 | TPS 21.9022 | ETA 00:00:00
Average TPS: 21.902
---------
-- Neighborlist stats:
9 normal updates / 1 forced updates / 0 dangerous updates
n_neigh_min: 5 / n_neigh_max: 142 / n_neigh_avg: 83.9689
shortest rebuild period: 21
-- Cell list stats:
Dimension: 40, 40, 8
n_min    : 0 / n_max: 120 / n_avg: 34.8
** run complete **
polymer_brush.py:165  |  zeroer.disable()
polymer_brush.py:167  |  integrator.disable()
polymer_brush.py:169  |  integrator=integrate.npt(group=typeAll , tau=1.0 , T= 1.0 , tauP = 1.2 , P = 0.00078 , x=False , y = False , z = True , rescale_all=True )
polymer_brush.py:172  |  run(5e3, profile=True, limit_hours=1)
** starting run **
Time 00:00:21 | Step 368 / 5200 | TPS 16.7736 | ETA 00:04:48
Time 00:00:31 | Step 579 / 5200 | TPS 21.0621 | ETA 00:03:39
Time 00:00:41 | Step 796 / 5200 | TPS 21.5219 | ETA 00:03:24
Time 00:00:51 | Step 1054 / 5200 | TPS 25.7433 | ETA 00:02:41
Time 00:01:01 | Step 1429 / 5200 | TPS 37.4919 | ETA 00:01:40
Time 00:01:11 | Step 1801 / 5200 | TPS 36.7898 | ETA 00:01:32
Time 00:01:21 | Step 2164 / 5200 | TPS 36.1186 | ETA 00:01:24
Time 00:01:31 | Step 2566 / 5200 | TPS 40.1647 | ETA 00:01:05
Time 00:01:41 | Step 2968 / 5200 | TPS 40.1894 | ETA 00:00:55
Time 00:01:51 | Step 3338 / 5200 | TPS 36.9672 | ETA 00:00:50
Time 00:02:01 | Step 3745 / 5200 | TPS 40.6646 | ETA 00:00:35
Time 00:02:11 | Step 4138 / 5200 | TPS 39.2702 | ETA 00:00:27
Time 00:02:21 | Step 4510 / 5200 | TPS 37.1926 | ETA 00:00:18
Time 00:02:31 | Step 4890 / 5200 | TPS 37.9735 | ETA 00:00:08
Time 00:02:39 | Step 5200 / 5200 | TPS 42.2411 | ETA 00:00:00
Average TPS: 33.8554
Simulation: 147.6868s | 100.000% 
        Bond harmonic:      1.2868s |  0.871% 
                update bond table:  0.0373s |  0.025% 
                Self:               1.2495s |  0.846% 
        Harmonic Angle:     2.8641s |  1.939% 
        Harmonic Dihedral: 10.4451s |  7.072% 
        Integrate:          7.3885s |  5.003% 
                NPT step 1:  0.0974s |  0.066% 
                        Thermo:  0.0014s |  0.001% 
                NPT step 2:  2.6280s |  1.779% 
                        Thermo:  1.7897s |  1.212% 
                        Self:    0.8382s |  0.568% 
                Net force:   4.6271s |  3.133% 
        Neighbor:          68.8534s | 46.621% 
                Cell:        0.8086s |  0.548% 
                        compute:  0.1776s |  0.120% 
                        init:     0.5847s |  0.396% 
                compute:    52.3166s | 35.424% 
                dist-check:  0.4597s |  0.311% 
                filter:     12.7075s |  8.604% 
                head-list:   0.5190s |  0.351% 
                update-ex:   0.0037s |  0.002% 
                Self:        2.0383s |  1.380% 
        Pair lj:           24.4748s | 16.572% 
        Pair slj:          32.2394s | 21.830% 
        SFCPack:            0.0381s |  0.026% 
---------
-- Neighborlist stats:
641 normal updates / 18 forced updates / 0 dangerous updates
n_neigh_min: 3 / n_neigh_max: 149 / n_neigh_avg: 79.09069
shortest rebuild period: 5
-- Cell list stats:
Dimension: 40, 40, 19
n_min    : 0 / n_max: 120 / n_avg: 14.65263
** run complete **










################################################################
Running: mpirun -n 2 python polymer_brush.py --mode=gpu --user=16
HOOMD-blue 1.3.3-unknown CUDA (7.5) SINGLE MPI SSE SSE2 SSE3 
Compiled: 03/06/2016
Copyright 2009-2016 The Regents of the University of Michigan.

All publications and presentations based on HOOMD-blue, including any reports
or published results obtained, in whole or in part, with HOOMD-blue, will
acknowledge its use according to the terms posted at the time of submission on:
http://codeblue.umich.edu/hoomd-blue/citations.html
-----
You are using HOOMD-blue. Read and cite the following:
* J A Anderson, C D Lorenz, and A Travesset. "General purpose molecular dynamics
  simulations fully implemented on graphics processing units", Journal of
  Computational Physics 227 (2008) 5342--5359
and
* J Glaser, T D Nguyen, J A Anderson, P Liu, F Spiga, J A Millan, D C Morse, and
  S C Glotzer. "Strong scaling of general-purpose molecular dynamics simulations
  on GPUs", Computer Physics Communications 192 (2015) 97--107
and
* http://codeblue.umich.edu/hoomd-blue
You can save these citations to file using cite.save().
-----
notice(2): This system is not compute exclusive, using local rank to select GPUs
notice(2): Unable to identify node local rank information
notice(2): Using global rank to select GPUs
HOOMD-blue is running on the following GPU(s):
Rank 0:  [0]            Tesla K40m  15 SM_3.5 @ 0.745 GHz, 11439 MiB DRAM
Rank 1:  [1]            Tesla K40m  15 SM_3.5 @ 0.745 GHz, 11439 MiB DRAM
polymer_brush.py:012  |  system=init.read_xml(filename='init.xml')
notice(2): Reading init.xml...
notice(2): --- hoomd_xml file read summary
notice(2): 1740 positions at timestep 0
notice(2): 1740 velocities
notice(2): 1740 masses
notice(2): 1740 diameters
notice(2): 5 particle types
notice(2): 1740 particle body values
notice(2): 1580 bonds
notice(2): 1420 angles
notice(2): 3780 dihedrals
notice(2): 1740 charges
HOOMD-blue is using domain decomposition: n_x = 1 n_y = 1 n_z = 2.
1 x 1 x 2 local grid on 1 nodes
notice(2): Group "all" created containing 1740 particles
polymer_brush.py:018  |  system.replicate(nx=rep, ny=rep, nz=1)
polymer_brush.py:019  |  typeW1=group.type('W1')
notice(2): Group "type W1" created containing 15360 particles
polymer_brush.py:020  |  typeW2=group.type('W2')
*Warning*: W2 does not exist in the system, creating an empty group
notice(2): Group "type W2" created containing 0 particles
notice(2): Group "Wall" created containing 15360 particles
polymer_brush.py:022  |  typeB= group.type('B')
notice(2): Group "type B" created containing 261120 particles
polymer_brush.py:023  |  typeSolvBackBone = group.type('Solvent')
notice(2): Group "type Solvent" created containing 102400 particles
polymer_brush.py:024  |  typeC= group.type('C')
*Warning*: C does not exist in the system, creating an empty group
notice(2): Group "type C" created containing 0 particles
polymer_brush.py:025  |  typeCH3_W1=group.type('CH3_W1')
notice(2): Group "type CH3_W1" created containing 15360 particles
polymer_brush.py:026  |  typeCH3_W2=group.type('CH3_W2')
*Warning*: CH3_W2 does not exist in the system, creating an empty group
notice(2): Group "type CH3_W2" created containing 0 particles
polymer_brush.py:027  |  typeSolvTail=group.type('SolvTail')
notice(2): Group "type SolvTail" created containing 51200 particles
notice(2): Group "BCH3-particles" created containing 276480 particles
notice(2): Group "CCH3-particles" created containing 0 particles
notice(2): Group "all-solvent" created containing 153600 particles
notice(2): Group "bc-particles" created containing 276480 particles
notice(2): Group "typeAll" created containing 430080 particles
notice(2): Group "typeNPT" created containing 445440 particles
Number of polymeric particles 430080
polymer_brush.py:044  |  lj = pair.lj(r_cut=3.3)
nlist.py:1051  |          globals.neighbor_list = cell();
polymer_brush.py:052  |  lj.pair_coeff.set('Solvent','W1' ,epsilon=0 , sigma=1.3144)
polymer_brush.py:053  |  lj.pair_coeff.set('Solvent','W2' ,epsilon=0 , sigma=1.3144)
polymer_brush.py:054  |  lj.pair_coeff.set('Solvent','Solvent' ,epsilon=1.0*tether_bulk , sigma=1.3144)
polymer_brush.py:055  |  lj.pair_coeff.set('Solvent','B' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:056  |  lj.pair_coeff.set('Solvent','C' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:057  |  lj.pair_coeff.set('Solvent','CH3_W1' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:058  |  lj.pair_coeff.set('Solvent','CH3_W2' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:059  |  lj.pair_coeff.set('Solvent','SolvTail' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:060  |  lj.pair_coeff.set('B','B' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:061  |  lj.pair_coeff.set('C','C' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:062  |  lj.pair_coeff.set('B','C' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:063  |  lj.pair_coeff.set('B','CH3_W1' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:064  |  lj.pair_coeff.set('B','CH3_W2' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:065  |  lj.pair_coeff.set('C','CH3_W1' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:066  |  lj.pair_coeff.set('C','CH3_W2' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:067  |  lj.pair_coeff.set('CH3_W1','CH3_W1' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:068  |  lj.pair_coeff.set('CH3_W1','CH3_W2' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:069  |  lj.pair_coeff.set('CH3_W2' ,'CH3_W2' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:071  |  lj.pair_coeff.set('B','SolvTail' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:072  |  lj.pair_coeff.set('C','SolvTail' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:073  |  lj.pair_coeff.set('CH3_W1','SolvTail' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:074  |  lj.pair_coeff.set('CH3_W2','SolvTail' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:075  |  lj.pair_coeff.set('SolvTail' ,'SolvTail' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:077  |  lj.pair_coeff.set('B','C' ,epsilon=0.01 , sigma=2.62 , alpha=0.0)
polymer_brush.py:078  |  lj.pair_coeff.set('W1','W2' ,epsilon=0.0 , sigma=1.0)
polymer_brush.py:079  |  lj.pair_coeff.set('W1','W1' ,epsilon=0.0 , sigma=1.0)
polymer_brush.py:080  |  lj.pair_coeff.set('W1','B' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:081  |  lj.pair_coeff.set('W1','C' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:082  |  lj.pair_coeff.set('W2','W2' ,epsilon=0.0 , sigma=1.0)
polymer_brush.py:083  |  lj.pair_coeff.set('W2','B' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:084  |  lj.pair_coeff.set('W2','C' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:085  |  lj.pair_coeff.set('W1','CH3_W1' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:086  |  lj.pair_coeff.set('W1','CH3_W2' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:087  |  lj.pair_coeff.set('W1','SolvTail' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:088  |  lj.pair_coeff.set('W2','CH3_W1' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:089  |  lj.pair_coeff.set('W2','CH3_W2' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:090  |  lj.pair_coeff.set('W2','SolvTail' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:091  |  lj.pair_coeff.set('A','C' ,epsilon=0.0 , sigma=1.0 , alpha=0.0)
polymer_brush.py:093  |  slj = pair.slj(r_cut= 1.3)
notice(2): Notice: slj set d_max=2.0
polymer_brush.py:094  |  slj.set_params(mode="shift")
pair.py:886  |          pair.set_params(self, mode=mode);
polymer_brush.py:095  |  slj.pair_coeff.set('W2','Solvent', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:096  |  slj.pair_coeff.set('W1','Solvent', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:097  |  slj.pair_coeff.set('Solvent','Solvent', epsilon = 0, sigma = 1.0)
polymer_brush.py:098  |  slj.pair_coeff.set('Solvent','B', epsilon = 0, sigma = 1.0)
polymer_brush.py:099  |  slj.pair_coeff.set('Solvent','C', epsilon = 0, sigma = 1.0)
polymer_brush.py:100  |  slj.pair_coeff.set('Solvent','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:101  |  slj.pair_coeff.set('Solvent','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:102  |  slj.pair_coeff.set('Solvent','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:103  |  slj.pair_coeff.set('W1','W2', epsilon = 0 , sigma =1.0)
polymer_brush.py:104  |  slj.pair_coeff.set('W1','W1', epsilon = 0 , sigma =1.0)
polymer_brush.py:105  |  slj.pair_coeff.set('W2','W2', epsilon = 0 , sigma =1.0)
polymer_brush.py:106  |  slj.pair_coeff.set('W1','B', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:107  |  slj.pair_coeff.set('W1','C', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:108  |  slj.pair_coeff.set('W2','B', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:109  |  slj.pair_coeff.set('W2','C', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:110  |  slj.pair_coeff.set('W1','CH3_W1', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:111  |  slj.pair_coeff.set('W1','CH3_W2', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:112  |  slj.pair_coeff.set('W2','CH3_W1', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:113  |  slj.pair_coeff.set('W2','CH3_W2', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:114  |  slj.pair_coeff.set('W1','SolvTail', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:115  |  slj.pair_coeff.set('W2','SolvTail', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:116  |  slj.pair_coeff.set('B','B', epsilon = 0, sigma = 1.0)
polymer_brush.py:117  |  slj.pair_coeff.set('C','C', epsilon = 0, sigma = 1.0)
polymer_brush.py:118  |  slj.pair_coeff.set('B','C', epsilon = 0, sigma = 1.0)
polymer_brush.py:119  |  slj.pair_coeff.set('B','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:120  |  slj.pair_coeff.set('B','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:121  |  slj.pair_coeff.set('B','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:122  |  slj.pair_coeff.set('C','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:123  |  slj.pair_coeff.set('C','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:124  |  slj.pair_coeff.set('C','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:125  |  slj.pair_coeff.set('CH3_W1','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:126  |  slj.pair_coeff.set('CH3_W1','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:127  |  slj.pair_coeff.set('CH3_W2','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:128  |  slj.pair_coeff.set('CH3_W1','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:129  |  slj.pair_coeff.set('CH3_W2','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:130  |  slj.pair_coeff.set('SolvTail','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:133  |  harmonicO_O= bond.harmonic(name = 'O-O-bond')
polymer_brush.py:135  |  harmonicO_O.bond_coeff.set('oleic', k=9892.9362 , r0=0.5)
polymer_brush.py:138  |  harmonicO_O.bond_coeff.set('wall', k=9892.9362, r0=1.25)
polymer_brush.py:141  |  angleWO = angle.harmonic()
polymer_brush.py:142  |  angleWO.set_coeff('W-O' , k = 201.2878 , t0= 2.5307)
polymer_brush.py:143  |  angleWO.set_coeff('O-O' , k = 201.2878 , t0= 1.92)
polymer_brush.py:144  |  angleWO.set_coeff('kink' , k = 1000.2878 , t0= 2.8)
polymer_brush.py:150  |  dihedralField = dihedral.harmonic()
polymer_brush.py:151  |  dihedralField.set_coeff('DihedralW1' , k = 2.6838 , d=1 , n= 1)
polymer_brush.py:152  |  dihedralField.set_coeff('DihedralW2' , k = 1.4543 , d=-1 , n= 2)
polymer_brush.py:153  |  dihedralField.set_coeff('DihedralW3' , k =5.4347 , d=1 , n= 3)
polymer_brush.py:154  |  dihedralField.set_coeff('Dihedral1' , k =2.6838 , d=1 , n= 1)
polymer_brush.py:155  |  dihedralField.set_coeff('Dihedral2' , k = 1.4543 , d=-1 , n= 2)
polymer_brush.py:156  |  dihedralField.set_coeff('Dihedral3' , k =5.4347 , d=1 , n= 3)
polymer_brush.py:158  |  integrate.mode_standard(dt= 0.005)
polymer_brush.py:160  |  integrator=integrate.nve(group=typeAll , limit=0.01 )
polymer_brush.py:161  |  zeroer = update.zero_momentum(period = 1)
polymer_brush.py:164  |  run(200)
notice(2): -- Neighborlist exclusion statistics -- :
notice(2): Particles with 1 exclusions             : 81920
notice(2): Particles with 2 exclusions             : 363520
notice(2): Neighbors included by diameter          : yes
notice(2): Neighbors excluded when in the same body: no
** starting run **
Time 00:00:13 | Step 200 / 200 | TPS 20.1765 | ETA 00:00:00
Average TPS: 20.1764
---------
-- Neighborlist stats:
9 normal updates / 1 forced updates / 0 dangerous updates
n_neigh_min: 14 / n_neigh_max: 142 / n_neigh_avg: 91.7452
shortest rebuild period: 21
-- Cell list stats:
Dimension: 40, 40, 5
n_min    : 8 / n_max: 134 / n_avg: 52.288
** run complete **
polymer_brush.py:165  |  zeroer.disable()
polymer_brush.py:167  |  integrator.disable()
polymer_brush.py:169  |  integrator=integrate.npt(group=typeAll , tau=1.0 , T= 1.0 , tauP = 1.2 , P = 0.00078 , x=False , y = False , z = True , rescale_all=True )
polymer_brush.py:172  |  run(5e3, profile=True, limit_hours=1)
** starting run **
Time 00:00:24 | Step 373 / 5200 | TPS 17.0821 | ETA 00:04:42
Time 00:00:34 | Step 565 / 5200 | TPS 19.0933 | ETA 00:04:02
Time 00:00:44 | Step 773 / 5200 | TPS 20.6292 | ETA 00:03:34
Time 00:00:54 | Step 1007 / 5200 | TPS 23.25 | ETA 00:03:00
Time 00:01:04 | Step 1355 / 5200 | TPS 34.3686 | ETA 00:01:51
Time 00:01:14 | Step 1745 / 5200 | TPS 38.951 | ETA 00:01:28
Time 00:01:24 | Step 2089 / 5200 | TPS 34.1047 | ETA 00:01:31
Time 00:01:34 | Step 2469 / 5200 | TPS 37.9734 | ETA 00:01:11
Time 00:01:44 | Step 2876 / 5200 | TPS 40.2943 | ETA 00:00:57
Time 00:01:54 | Step 3250 / 5200 | TPS 37.2373 | ETA 00:00:52
Time 00:02:04 | Step 3652 / 5200 | TPS 40.1865 | ETA 00:00:38
Time 00:02:14 | Step 4052 / 5200 | TPS 39.9876 | ETA 00:00:28
Time 00:02:24 | Step 4435 / 5200 | TPS 38.0027 | ETA 00:00:20
Time 00:02:34 | Step 4839 / 5200 | TPS 40.353 | ETA 00:00:08
Time 00:02:43 | Step 5200 / 5200 | TPS 42.4491 | ETA 00:00:00
Average TPS: 33.488
Simulation: 149.3074s | 100.000% 
        Bond harmonic:      2.2225s |  1.489% 
                update bond table:  1.2235s |  0.819% 
                Self:               0.9989s |  0.669% 
        Harmonic Angle:     3.9640s |  2.655% 
        Harmonic Dihedral: 14.6527s |  9.814% 
        Integrate:          6.1399s |  4.112% 
                NPT step 1:  0.1852s |  0.124% 
                        Thermo:  0.0019s |  0.001% 
                        Self:    0.1833s |  0.123% 
                NPT step 2:  2.1908s |  1.467% 
                        Thermo:  1.4841s |  0.994% 
                        Self:    0.7067s |  0.473% 
                Net force:   3.6659s |  2.455% 
        Neighbor:          60.9593s | 40.828% 
                Cell:           0.3201s |  0.214% 
                        compute:  0.1397s |  0.094% 
                        init:     0.1621s |  0.109% 
                MPI allreduce:  0.0208s |  0.014% 
                compute:       48.1591s | 32.255% 
                filter:        12.0019s |  8.038% 
                head-list:      0.2789s |  0.187% 
                update-ex:      0.1299s |  0.087% 
        Pair lj:           21.9767s | 14.719% 
        Pair slj:          28.9812s | 19.410% 
        SFCPack:            0.0316s |  0.021% 
        comm_ghost_exch:    1.5480s |  1.037% 
                MPI send/recv:  0.3367s |  0.226% 6.43652 GiB/s 
                Self:           1.2113s |  0.811% 
        comm_ghost_update:  2.9018s |  1.943% 
                MPI send/recv:  1.3116s |  0.878% 7.86706 GiB/s 
                pack:           0.9524s |  0.638% 
                unpack:         0.5592s |  0.375% 
        comm_migrate:       3.4200s |  2.291% 
                MPI send/recv:  0.1014s |  0.068% 130.36444 MiB/s 
                angle:          0.6470s |  0.433% 
                        MPI send/recv:  0.0749s |  0.050% 138.13582 MiB/s 
                        Self:           0.5721s |  0.383% 
                bond:           0.4971s |  0.333% 
                        MPI send/recv:  0.0223s |  0.015% 241.18952 MiB/s 
                        Self:           0.4748s |  0.318% 
                dihedral:       1.5405s |  1.032% 
                        MPI send/recv:  0.0794s |  0.053% 568.35088 MiB/s 
                        Self:           1.4611s |  0.979% 
                pack:           0.4273s |  0.286% 
                unpack:         0.0189s |  0.013% 
                Self:           0.1878s |  0.126% 
        dist-check:         0.7590s |  0.508% 
        Self:               1.7507s |  1.173% 
---------
-- Neighborlist stats:
640 normal updates / 18 forced updates / 0 dangerous updates
n_neigh_min: 3 / n_neigh_max: 147 / n_neigh_avg: 96.47979
shortest rebuild period: 5
-- Cell list stats:
Dimension: 40, 40, 10
n_min    : 0 / n_max: 135 / n_avg: 22.18644
** run complete **










################################################################
Running: mpirun -n 4 python polymer_brush.py --mode=gpu --user=16
HOOMD-blue 1.3.3-unknown CUDA (7.5) SINGLE MPI SSE SSE2 SSE3 
Compiled: 03/06/2016
Copyright 2009-2016 The Regents of the University of Michigan.

All publications and presentations based on HOOMD-blue, including any reports
or published results obtained, in whole or in part, with HOOMD-blue, will
acknowledge its use according to the terms posted at the time of submission on:
http://codeblue.umich.edu/hoomd-blue/citations.html
-----
You are using HOOMD-blue. Read and cite the following:
* J A Anderson, C D Lorenz, and A Travesset. "General purpose molecular dynamics
  simulations fully implemented on graphics processing units", Journal of
  Computational Physics 227 (2008) 5342--5359
and
* J Glaser, T D Nguyen, J A Anderson, P Liu, F Spiga, J A Millan, D C Morse, and
  S C Glotzer. "Strong scaling of general-purpose molecular dynamics simulations
  on GPUs", Computer Physics Communications 192 (2015) 97--107
and
* http://codeblue.umich.edu/hoomd-blue
You can save these citations to file using cite.save().
-----
notice(2): This system is not compute exclusive, using local rank to select GPUs
notice(2): Unable to identify node local rank information
notice(2): Using global rank to select GPUs
HOOMD-blue is running on the following GPU(s):
Rank 0:  [0]            Tesla K40m  15 SM_3.5 @ 0.745 GHz, 11439 MiB DRAM
Rank 1:  [1]            Tesla K40m  15 SM_3.5 @ 0.745 GHz, 11439 MiB DRAM
Rank 2:  [2]            Tesla K40m  15 SM_3.5 @ 0.745 GHz, 11439 MiB DRAM
Rank 3:  [3]            Tesla K40m  15 SM_3.5 @ 0.745 GHz, 11439 MiB DRAM
polymer_brush.py:012  |  system=init.read_xml(filename='init.xml')
notice(2): Reading init.xml...
notice(2): --- hoomd_xml file read summary
notice(2): 1740 positions at timestep 0
notice(2): 1740 velocities
notice(2): 1740 masses
notice(2): 1740 diameters
notice(2): 5 particle types
notice(2): 1740 particle body values
notice(2): 1580 bonds
notice(2): 1420 angles
notice(2): 3780 dihedrals
notice(2): 1740 charges
HOOMD-blue is using domain decomposition: n_x = 1 n_y = 1 n_z = 4.
1 x 1 x 4 local grid on 1 nodes
notice(2): Group "all" created containing 1740 particles
polymer_brush.py:018  |  system.replicate(nx=rep, ny=rep, nz=1)
polymer_brush.py:019  |  typeW1=group.type('W1')
notice(2): Group "type W1" created containing 15360 particles
polymer_brush.py:020  |  typeW2=group.type('W2')
*Warning*: W2 does not exist in the system, creating an empty group
notice(2): Group "type W2" created containing 0 particles
notice(2): Group "Wall" created containing 15360 particles
polymer_brush.py:022  |  typeB= group.type('B')
notice(2): Group "type B" created containing 261120 particles
polymer_brush.py:023  |  typeSolvBackBone = group.type('Solvent')
notice(2): Group "type Solvent" created containing 102400 particles
polymer_brush.py:024  |  typeC= group.type('C')
*Warning*: C does not exist in the system, creating an empty group
notice(2): Group "type C" created containing 0 particles
polymer_brush.py:025  |  typeCH3_W1=group.type('CH3_W1')
notice(2): Group "type CH3_W1" created containing 15360 particles
polymer_brush.py:026  |  typeCH3_W2=group.type('CH3_W2')
*Warning*: CH3_W2 does not exist in the system, creating an empty group
notice(2): Group "type CH3_W2" created containing 0 particles
polymer_brush.py:027  |  typeSolvTail=group.type('SolvTail')
notice(2): Group "type SolvTail" created containing 51200 particles
notice(2): Group "BCH3-particles" created containing 276480 particles
notice(2): Group "CCH3-particles" created containing 0 particles
notice(2): Group "all-solvent" created containing 153600 particles
notice(2): Group "bc-particles" created containing 276480 particles
notice(2): Group "typeAll" created containing 430080 particles
notice(2): Group "typeNPT" created containing 445440 particles
Number of polymeric particles 430080
polymer_brush.py:044  |  lj = pair.lj(r_cut=3.3)
nlist.py:1051  |          globals.neighbor_list = cell();
polymer_brush.py:052  |  lj.pair_coeff.set('Solvent','W1' ,epsilon=0 , sigma=1.3144)
polymer_brush.py:053  |  lj.pair_coeff.set('Solvent','W2' ,epsilon=0 , sigma=1.3144)
polymer_brush.py:054  |  lj.pair_coeff.set('Solvent','Solvent' ,epsilon=1.0*tether_bulk , sigma=1.3144)
polymer_brush.py:055  |  lj.pair_coeff.set('Solvent','B' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:056  |  lj.pair_coeff.set('Solvent','C' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:057  |  lj.pair_coeff.set('Solvent','CH3_W1' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:058  |  lj.pair_coeff.set('Solvent','CH3_W2' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:059  |  lj.pair_coeff.set('Solvent','SolvTail' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:060  |  lj.pair_coeff.set('B','B' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:061  |  lj.pair_coeff.set('C','C' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:062  |  lj.pair_coeff.set('B','C' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:063  |  lj.pair_coeff.set('B','CH3_W1' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:064  |  lj.pair_coeff.set('B','CH3_W2' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:065  |  lj.pair_coeff.set('C','CH3_W1' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:066  |  lj.pair_coeff.set('C','CH3_W2' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:067  |  lj.pair_coeff.set('CH3_W1','CH3_W1' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:068  |  lj.pair_coeff.set('CH3_W1','CH3_W2' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:069  |  lj.pair_coeff.set('CH3_W2' ,'CH3_W2' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:071  |  lj.pair_coeff.set('B','SolvTail' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:072  |  lj.pair_coeff.set('C','SolvTail' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:073  |  lj.pair_coeff.set('CH3_W1','SolvTail' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:074  |  lj.pair_coeff.set('CH3_W2','SolvTail' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:075  |  lj.pair_coeff.set('SolvTail' ,'SolvTail' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:077  |  lj.pair_coeff.set('B','C' ,epsilon=0.01 , sigma=2.62 , alpha=0.0)
polymer_brush.py:078  |  lj.pair_coeff.set('W1','W2' ,epsilon=0.0 , sigma=1.0)
polymer_brush.py:079  |  lj.pair_coeff.set('W1','W1' ,epsilon=0.0 , sigma=1.0)
polymer_brush.py:080  |  lj.pair_coeff.set('W1','B' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:081  |  lj.pair_coeff.set('W1','C' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:082  |  lj.pair_coeff.set('W2','W2' ,epsilon=0.0 , sigma=1.0)
polymer_brush.py:083  |  lj.pair_coeff.set('W2','B' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:084  |  lj.pair_coeff.set('W2','C' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:085  |  lj.pair_coeff.set('W1','CH3_W1' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:086  |  lj.pair_coeff.set('W1','CH3_W2' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:087  |  lj.pair_coeff.set('W1','SolvTail' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:088  |  lj.pair_coeff.set('W2','CH3_W1' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:089  |  lj.pair_coeff.set('W2','CH3_W2' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:090  |  lj.pair_coeff.set('W2','SolvTail' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:091  |  lj.pair_coeff.set('A','C' ,epsilon=0.0 , sigma=1.0 , alpha=0.0)
polymer_brush.py:093  |  slj = pair.slj(r_cut= 1.3)
notice(2): Notice: slj set d_max=2.0
polymer_brush.py:094  |  slj.set_params(mode="shift")
pair.py:886  |          pair.set_params(self, mode=mode);
polymer_brush.py:095  |  slj.pair_coeff.set('W2','Solvent', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:096  |  slj.pair_coeff.set('W1','Solvent', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:097  |  slj.pair_coeff.set('Solvent','Solvent', epsilon = 0, sigma = 1.0)
polymer_brush.py:098  |  slj.pair_coeff.set('Solvent','B', epsilon = 0, sigma = 1.0)
polymer_brush.py:099  |  slj.pair_coeff.set('Solvent','C', epsilon = 0, sigma = 1.0)
polymer_brush.py:100  |  slj.pair_coeff.set('Solvent','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:101  |  slj.pair_coeff.set('Solvent','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:102  |  slj.pair_coeff.set('Solvent','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:103  |  slj.pair_coeff.set('W1','W2', epsilon = 0 , sigma =1.0)
polymer_brush.py:104  |  slj.pair_coeff.set('W1','W1', epsilon = 0 , sigma =1.0)
polymer_brush.py:105  |  slj.pair_coeff.set('W2','W2', epsilon = 0 , sigma =1.0)
polymer_brush.py:106  |  slj.pair_coeff.set('W1','B', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:107  |  slj.pair_coeff.set('W1','C', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:108  |  slj.pair_coeff.set('W2','B', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:109  |  slj.pair_coeff.set('W2','C', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:110  |  slj.pair_coeff.set('W1','CH3_W1', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:111  |  slj.pair_coeff.set('W1','CH3_W2', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:112  |  slj.pair_coeff.set('W2','CH3_W1', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:113  |  slj.pair_coeff.set('W2','CH3_W2', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:114  |  slj.pair_coeff.set('W1','SolvTail', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:115  |  slj.pair_coeff.set('W2','SolvTail', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:116  |  slj.pair_coeff.set('B','B', epsilon = 0, sigma = 1.0)
polymer_brush.py:117  |  slj.pair_coeff.set('C','C', epsilon = 0, sigma = 1.0)
polymer_brush.py:118  |  slj.pair_coeff.set('B','C', epsilon = 0, sigma = 1.0)
polymer_brush.py:119  |  slj.pair_coeff.set('B','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:120  |  slj.pair_coeff.set('B','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:121  |  slj.pair_coeff.set('B','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:122  |  slj.pair_coeff.set('C','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:123  |  slj.pair_coeff.set('C','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:124  |  slj.pair_coeff.set('C','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:125  |  slj.pair_coeff.set('CH3_W1','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:126  |  slj.pair_coeff.set('CH3_W1','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:127  |  slj.pair_coeff.set('CH3_W2','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:128  |  slj.pair_coeff.set('CH3_W1','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:129  |  slj.pair_coeff.set('CH3_W2','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:130  |  slj.pair_coeff.set('SolvTail','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:133  |  harmonicO_O= bond.harmonic(name = 'O-O-bond')
polymer_brush.py:135  |  harmonicO_O.bond_coeff.set('oleic', k=9892.9362 , r0=0.5)
polymer_brush.py:138  |  harmonicO_O.bond_coeff.set('wall', k=9892.9362, r0=1.25)
polymer_brush.py:141  |  angleWO = angle.harmonic()
polymer_brush.py:142  |  angleWO.set_coeff('W-O' , k = 201.2878 , t0= 2.5307)
polymer_brush.py:143  |  angleWO.set_coeff('O-O' , k = 201.2878 , t0= 1.92)
polymer_brush.py:144  |  angleWO.set_coeff('kink' , k = 1000.2878 , t0= 2.8)
polymer_brush.py:150  |  dihedralField = dihedral.harmonic()
polymer_brush.py:151  |  dihedralField.set_coeff('DihedralW1' , k = 2.6838 , d=1 , n= 1)
polymer_brush.py:152  |  dihedralField.set_coeff('DihedralW2' , k = 1.4543 , d=-1 , n= 2)
polymer_brush.py:153  |  dihedralField.set_coeff('DihedralW3' , k =5.4347 , d=1 , n= 3)
polymer_brush.py:154  |  dihedralField.set_coeff('Dihedral1' , k =2.6838 , d=1 , n= 1)
polymer_brush.py:155  |  dihedralField.set_coeff('Dihedral2' , k = 1.4543 , d=-1 , n= 2)
polymer_brush.py:156  |  dihedralField.set_coeff('Dihedral3' , k =5.4347 , d=1 , n= 3)
polymer_brush.py:158  |  integrate.mode_standard(dt= 0.005)
polymer_brush.py:160  |  integrator=integrate.nve(group=typeAll , limit=0.01 )
polymer_brush.py:161  |  zeroer = update.zero_momentum(period = 1)
polymer_brush.py:164  |  run(200)
notice(2): -- Neighborlist exclusion statistics -- :
notice(2): Particles with 1 exclusions             : 81920
notice(2): Particles with 2 exclusions             : 363520
notice(2): Neighbors included by diameter          : yes
notice(2): Neighbors excluded when in the same body: no
** starting run **
Time 00:00:13 | Step 200 / 200 | TPS 21.6223 | ETA 00:00:00
Average TPS: 21.6222
---------
-- Neighborlist stats:
9 normal updates / 1 forced updates / 0 dangerous updates
n_neigh_min: 60 / n_neigh_max: 142 / n_neigh_avg: 110.045
shortest rebuild period: 21
-- Cell list stats:
Dimension: 40, 40, 3
n_min    : 8 / n_max: 170 / n_avg: 68.64
** run complete **
polymer_brush.py:165  |  zeroer.disable()
polymer_brush.py:167  |  integrator.disable()
polymer_brush.py:169  |  integrator=integrate.npt(group=typeAll , tau=1.0 , T= 1.0 , tauP = 1.2 , P = 0.00078 , x=False , y = False , z = True , rescale_all=True )
polymer_brush.py:172  |  run(5e3, profile=True, limit_hours=1)
** starting run **
Time 00:00:24 | Step 413 / 5200 | TPS 21.2915 | ETA 00:03:44
Time 00:00:34 | Step 622 / 5200 | TPS 20.8897 | ETA 00:03:39
Time 00:00:44 | Step 845 / 5200 | TPS 22.1526 | ETA 00:03:16
Time 00:00:54 | Step 1123 / 5200 | TPS 27.7645 | ETA 00:02:26
Time 00:01:04 | Step 1499 / 5200 | TPS 37.4311 | ETA 00:01:38
Time 00:01:14 | Step 1843 / 5200 | TPS 34.231 | ETA 00:01:38
Time 00:01:24 | Step 2207 / 5200 | TPS 36.0951 | ETA 00:01:22
Time 00:01:34 | Step 2618 / 5200 | TPS 41.0698 | ETA 00:01:02
Time 00:01:44 | Step 3012 / 5200 | TPS 39.3593 | ETA 00:00:55
Time 00:01:54 | Step 3383 / 5200 | TPS 37.0599 | ETA 00:00:49
Time 00:02:04 | Step 3792 / 5200 | TPS 40.8621 | ETA 00:00:34
Time 00:02:14 | Step 4179 / 5200 | TPS 38.1859 | ETA 00:00:26
Time 00:02:24 | Step 4563 / 5200 | TPS 38.1591 | ETA 00:00:16
Time 00:02:34 | Step 4965 / 5200 | TPS 40.181 | ETA 00:00:05
Time 00:02:40 | Step 5200 / 5200 | TPS 41.483 | ETA 00:00:00
Average TPS: 34.2062
Simulation: 146.1725s | 100.000% 
        Bond harmonic:      3.3628s |  2.301% 
                update bond table:  2.4955s |  1.707% 
                Self:               0.8673s |  0.593% 
        Harmonic Angle:     4.8231s |  3.300% 
        Harmonic Dihedral: 14.9316s | 10.215% 
        Integrate:          5.3353s |  3.650% 
                NPT step 1:  0.1951s |  0.133% 
                        Thermo:  0.0031s |  0.002% 
                        Self:    0.1921s |  0.131% 
                NPT step 2:  1.9208s |  1.314% 
                        Thermo:  1.3022s |  0.891% 
                        Self:    0.6186s |  0.423% 
                Net force:   2.9659s |  2.029% 
                Self:        0.2535s |  0.173% 
        Neighbor:          56.7100s | 38.797% 
                Cell:           0.1929s |  0.132% 
                        compute:  0.1089s |  0.075% 
                        init:     0.0737s |  0.050% 
                MPI allreduce:  0.0229s |  0.016% 
                compute:       44.6149s | 30.522% 
                filter:        11.3926s |  7.794% 
                head-list:      0.2998s |  0.205% 
                update-ex:      0.1335s |  0.091% 
        Pair lj:           19.8558s | 13.584% 
        Pair slj:          31.0631s | 21.251% 
        SFCPack:            0.0283s |  0.019% 
        comm_ghost_exch:    1.5732s |  1.076% 
                MPI send/recv:  0.4825s |  0.330% 4.48978 GiB/s 
                Self:           1.0907s |  0.746% 
        comm_ghost_update:  2.6582s |  1.819% 
                MPI send/recv:  1.2862s |  0.880% 7.27580 GiB/s 
                pack:           1.0945s |  0.749% 
                unpack:         0.1932s |  0.132% 
        comm_migrate:       3.6407s |  2.491% 
                MPI send/recv:  0.2177s |  0.149% 11.24185 MiB/s 
                angle:          0.8458s |  0.579% 
                        MPI send/recv:  0.2996s |  0.205% 6.05332 MiB/s 
                        Self:           0.5462s |  0.374% 
                bond:           0.5710s |  0.391% 
                        MPI send/recv:  0.1283s |  0.088% 7.55163 MiB/s 
                        Self:           0.4427s |  0.303% 
                dihedral:       1.4772s |  1.011% 
                        MPI send/recv:  0.2835s |  0.194% 27.64057 MiB/s 
                        Self:           1.1936s |  0.817% 
                pack:           0.3709s |  0.254% 
                unpack:         0.0187s |  0.013% 
        dist-check:         0.6786s |  0.464% 
        Self:               1.5118s |  1.034% 
---------
-- Neighborlist stats:
638 normal updates / 18 forced updates / 0 dangerous updates
n_neigh_min: 3 / n_neigh_max: 148 / n_neigh_avg: 105.30710
shortest rebuild period: 5
-- Cell list stats:
Dimension: 40, 40, 5
n_min    : 0 / n_max: 140 / n_avg: 37.85975
** run complete **










################################################################
Running: mpirun -n 8 python polymer_brush.py --mode=gpu --user=16
HOOMD-blue 1.3.3-unknown CUDA (7.5) SINGLE MPI SSE SSE2 SSE3 
Compiled: 03/06/2016
Copyright 2009-2016 The Regents of the University of Michigan.

All publications and presentations based on HOOMD-blue, including any reports
or published results obtained, in whole or in part, with HOOMD-blue, will
acknowledge its use according to the terms posted at the time of submission on:
http://codeblue.umich.edu/hoomd-blue/citations.html
-----
You are using HOOMD-blue. Read and cite the following:
* J A Anderson, C D Lorenz, and A Travesset. "General purpose molecular dynamics
  simulations fully implemented on graphics processing units", Journal of
  Computational Physics 227 (2008) 5342--5359
and
* J Glaser, T D Nguyen, J A Anderson, P Liu, F Spiga, J A Millan, D C Morse, and
  S C Glotzer. "Strong scaling of general-purpose molecular dynamics simulations
  on GPUs", Computer Physics Communications 192 (2015) 97--107
and
* http://codeblue.umich.edu/hoomd-blue
You can save these citations to file using cite.save().
-----
notice(2): This system is not compute exclusive, using local rank to select GPUs
notice(2): Unable to identify node local rank information
notice(2): Using global rank to select GPUs
HOOMD-blue is running on the following GPU(s):
Rank 0:  [0]            Tesla K40m  15 SM_3.5 @ 0.745 GHz, 11439 MiB DRAM
Rank 1:  [1]            Tesla K40m  15 SM_3.5 @ 0.745 GHz, 11439 MiB DRAM
Rank 2:  [2]            Tesla K40m  15 SM_3.5 @ 0.745 GHz, 11439 MiB DRAM
Rank 3:  [3]            Tesla K40m  15 SM_3.5 @ 0.745 GHz, 11439 MiB DRAM
Rank 4:  [4]            Tesla K40m  15 SM_3.5 @ 0.745 GHz, 11439 MiB DRAM
Rank 5:  [5]            Tesla K40m  15 SM_3.5 @ 0.745 GHz, 11439 MiB DRAM
Rank 6:  [0]            Tesla K40m  15 SM_3.5 @ 0.745 GHz, 11439 MiB DRAM
Rank 7:  [1]            Tesla K40m  15 SM_3.5 @ 0.745 GHz, 11439 MiB DRAM
polymer_brush.py:012  |  system=init.read_xml(filename='init.xml')
notice(2): Reading init.xml...
notice(2): --- hoomd_xml file read summary
notice(2): 1740 positions at timestep 0
notice(2): 1740 velocities
notice(2): 1740 masses
notice(2): 1740 diameters
notice(2): 5 particle types
notice(2): 1740 particle body values
notice(2): 1580 bonds
notice(2): 1420 angles
notice(2): 3780 dihedrals
notice(2): 1740 charges
HOOMD-blue is using domain decomposition: n_x = 1 n_y = 2 n_z = 4.
1 x 2 x 4 local grid on 1 nodes
notice(2): Group "all" created containing 1740 particles
polymer_brush.py:018  |  system.replicate(nx=rep, ny=rep, nz=1)
polymer_brush.py:019  |  typeW1=group.type('W1')
notice(2): Group "type W1" created containing 15360 particles
polymer_brush.py:020  |  typeW2=group.type('W2')
*Warning*: W2 does not exist in the system, creating an empty group
notice(2): Group "type W2" created containing 0 particles
notice(2): Group "Wall" created containing 15360 particles
polymer_brush.py:022  |  typeB= group.type('B')
notice(2): Group "type B" created containing 261120 particles
polymer_brush.py:023  |  typeSolvBackBone = group.type('Solvent')
notice(2): Group "type Solvent" created containing 102400 particles
polymer_brush.py:024  |  typeC= group.type('C')
*Warning*: C does not exist in the system, creating an empty group
notice(2): Group "type C" created containing 0 particles
polymer_brush.py:025  |  typeCH3_W1=group.type('CH3_W1')
notice(2): Group "type CH3_W1" created containing 15360 particles
polymer_brush.py:026  |  typeCH3_W2=group.type('CH3_W2')
*Warning*: CH3_W2 does not exist in the system, creating an empty group
notice(2): Group "type CH3_W2" created containing 0 particles
polymer_brush.py:027  |  typeSolvTail=group.type('SolvTail')
notice(2): Group "type SolvTail" created containing 51200 particles
notice(2): Group "BCH3-particles" created containing 276480 particles
notice(2): Group "CCH3-particles" created containing 0 particles
notice(2): Group "all-solvent" created containing 153600 particles
notice(2): Group "bc-particles" created containing 276480 particles
notice(2): Group "typeAll" created containing 430080 particles
notice(2): Group "typeNPT" created containing 445440 particles
Number of polymeric particles 430080
polymer_brush.py:044  |  lj = pair.lj(r_cut=3.3)
nlist.py:1051  |          globals.neighbor_list = cell();
polymer_brush.py:052  |  lj.pair_coeff.set('Solvent','W1' ,epsilon=0 , sigma=1.3144)
polymer_brush.py:053  |  lj.pair_coeff.set('Solvent','W2' ,epsilon=0 , sigma=1.3144)
polymer_brush.py:054  |  lj.pair_coeff.set('Solvent','Solvent' ,epsilon=1.0*tether_bulk , sigma=1.3144)
polymer_brush.py:055  |  lj.pair_coeff.set('Solvent','B' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:056  |  lj.pair_coeff.set('Solvent','C' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:057  |  lj.pair_coeff.set('Solvent','CH3_W1' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:058  |  lj.pair_coeff.set('Solvent','CH3_W2' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:059  |  lj.pair_coeff.set('Solvent','SolvTail' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:060  |  lj.pair_coeff.set('B','B' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:061  |  lj.pair_coeff.set('C','C' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:062  |  lj.pair_coeff.set('B','C' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:063  |  lj.pair_coeff.set('B','CH3_W1' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:064  |  lj.pair_coeff.set('B','CH3_W2' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:065  |  lj.pair_coeff.set('C','CH3_W1' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:066  |  lj.pair_coeff.set('C','CH3_W2' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:067  |  lj.pair_coeff.set('CH3_W1','CH3_W1' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:068  |  lj.pair_coeff.set('CH3_W1','CH3_W2' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:069  |  lj.pair_coeff.set('CH3_W2' ,'CH3_W2' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:071  |  lj.pair_coeff.set('B','SolvTail' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:072  |  lj.pair_coeff.set('C','SolvTail' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:073  |  lj.pair_coeff.set('CH3_W1','SolvTail' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:074  |  lj.pair_coeff.set('CH3_W2','SolvTail' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:075  |  lj.pair_coeff.set('SolvTail' ,'SolvTail' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:077  |  lj.pair_coeff.set('B','C' ,epsilon=0.01 , sigma=2.62 , alpha=0.0)
polymer_brush.py:078  |  lj.pair_coeff.set('W1','W2' ,epsilon=0.0 , sigma=1.0)
polymer_brush.py:079  |  lj.pair_coeff.set('W1','W1' ,epsilon=0.0 , sigma=1.0)
polymer_brush.py:080  |  lj.pair_coeff.set('W1','B' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:081  |  lj.pair_coeff.set('W1','C' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:082  |  lj.pair_coeff.set('W2','W2' ,epsilon=0.0 , sigma=1.0)
polymer_brush.py:083  |  lj.pair_coeff.set('W2','B' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:084  |  lj.pair_coeff.set('W2','C' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:085  |  lj.pair_coeff.set('W1','CH3_W1' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:086  |  lj.pair_coeff.set('W1','CH3_W2' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:087  |  lj.pair_coeff.set('W1','SolvTail' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:088  |  lj.pair_coeff.set('W2','CH3_W1' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:089  |  lj.pair_coeff.set('W2','CH3_W2' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:090  |  lj.pair_coeff.set('W2','SolvTail' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:091  |  lj.pair_coeff.set('A','C' ,epsilon=0.0 , sigma=1.0 , alpha=0.0)
polymer_brush.py:093  |  slj = pair.slj(r_cut= 1.3)
notice(2): Notice: slj set d_max=2.0
polymer_brush.py:094  |  slj.set_params(mode="shift")
pair.py:886  |          pair.set_params(self, mode=mode);
polymer_brush.py:095  |  slj.pair_coeff.set('W2','Solvent', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:096  |  slj.pair_coeff.set('W1','Solvent', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:097  |  slj.pair_coeff.set('Solvent','Solvent', epsilon = 0, sigma = 1.0)
polymer_brush.py:098  |  slj.pair_coeff.set('Solvent','B', epsilon = 0, sigma = 1.0)
polymer_brush.py:099  |  slj.pair_coeff.set('Solvent','C', epsilon = 0, sigma = 1.0)
polymer_brush.py:100  |  slj.pair_coeff.set('Solvent','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:101  |  slj.pair_coeff.set('Solvent','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:102  |  slj.pair_coeff.set('Solvent','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:103  |  slj.pair_coeff.set('W1','W2', epsilon = 0 , sigma =1.0)
polymer_brush.py:104  |  slj.pair_coeff.set('W1','W1', epsilon = 0 , sigma =1.0)
polymer_brush.py:105  |  slj.pair_coeff.set('W2','W2', epsilon = 0 , sigma =1.0)
polymer_brush.py:106  |  slj.pair_coeff.set('W1','B', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:107  |  slj.pair_coeff.set('W1','C', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:108  |  slj.pair_coeff.set('W2','B', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:109  |  slj.pair_coeff.set('W2','C', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:110  |  slj.pair_coeff.set('W1','CH3_W1', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:111  |  slj.pair_coeff.set('W1','CH3_W2', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:112  |  slj.pair_coeff.set('W2','CH3_W1', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:113  |  slj.pair_coeff.set('W2','CH3_W2', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:114  |  slj.pair_coeff.set('W1','SolvTail', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:115  |  slj.pair_coeff.set('W2','SolvTail', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:116  |  slj.pair_coeff.set('B','B', epsilon = 0, sigma = 1.0)
polymer_brush.py:117  |  slj.pair_coeff.set('C','C', epsilon = 0, sigma = 1.0)
polymer_brush.py:118  |  slj.pair_coeff.set('B','C', epsilon = 0, sigma = 1.0)
polymer_brush.py:119  |  slj.pair_coeff.set('B','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:120  |  slj.pair_coeff.set('B','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:121  |  slj.pair_coeff.set('B','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:122  |  slj.pair_coeff.set('C','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:123  |  slj.pair_coeff.set('C','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:124  |  slj.pair_coeff.set('C','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:125  |  slj.pair_coeff.set('CH3_W1','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:126  |  slj.pair_coeff.set('CH3_W1','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:127  |  slj.pair_coeff.set('CH3_W2','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:128  |  slj.pair_coeff.set('CH3_W1','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:129  |  slj.pair_coeff.set('CH3_W2','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:130  |  slj.pair_coeff.set('SolvTail','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:133  |  harmonicO_O= bond.harmonic(name = 'O-O-bond')
polymer_brush.py:135  |  harmonicO_O.bond_coeff.set('oleic', k=9892.9362 , r0=0.5)
polymer_brush.py:138  |  harmonicO_O.bond_coeff.set('wall', k=9892.9362, r0=1.25)
polymer_brush.py:141  |  angleWO = angle.harmonic()
polymer_brush.py:142  |  angleWO.set_coeff('W-O' , k = 201.2878 , t0= 2.5307)
polymer_brush.py:143  |  angleWO.set_coeff('O-O' , k = 201.2878 , t0= 1.92)
polymer_brush.py:144  |  angleWO.set_coeff('kink' , k = 1000.2878 , t0= 2.8)
polymer_brush.py:150  |  dihedralField = dihedral.harmonic()
polymer_brush.py:151  |  dihedralField.set_coeff('DihedralW1' , k = 2.6838 , d=1 , n= 1)
polymer_brush.py:152  |  dihedralField.set_coeff('DihedralW2' , k = 1.4543 , d=-1 , n= 2)
polymer_brush.py:153  |  dihedralField.set_coeff('DihedralW3' , k =5.4347 , d=1 , n= 3)
polymer_brush.py:154  |  dihedralField.set_coeff('Dihedral1' , k =2.6838 , d=1 , n= 1)
polymer_brush.py:155  |  dihedralField.set_coeff('Dihedral2' , k = 1.4543 , d=-1 , n= 2)
polymer_brush.py:156  |  dihedralField.set_coeff('Dihedral3' , k =5.4347 , d=1 , n= 3)
polymer_brush.py:158  |  integrate.mode_standard(dt= 0.005)
polymer_brush.py:160  |  integrator=integrate.nve(group=typeAll , limit=0.01 )
polymer_brush.py:161  |  zeroer = update.zero_momentum(period = 1)
polymer_brush.py:164  |  run(200)
notice(2): -- Neighborlist exclusion statistics -- :
notice(2): Particles with 1 exclusions             : 81920
notice(2): Particles with 2 exclusions             : 363520
notice(2): Neighbors included by diameter          : yes
notice(2): Neighbors excluded when in the same body: no
** starting run **
Time 00:00:13 | Step 200 / 200 | TPS 33.0409 | ETA 00:00:00
Average TPS: 33.0405
---------
-- Neighborlist stats:
9 normal updates / 1 forced updates / 0 dangerous updates
n_neigh_min: 60 / n_neigh_max: 142 / n_neigh_avg: 110.032
shortest rebuild period: 21
-- Cell list stats:
Dimension: 40, 21, 3
n_min    : 8 / n_max: 180 / n_avg: 71.6825
** run complete **
polymer_brush.py:165  |  zeroer.disable()
polymer_brush.py:167  |  integrator.disable()
polymer_brush.py:169  |  integrator=integrate.npt(group=typeAll , tau=1.0 , T= 1.0 , tauP = 1.2 , P = 0.00078 , x=False , y = False , z = True , rescale_all=True )
polymer_brush.py:172  |  run(5e3, profile=True, limit_hours=1)
** starting run **
Time 00:00:23 | Step 562 / 5200 | TPS 36.1112 | ETA 00:02:08
Time 00:00:33 | Step 940 / 5200 | TPS 37.7768 | ETA 00:01:52
Time 00:00:43 | Step 1483 / 5200 | TPS 54.0699 | ETA 00:01:08
Time 00:00:53 | Step 2006 / 5200 | TPS 52.262 | ETA 00:01:01
Time 00:01:03 | Step 2611 / 5200 | TPS 60.4233 | ETA 00:00:42
Time 00:01:13 | Step 3222 / 5200 | TPS 60.8078 | ETA 00:00:32
Time 00:01:23 | Step 3852 / 5200 | TPS 62.9779 | ETA 00:00:21
Time 00:01:33 | Step 4470 / 5200 | TPS 61.7976 | ETA 00:00:11
Time 00:01:43 | Step 5110 / 5200 | TPS 63.7863 | ETA 00:00:01
Time 00:01:45 | Step 5200 / 5200 | TPS 64.5175 | ETA 00:00:00
Average TPS: 54.6009
Simulation: 91.5737s | 100.000% 
        Bond harmonic:      1.9884s |  2.171% 
                update bond table:  1.1456s |  1.251% 
                Self:               0.8429s |  0.920% 
        Harmonic Angle:     2.6471s |  2.891% 
        Harmonic Dihedral:  7.6061s |  8.306% 
        Integrate:          5.3225s |  5.812% 
                NPT step 1:  0.2148s |  0.235% 
                        Thermo:  0.0082s |  0.009% 
                        Self:    0.2066s |  0.226% 
                NPT step 2:  3.1434s |  3.433% 
                        Thermo:  0.8106s |  0.885% 
                        Self:    2.3328s |  2.547% 
                Net force:   1.6648s |  1.818% 
                Self:        0.2995s |  0.327% 
        Neighbor:          32.9635s | 35.997% 
                Cell:           0.3346s |  0.365% 
                        compute:  0.2115s |  0.231% 
                        init:     0.1081s |  0.118% 
                MPI allreduce:  0.5428s |  0.593% 
                compute:       25.3676s | 27.702% 
                filter:         5.8535s |  6.392% 
                head-list:      0.5628s |  0.615% 
                update-ex:      0.2373s |  0.259% 
        Pair lj:           11.2224s | 12.255% 
        Pair slj:          17.5316s | 19.145% 
        SFCPack:            0.0172s |  0.019% 
        comm_ghost_exch:    1.8680s |  2.040% 
                MPI send/recv:  0.5504s |  0.601% 2.80253 GiB/s 
                Self:           1.3175s |  1.439% 
        comm_ghost_update:  3.1778s |  3.470% 
                MPI send/recv:  1.0874s |  1.187% 6.56999 GiB/s 
                pack:           1.0366s |  1.132% 
                unpack:         0.9700s |  1.059% 
        comm_migrate:       5.0492s |  5.514% 
                MPI send/recv:  0.3844s |  0.420% 26.46580 MiB/s 
                angle:          1.2353s |  1.349% 
                        MPI send/recv:  0.4881s |  0.533% 21.97307 MiB/s 
                        Self:           0.7472s |  0.816% 
                bond:           0.9430s |  1.030% 
                        MPI send/recv:  0.2881s |  0.315% 16.84692 MiB/s 
                        Self:           0.6548s |  0.715% 
                dihedral:       1.8629s |  2.034% 
                        MPI send/recv:  0.4629s |  0.506% 122.21022 MiB/s 
                        Self:           1.4000s |  1.529% 
                pack:           0.2641s |  0.288% 
                unpack:         0.0763s |  0.083% 
                Self:           0.2831s |  0.309% 
        dist-check:         1.2901s |  1.409% 
        Self:               0.8895s |  0.971% 
---------
-- Neighborlist stats:
640 normal updates / 18 forced updates / 0 dangerous updates
n_neigh_min: 3 / n_neigh_max: 148 / n_neigh_avg: 105.35166
shortest rebuild period: 5
-- Cell list stats:
Dimension: 40, 21, 5
n_min    : 0 / n_max: 138 / n_avg: 39.54714
** run complete **










################################################################
Running: mpirun -n 16 python polymer_brush.py --mode=gpu --user=16
HOOMD-blue 1.3.3-unknown CUDA (7.5) SINGLE MPI SSE SSE2 SSE3 
Compiled: 03/06/2016
Copyright 2009-2016 The Regents of the University of Michigan.

All publications and presentations based on HOOMD-blue, including any reports
or published results obtained, in whole or in part, with HOOMD-blue, will
acknowledge its use according to the terms posted at the time of submission on:
http://codeblue.umich.edu/hoomd-blue/citations.html
-----
You are using HOOMD-blue. Read and cite the following:
* J A Anderson, C D Lorenz, and A Travesset. "General purpose molecular dynamics
  simulations fully implemented on graphics processing units", Journal of
  Computational Physics 227 (2008) 5342--5359
and
* J Glaser, T D Nguyen, J A Anderson, P Liu, F Spiga, J A Millan, D C Morse, and
  S C Glotzer. "Strong scaling of general-purpose molecular dynamics simulations
  on GPUs", Computer Physics Communications 192 (2015) 97--107
and
* http://codeblue.umich.edu/hoomd-blue
You can save these citations to file using cite.save().
-----
notice(2): This system is not compute exclusive, using local rank to select GPUs
notice(2): Unable to identify node local rank information
notice(2): Using global rank to select GPUs
HOOMD-blue is running on the following GPU(s):
Rank 0:  [0]            Tesla K40m  15 SM_3.5 @ 0.745 GHz, 11439 MiB DRAM
Rank 1:  [1]            Tesla K40m  15 SM_3.5 @ 0.745 GHz, 11439 MiB DRAM
Rank 2:  [2]            Tesla K40m  15 SM_3.5 @ 0.745 GHz, 11439 MiB DRAM
Rank 3:  [3]            Tesla K40m  15 SM_3.5 @ 0.745 GHz, 11439 MiB DRAM
Rank 4:  [4]            Tesla K40m  15 SM_3.5 @ 0.745 GHz, 11439 MiB DRAM
Rank 5:  [5]            Tesla K40m  15 SM_3.5 @ 0.745 GHz, 11439 MiB DRAM
Rank 6:  [0]            Tesla K40m  15 SM_3.5 @ 0.745 GHz, 11439 MiB DRAM
Rank 7:  [1]            Tesla K40m  15 SM_3.5 @ 0.745 GHz, 11439 MiB DRAM
Rank 8:  [2]            Tesla K40m  15 SM_3.5 @ 0.745 GHz, 11439 MiB DRAM
Rank 9:  [3]            Tesla K40m  15 SM_3.5 @ 0.745 GHz, 11439 MiB DRAM
Rank 10:  [4]            Tesla K40m  15 SM_3.5 @ 0.745 GHz, 11439 MiB DRAM
Rank 11:  [5]            Tesla K40m  15 SM_3.5 @ 0.745 GHz, 11439 MiB DRAM
Rank 12:  [0]            Tesla K40m  15 SM_3.5 @ 0.745 GHz, 11439 MiB DRAM
Rank 13:  [1]            Tesla K40m  15 SM_3.5 @ 0.745 GHz, 11439 MiB DRAM
Rank 14:  [2]            Tesla K40m  15 SM_3.5 @ 0.745 GHz, 11439 MiB DRAM
Rank 15:  [3]            Tesla K40m  15 SM_3.5 @ 0.745 GHz, 11439 MiB DRAM
polymer_brush.py:012  |  system=init.read_xml(filename='init.xml')
notice(2): Reading init.xml...
notice(2): --- hoomd_xml file read summary
notice(2): 1740 positions at timestep 0
notice(2): 1740 velocities
notice(2): 1740 masses
notice(2): 1740 diameters
notice(2): 5 particle types
notice(2): 1740 particle body values
notice(2): 1580 bonds
notice(2): 1420 angles
notice(2): 3780 dihedrals
notice(2): 1740 charges
HOOMD-blue is using domain decomposition: n_x = 2 n_y = 2 n_z = 4.
2 x 2 x 4 local grid on 1 nodes
notice(2): Group "all" created containing 1740 particles
polymer_brush.py:018  |  system.replicate(nx=rep, ny=rep, nz=1)
polymer_brush.py:019  |  typeW1=group.type('W1')
notice(2): Group "type W1" created containing 15360 particles
polymer_brush.py:020  |  typeW2=group.type('W2')
*Warning*: W2 does not exist in the system, creating an empty group
notice(2): Group "type W2" created containing 0 particles
notice(2): Group "Wall" created containing 15360 particles
polymer_brush.py:022  |  typeB= group.type('B')
notice(2): Group "type B" created containing 261120 particles
polymer_brush.py:023  |  typeSolvBackBone = group.type('Solvent')
notice(2): Group "type Solvent" created containing 102400 particles
polymer_brush.py:024  |  typeC= group.type('C')
*Warning*: C does not exist in the system, creating an empty group
notice(2): Group "type C" created containing 0 particles
polymer_brush.py:025  |  typeCH3_W1=group.type('CH3_W1')
notice(2): Group "type CH3_W1" created containing 15360 particles
polymer_brush.py:026  |  typeCH3_W2=group.type('CH3_W2')
*Warning*: CH3_W2 does not exist in the system, creating an empty group
notice(2): Group "type CH3_W2" created containing 0 particles
polymer_brush.py:027  |  typeSolvTail=group.type('SolvTail')
notice(2): Group "type SolvTail" created containing 51200 particles
notice(2): Group "BCH3-particles" created containing 276480 particles
notice(2): Group "CCH3-particles" created containing 0 particles
notice(2): Group "all-solvent" created containing 153600 particles
notice(2): Group "bc-particles" created containing 276480 particles
notice(2): Group "typeAll" created containing 430080 particles
notice(2): Group "typeNPT" created containing 445440 particles
Number of polymeric particles 430080
polymer_brush.py:044  |  lj = pair.lj(r_cut=3.3)
nlist.py:1051  |          globals.neighbor_list = cell();
polymer_brush.py:052  |  lj.pair_coeff.set('Solvent','W1' ,epsilon=0 , sigma=1.3144)
polymer_brush.py:053  |  lj.pair_coeff.set('Solvent','W2' ,epsilon=0 , sigma=1.3144)
polymer_brush.py:054  |  lj.pair_coeff.set('Solvent','Solvent' ,epsilon=1.0*tether_bulk , sigma=1.3144)
polymer_brush.py:055  |  lj.pair_coeff.set('Solvent','B' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:056  |  lj.pair_coeff.set('Solvent','C' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:057  |  lj.pair_coeff.set('Solvent','CH3_W1' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:058  |  lj.pair_coeff.set('Solvent','CH3_W2' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:059  |  lj.pair_coeff.set('Solvent','SolvTail' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:060  |  lj.pair_coeff.set('B','B' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:061  |  lj.pair_coeff.set('C','C' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:062  |  lj.pair_coeff.set('B','C' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:063  |  lj.pair_coeff.set('B','CH3_W1' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:064  |  lj.pair_coeff.set('B','CH3_W2' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:065  |  lj.pair_coeff.set('C','CH3_W1' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:066  |  lj.pair_coeff.set('C','CH3_W2' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:067  |  lj.pair_coeff.set('CH3_W1','CH3_W1' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:068  |  lj.pair_coeff.set('CH3_W1','CH3_W2' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:069  |  lj.pair_coeff.set('CH3_W2' ,'CH3_W2' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:071  |  lj.pair_coeff.set('B','SolvTail' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:072  |  lj.pair_coeff.set('C','SolvTail' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:073  |  lj.pair_coeff.set('CH3_W1','SolvTail' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:074  |  lj.pair_coeff.set('CH3_W2','SolvTail' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:075  |  lj.pair_coeff.set('SolvTail' ,'SolvTail' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:077  |  lj.pair_coeff.set('B','C' ,epsilon=0.01 , sigma=2.62 , alpha=0.0)
polymer_brush.py:078  |  lj.pair_coeff.set('W1','W2' ,epsilon=0.0 , sigma=1.0)
polymer_brush.py:079  |  lj.pair_coeff.set('W1','W1' ,epsilon=0.0 , sigma=1.0)
polymer_brush.py:080  |  lj.pair_coeff.set('W1','B' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:081  |  lj.pair_coeff.set('W1','C' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:082  |  lj.pair_coeff.set('W2','W2' ,epsilon=0.0 , sigma=1.0)
polymer_brush.py:083  |  lj.pair_coeff.set('W2','B' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:084  |  lj.pair_coeff.set('W2','C' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:085  |  lj.pair_coeff.set('W1','CH3_W1' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:086  |  lj.pair_coeff.set('W1','CH3_W2' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:087  |  lj.pair_coeff.set('W1','SolvTail' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:088  |  lj.pair_coeff.set('W2','CH3_W1' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:089  |  lj.pair_coeff.set('W2','CH3_W2' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:090  |  lj.pair_coeff.set('W2','SolvTail' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:091  |  lj.pair_coeff.set('A','C' ,epsilon=0.0 , sigma=1.0 , alpha=0.0)
polymer_brush.py:093  |  slj = pair.slj(r_cut= 1.3)
notice(2): Notice: slj set d_max=2.0
polymer_brush.py:094  |  slj.set_params(mode="shift")
pair.py:886  |          pair.set_params(self, mode=mode);
polymer_brush.py:095  |  slj.pair_coeff.set('W2','Solvent', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:096  |  slj.pair_coeff.set('W1','Solvent', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:097  |  slj.pair_coeff.set('Solvent','Solvent', epsilon = 0, sigma = 1.0)
polymer_brush.py:098  |  slj.pair_coeff.set('Solvent','B', epsilon = 0, sigma = 1.0)
polymer_brush.py:099  |  slj.pair_coeff.set('Solvent','C', epsilon = 0, sigma = 1.0)
polymer_brush.py:100  |  slj.pair_coeff.set('Solvent','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:101  |  slj.pair_coeff.set('Solvent','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:102  |  slj.pair_coeff.set('Solvent','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:103  |  slj.pair_coeff.set('W1','W2', epsilon = 0 , sigma =1.0)
polymer_brush.py:104  |  slj.pair_coeff.set('W1','W1', epsilon = 0 , sigma =1.0)
polymer_brush.py:105  |  slj.pair_coeff.set('W2','W2', epsilon = 0 , sigma =1.0)
polymer_brush.py:106  |  slj.pair_coeff.set('W1','B', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:107  |  slj.pair_coeff.set('W1','C', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:108  |  slj.pair_coeff.set('W2','B', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:109  |  slj.pair_coeff.set('W2','C', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:110  |  slj.pair_coeff.set('W1','CH3_W1', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:111  |  slj.pair_coeff.set('W1','CH3_W2', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:112  |  slj.pair_coeff.set('W2','CH3_W1', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:113  |  slj.pair_coeff.set('W2','CH3_W2', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:114  |  slj.pair_coeff.set('W1','SolvTail', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:115  |  slj.pair_coeff.set('W2','SolvTail', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:116  |  slj.pair_coeff.set('B','B', epsilon = 0, sigma = 1.0)
polymer_brush.py:117  |  slj.pair_coeff.set('C','C', epsilon = 0, sigma = 1.0)
polymer_brush.py:118  |  slj.pair_coeff.set('B','C', epsilon = 0, sigma = 1.0)
polymer_brush.py:119  |  slj.pair_coeff.set('B','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:120  |  slj.pair_coeff.set('B','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:121  |  slj.pair_coeff.set('B','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:122  |  slj.pair_coeff.set('C','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:123  |  slj.pair_coeff.set('C','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:124  |  slj.pair_coeff.set('C','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:125  |  slj.pair_coeff.set('CH3_W1','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:126  |  slj.pair_coeff.set('CH3_W1','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:127  |  slj.pair_coeff.set('CH3_W2','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:128  |  slj.pair_coeff.set('CH3_W1','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:129  |  slj.pair_coeff.set('CH3_W2','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:130  |  slj.pair_coeff.set('SolvTail','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:133  |  harmonicO_O= bond.harmonic(name = 'O-O-bond')
polymer_brush.py:135  |  harmonicO_O.bond_coeff.set('oleic', k=9892.9362 , r0=0.5)
polymer_brush.py:138  |  harmonicO_O.bond_coeff.set('wall', k=9892.9362, r0=1.25)
polymer_brush.py:141  |  angleWO = angle.harmonic()
polymer_brush.py:142  |  angleWO.set_coeff('W-O' , k = 201.2878 , t0= 2.5307)
polymer_brush.py:143  |  angleWO.set_coeff('O-O' , k = 201.2878 , t0= 1.92)
polymer_brush.py:144  |  angleWO.set_coeff('kink' , k = 1000.2878 , t0= 2.8)
polymer_brush.py:150  |  dihedralField = dihedral.harmonic()
polymer_brush.py:151  |  dihedralField.set_coeff('DihedralW1' , k = 2.6838 , d=1 , n= 1)
polymer_brush.py:152  |  dihedralField.set_coeff('DihedralW2' , k = 1.4543 , d=-1 , n= 2)
polymer_brush.py:153  |  dihedralField.set_coeff('DihedralW3' , k =5.4347 , d=1 , n= 3)
polymer_brush.py:154  |  dihedralField.set_coeff('Dihedral1' , k =2.6838 , d=1 , n= 1)
polymer_brush.py:155  |  dihedralField.set_coeff('Dihedral2' , k = 1.4543 , d=-1 , n= 2)
polymer_brush.py:156  |  dihedralField.set_coeff('Dihedral3' , k =5.4347 , d=1 , n= 3)
polymer_brush.py:158  |  integrate.mode_standard(dt= 0.005)
polymer_brush.py:160  |  integrator=integrate.nve(group=typeAll , limit=0.01 )
polymer_brush.py:161  |  zeroer = update.zero_momentum(period = 1)
polymer_brush.py:164  |  run(200)
notice(2): -- Neighborlist exclusion statistics -- :
notice(2): Particles with 1 exclusions             : 81920
notice(2): Particles with 2 exclusions             : 363520
notice(2): Neighbors included by diameter          : yes
notice(2): Neighbors excluded when in the same body: no
** starting run **
Time 00:00:18 | Step 200 / 200 | TPS 32.6097 | ETA 00:00:00
Average TPS: 32.6094
---------
-- Neighborlist stats:
9 normal updates / 1 forced updates / 0 dangerous updates
n_neigh_min: 60 / n_neigh_max: 141 / n_neigh_avg: 110.034
shortest rebuild period: 21
-- Cell list stats:
Dimension: 21, 21, 3
n_min    : 8 / n_max: 191 / n_avg: 74.709
** run complete **
polymer_brush.py:165  |  zeroer.disable()
polymer_brush.py:167  |  integrator.disable()
polymer_brush.py:169  |  integrator=integrate.npt(group=typeAll , tau=1.0 , T= 1.0 , tauP = 1.2 , P = 0.00078 , x=False , y = False , z = True , rescale_all=True )
polymer_brush.py:172  |  run(5e3, profile=True, limit_hours=1)
** starting run **
Time 00:00:29 | Step 677 / 5200 | TPS 47.1436 | ETA 00:01:35
Time 00:00:39 | Step 1277 / 5200 | TPS 59.9909 | ETA 00:01:05
Time 00:00:49 | Step 1922 / 5200 | TPS 64.4625 | ETA 00:00:50
Time 00:00:59 | Step 2701 / 5200 | TPS 77.848 | ETA 00:00:32
Time 00:01:09 | Step 3485 / 5200 | TPS 78.368 | ETA 00:00:21
Time 00:01:19 | Step 4312 / 5200 | TPS 82.6732 | ETA 00:00:10
Time 00:01:29 | Step 5143 / 5200 | TPS 82.8098 | ETA 00:00:00
Time 00:01:30 | Step 5200 / 5200 | TPS 89.1252 | ETA 00:00:00
Average TPS: 70.6076
Simulation: 70.8139s | 100.000% 
        Bond harmonic:      1.4188s |  2.004% 
                update bond table:  1.0679s |  1.508% 
                Self:               0.3509s |  0.496% 
        Harmonic Angle:     2.1641s |  3.056% 
        Harmonic Dihedral:  4.6008s |  6.497% 
        Integrate:          8.7221s | 12.317% 
                NPT step 1:  0.2235s |  0.316% 
                        Thermo:  0.0175s |  0.025% 
                        Self:    0.2060s |  0.291% 
                NPT step 2:  6.5770s |  9.288% 
                        Thermo:  1.1916s |  1.683% 
                        Self:    5.3854s |  7.605% 
                Net force:   1.8342s |  2.590% 
                Self:        0.0873s |  0.123% 
        Neighbor:          22.0183s | 31.093% 
                Cell:           0.6341s |  0.895% 
                        compute:  0.3895s |  0.550% 
                        init:     0.2050s |  0.290% 
                MPI allreduce:  0.9493s |  1.341% 
                compute:       15.7047s | 22.177% 
                filter:         3.2126s |  4.537% 
                head-list:      0.9280s |  1.310% 
                update-ex:      0.4434s |  0.626% 
                Self:           0.1464s |  0.207% 
        Pair lj:            7.3066s | 10.318% 
        Pair slj:           8.8269s | 12.465% 
        SFCPack:            0.0121s |  0.017% 
        comm_ghost_exch:    2.4143s |  3.409% 
                MPI send/recv:  1.0497s |  1.482% 968.43352 MiB/s 
                Self:           1.3646s |  1.927% 
        comm_ghost_update:  4.2385s |  5.985% 
                MPI send/recv:  1.5128s |  2.136% 3.73624 GiB/s 
                pack:           1.5860s |  2.240% 
                unpack:         1.0347s |  1.461% 
                Self:           0.1049s |  0.148% 
        comm_migrate:       6.7676s |  9.557% 
                MPI send/recv:  0.5121s |  0.723% 16.30704 MiB/s 
                angle:          1.7895s |  2.527% 
                        MPI send/recv:  0.8740s |  1.234% 10.33457 MiB/s 
                        Self:           0.9154s |  1.293% 
                bond:           1.3149s |  1.857% 
                        MPI send/recv:  0.4269s |  0.603% 9.50614 MiB/s 
                        Self:           0.8880s |  1.254% 
                dihedral:       2.3977s |  3.386% 
                        MPI send/recv:  0.8505s |  1.201% 56.69715 MiB/s 
                        Self:           1.5472s |  2.185% 
                pack:           0.2834s |  0.400% 
                unpack:         0.1263s |  0.178% 
                Self:           0.3438s |  0.485% 
        dist-check:         1.5338s |  2.166% 
        Self:               0.7902s |  1.116% 
---------
-- Neighborlist stats:
638 normal updates / 18 forced updates / 0 dangerous updates
n_neigh_min: 3 / n_neigh_max: 142 / n_neigh_avg: 105.15906
shortest rebuild period: 5
-- Cell list stats:
Dimension: 21, 21, 5
n_min    : 0 / n_max: 142 / n_avg: 41.33469
** run complete **










################################################################
GPU n=32
################################################################
################################################################
Running: mpirun -n 1 python polymer_brush.py --mode=gpu --user=32
HOOMD-blue 1.3.3-unknown CUDA (7.5) SINGLE MPI SSE SSE2 SSE3 
Compiled: 03/06/2016
Copyright 2009-2016 The Regents of the University of Michigan.

All publications and presentations based on HOOMD-blue, including any reports
or published results obtained, in whole or in part, with HOOMD-blue, will
acknowledge its use according to the terms posted at the time of submission on:
http://codeblue.umich.edu/hoomd-blue/citations.html
-----
You are using HOOMD-blue. Read and cite the following:
* J A Anderson, C D Lorenz, and A Travesset. "General purpose molecular dynamics
  simulations fully implemented on graphics processing units", Journal of
  Computational Physics 227 (2008) 5342--5359
and
* J Glaser, T D Nguyen, J A Anderson, P Liu, F Spiga, J A Millan, D C Morse, and
  S C Glotzer. "Strong scaling of general-purpose molecular dynamics simulations
  on GPUs", Computer Physics Communications 192 (2015) 97--107
and
* http://codeblue.umich.edu/hoomd-blue
You can save these citations to file using cite.save().
-----
notice(2): This system is not compute exclusive, using local rank to select GPUs
notice(2): Unable to identify node local rank information
notice(2): Using global rank to select GPUs
HOOMD-blue is running on the following GPU(s):
 [0]            Tesla K40m  15 SM_3.5 @ 0.745 GHz, 11439 MiB DRAM
polymer_brush.py:012  |  system=init.read_xml(filename='init.xml')
notice(2): Reading init.xml...
notice(2): --- hoomd_xml file read summary
notice(2): 1740 positions at timestep 0
notice(2): 1740 velocities
notice(2): 1740 masses
notice(2): 1740 diameters
notice(2): 5 particle types
notice(2): 1740 particle body values
notice(2): 1580 bonds
notice(2): 1420 angles
notice(2): 3780 dihedrals
notice(2): 1740 charges
notice(2): Group "all" created containing 1740 particles
polymer_brush.py:018  |  system.replicate(nx=rep, ny=rep, nz=1)
polymer_brush.py:019  |  typeW1=group.type('W1')
notice(2): Group "type W1" created containing 61440 particles
polymer_brush.py:020  |  typeW2=group.type('W2')
*Warning*: W2 does not exist in the system, creating an empty group
notice(2): Group "type W2" created containing 0 particles
notice(2): Group "Wall" created containing 61440 particles
polymer_brush.py:022  |  typeB= group.type('B')
notice(2): Group "type B" created containing 1044480 particles
polymer_brush.py:023  |  typeSolvBackBone = group.type('Solvent')
notice(2): Group "type Solvent" created containing 409600 particles
polymer_brush.py:024  |  typeC= group.type('C')
*Warning*: C does not exist in the system, creating an empty group
notice(2): Group "type C" created containing 0 particles
polymer_brush.py:025  |  typeCH3_W1=group.type('CH3_W1')
notice(2): Group "type CH3_W1" created containing 61440 particles
polymer_brush.py:026  |  typeCH3_W2=group.type('CH3_W2')
*Warning*: CH3_W2 does not exist in the system, creating an empty group
notice(2): Group "type CH3_W2" created containing 0 particles
polymer_brush.py:027  |  typeSolvTail=group.type('SolvTail')
notice(2): Group "type SolvTail" created containing 204800 particles
notice(2): Group "BCH3-particles" created containing 1105920 particles
notice(2): Group "CCH3-particles" created containing 0 particles
notice(2): Group "all-solvent" created containing 614400 particles
notice(2): Group "bc-particles" created containing 1105920 particles
notice(2): Group "typeAll" created containing 1720320 particles
notice(2): Group "typeNPT" created containing 1781760 particles
Number of polymeric particles 1720320
polymer_brush.py:044  |  lj = pair.lj(r_cut=3.3)
nlist.py:1051  |          globals.neighbor_list = cell();
polymer_brush.py:052  |  lj.pair_coeff.set('Solvent','W1' ,epsilon=0 , sigma=1.3144)
polymer_brush.py:053  |  lj.pair_coeff.set('Solvent','W2' ,epsilon=0 , sigma=1.3144)
polymer_brush.py:054  |  lj.pair_coeff.set('Solvent','Solvent' ,epsilon=1.0*tether_bulk , sigma=1.3144)
polymer_brush.py:055  |  lj.pair_coeff.set('Solvent','B' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:056  |  lj.pair_coeff.set('Solvent','C' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:057  |  lj.pair_coeff.set('Solvent','CH3_W1' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:058  |  lj.pair_coeff.set('Solvent','CH3_W2' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:059  |  lj.pair_coeff.set('Solvent','SolvTail' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:060  |  lj.pair_coeff.set('B','B' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:061  |  lj.pair_coeff.set('C','C' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:062  |  lj.pair_coeff.set('B','C' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:063  |  lj.pair_coeff.set('B','CH3_W1' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:064  |  lj.pair_coeff.set('B','CH3_W2' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:065  |  lj.pair_coeff.set('C','CH3_W1' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:066  |  lj.pair_coeff.set('C','CH3_W2' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:067  |  lj.pair_coeff.set('CH3_W1','CH3_W1' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:068  |  lj.pair_coeff.set('CH3_W1','CH3_W2' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:069  |  lj.pair_coeff.set('CH3_W2' ,'CH3_W2' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:071  |  lj.pair_coeff.set('B','SolvTail' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:072  |  lj.pair_coeff.set('C','SolvTail' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:073  |  lj.pair_coeff.set('CH3_W1','SolvTail' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:074  |  lj.pair_coeff.set('CH3_W2','SolvTail' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:075  |  lj.pair_coeff.set('SolvTail' ,'SolvTail' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:077  |  lj.pair_coeff.set('B','C' ,epsilon=0.01 , sigma=2.62 , alpha=0.0)
polymer_brush.py:078  |  lj.pair_coeff.set('W1','W2' ,epsilon=0.0 , sigma=1.0)
polymer_brush.py:079  |  lj.pair_coeff.set('W1','W1' ,epsilon=0.0 , sigma=1.0)
polymer_brush.py:080  |  lj.pair_coeff.set('W1','B' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:081  |  lj.pair_coeff.set('W1','C' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:082  |  lj.pair_coeff.set('W2','W2' ,epsilon=0.0 , sigma=1.0)
polymer_brush.py:083  |  lj.pair_coeff.set('W2','B' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:084  |  lj.pair_coeff.set('W2','C' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:085  |  lj.pair_coeff.set('W1','CH3_W1' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:086  |  lj.pair_coeff.set('W1','CH3_W2' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:087  |  lj.pair_coeff.set('W1','SolvTail' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:088  |  lj.pair_coeff.set('W2','CH3_W1' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:089  |  lj.pair_coeff.set('W2','CH3_W2' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:090  |  lj.pair_coeff.set('W2','SolvTail' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:091  |  lj.pair_coeff.set('A','C' ,epsilon=0.0 , sigma=1.0 , alpha=0.0)
polymer_brush.py:093  |  slj = pair.slj(r_cut= 1.3)
notice(2): Notice: slj set d_max=2.0
polymer_brush.py:094  |  slj.set_params(mode="shift")
pair.py:886  |          pair.set_params(self, mode=mode);
polymer_brush.py:095  |  slj.pair_coeff.set('W2','Solvent', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:096  |  slj.pair_coeff.set('W1','Solvent', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:097  |  slj.pair_coeff.set('Solvent','Solvent', epsilon = 0, sigma = 1.0)
polymer_brush.py:098  |  slj.pair_coeff.set('Solvent','B', epsilon = 0, sigma = 1.0)
polymer_brush.py:099  |  slj.pair_coeff.set('Solvent','C', epsilon = 0, sigma = 1.0)
polymer_brush.py:100  |  slj.pair_coeff.set('Solvent','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:101  |  slj.pair_coeff.set('Solvent','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:102  |  slj.pair_coeff.set('Solvent','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:103  |  slj.pair_coeff.set('W1','W2', epsilon = 0 , sigma =1.0)
polymer_brush.py:104  |  slj.pair_coeff.set('W1','W1', epsilon = 0 , sigma =1.0)
polymer_brush.py:105  |  slj.pair_coeff.set('W2','W2', epsilon = 0 , sigma =1.0)
polymer_brush.py:106  |  slj.pair_coeff.set('W1','B', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:107  |  slj.pair_coeff.set('W1','C', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:108  |  slj.pair_coeff.set('W2','B', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:109  |  slj.pair_coeff.set('W2','C', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:110  |  slj.pair_coeff.set('W1','CH3_W1', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:111  |  slj.pair_coeff.set('W1','CH3_W2', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:112  |  slj.pair_coeff.set('W2','CH3_W1', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:113  |  slj.pair_coeff.set('W2','CH3_W2', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:114  |  slj.pair_coeff.set('W1','SolvTail', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:115  |  slj.pair_coeff.set('W2','SolvTail', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:116  |  slj.pair_coeff.set('B','B', epsilon = 0, sigma = 1.0)
polymer_brush.py:117  |  slj.pair_coeff.set('C','C', epsilon = 0, sigma = 1.0)
polymer_brush.py:118  |  slj.pair_coeff.set('B','C', epsilon = 0, sigma = 1.0)
polymer_brush.py:119  |  slj.pair_coeff.set('B','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:120  |  slj.pair_coeff.set('B','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:121  |  slj.pair_coeff.set('B','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:122  |  slj.pair_coeff.set('C','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:123  |  slj.pair_coeff.set('C','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:124  |  slj.pair_coeff.set('C','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:125  |  slj.pair_coeff.set('CH3_W1','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:126  |  slj.pair_coeff.set('CH3_W1','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:127  |  slj.pair_coeff.set('CH3_W2','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:128  |  slj.pair_coeff.set('CH3_W1','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:129  |  slj.pair_coeff.set('CH3_W2','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:130  |  slj.pair_coeff.set('SolvTail','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:133  |  harmonicO_O= bond.harmonic(name = 'O-O-bond')
polymer_brush.py:135  |  harmonicO_O.bond_coeff.set('oleic', k=9892.9362 , r0=0.5)
polymer_brush.py:138  |  harmonicO_O.bond_coeff.set('wall', k=9892.9362, r0=1.25)
polymer_brush.py:141  |  angleWO = angle.harmonic()
polymer_brush.py:142  |  angleWO.set_coeff('W-O' , k = 201.2878 , t0= 2.5307)
polymer_brush.py:143  |  angleWO.set_coeff('O-O' , k = 201.2878 , t0= 1.92)
polymer_brush.py:144  |  angleWO.set_coeff('kink' , k = 1000.2878 , t0= 2.8)
polymer_brush.py:150  |  dihedralField = dihedral.harmonic()
polymer_brush.py:151  |  dihedralField.set_coeff('DihedralW1' , k = 2.6838 , d=1 , n= 1)
polymer_brush.py:152  |  dihedralField.set_coeff('DihedralW2' , k = 1.4543 , d=-1 , n= 2)
polymer_brush.py:153  |  dihedralField.set_coeff('DihedralW3' , k =5.4347 , d=1 , n= 3)
polymer_brush.py:154  |  dihedralField.set_coeff('Dihedral1' , k =2.6838 , d=1 , n= 1)
polymer_brush.py:155  |  dihedralField.set_coeff('Dihedral2' , k = 1.4543 , d=-1 , n= 2)
polymer_brush.py:156  |  dihedralField.set_coeff('Dihedral3' , k =5.4347 , d=1 , n= 3)
polymer_brush.py:158  |  integrate.mode_standard(dt= 0.005)
polymer_brush.py:160  |  integrator=integrate.nve(group=typeAll , limit=0.01 )
polymer_brush.py:161  |  zeroer = update.zero_momentum(period = 1)
polymer_brush.py:164  |  run(200)
notice(2): -- Neighborlist exclusion statistics -- :
notice(2): Particles with 1 exclusions             : 327680
notice(2): Particles with 2 exclusions             : 1454080
notice(2): Neighbors included by diameter          : yes
notice(2): Neighbors excluded when in the same body: no
** starting run **
Time 00:00:17 | Step 30 / 200 | TPS 2.95673 | ETA 00:00:57
Time 00:00:27 | Step 102 / 200 | TPS 7.15414 | ETA 00:00:13
Time 00:00:38 | Step 169 / 200 | TPS 6.14309 | ETA 00:00:05
Time 00:00:43 | Step 200 / 200 | TPS 6.0508 | ETA 00:00:00
Average TPS: 5.51871
---------
-- Neighborlist stats:
9 normal updates / 1 forced updates / 0 dangerous updates
n_neigh_min: 5 / n_neigh_max: 142 / n_neigh_avg: 83.9631
shortest rebuild period: 21
-- Cell list stats:
Dimension: 81, 81, 8
n_min    : 0 / n_max: 123 / n_avg: 33.946
** run complete **
polymer_brush.py:165  |  zeroer.disable()
polymer_brush.py:167  |  integrator.disable()
polymer_brush.py:169  |  integrator=integrate.npt(group=typeAll , tau=1.0 , T= 1.0 , tauP = 1.2 , P = 0.00078 , x=False , y = False , z = True , rescale_all=True )
polymer_brush.py:172  |  run(5e3, profile=True, limit_hours=1)
** starting run **
Time 00:00:54 | Step 245 / 5200 | TPS 4.07451 | ETA 00:20:16
Time 00:01:04 | Step 293 / 5200 | TPS 4.74416 | ETA 00:17:14
Time 00:01:14 | Step 332 / 5200 | TPS 3.88386 | ETA 00:20:53
Time 00:01:24 | Step 383 / 5200 | TPS 5.0917 | ETA 00:15:46
Time 00:01:35 | Step 439 / 5200 | TPS 5.51528 | ETA 00:14:23
Time 00:01:45 | Step 487 / 5200 | TPS 4.55558 | ETA 00:17:14
Time 00:01:56 | Step 540 / 5200 | TPS 4.97829 | ETA 00:15:36
Time 00:02:06 | Step 596 / 5200 | TPS 5.36069 | ETA 00:14:18
Time 00:02:17 | Step 651 / 5200 | TPS 5.32539 | ETA 00:14:14
Time 00:02:27 | Step 704 / 5200 | TPS 5.00012 | ETA 00:14:59
Time 00:02:37 | Step 757 / 5200 | TPS 5.21594 | ETA 00:14:11
Time 00:02:47 | Step 814 / 5200 | TPS 5.66814 | ETA 00:12:53
Time 00:02:58 | Step 870 / 5200 | TPS 5.40588 | ETA 00:13:20
Time 00:03:08 | Step 928 / 5200 | TPS 5.74555 | ETA 00:12:23
Time 00:03:18 | Step 996 / 5200 | TPS 6.73306 | ETA 00:10:24
Time 00:03:28 | Step 1073 / 5200 | TPS 7.6675 | ETA 00:08:58
Time 00:03:38 | Step 1164 / 5200 | TPS 9.09737 | ETA 00:07:23
Time 00:03:48 | Step 1264 / 5200 | TPS 9.83932 | ETA 00:06:40
Time 00:03:58 | Step 1371 / 5200 | TPS 10.34 | ETA 00:06:10
Time 00:04:08 | Step 1478 / 5200 | TPS 10.6843 | ETA 00:05:48
Time 00:04:18 | Step 1571 / 5200 | TPS 9.26271 | ETA 00:06:31
Time 00:04:29 | Step 1661 / 5200 | TPS 8.86659 | ETA 00:06:39
Time 00:04:39 | Step 1745 / 5200 | TPS 8.37849 | ETA 00:06:52
Time 00:04:49 | Step 1840 / 5200 | TPS 9.19543 | ETA 00:06:05
Time 00:04:59 | Step 1927 / 5200 | TPS 8.48098 | ETA 00:06:25
Time 00:05:09 | Step 2016 / 5200 | TPS 8.86471 | ETA 00:05:59
Time 00:05:19 | Step 2104 / 5200 | TPS 8.78245 | ETA 00:05:52
Time 00:05:29 | Step 2199 / 5200 | TPS 9.42938 | ETA 00:05:18
Time 00:05:40 | Step 2303 / 5200 | TPS 10.0767 | ETA 00:04:47
Time 00:05:50 | Step 2401 / 5200 | TPS 9.54205 | ETA 00:04:53
Time 00:06:00 | Step 2513 / 5200 | TPS 11.1556 | ETA 00:04:00
Time 00:06:10 | Step 2615 / 5200 | TPS 10.1787 | ETA 00:04:13
Time 00:06:20 | Step 2723 / 5200 | TPS 10.7458 | ETA 00:03:50
Time 00:06:30 | Step 2819 / 5200 | TPS 9.45501 | ETA 00:04:11
Time 00:06:40 | Step 2916 / 5200 | TPS 9.63273 | ETA 00:03:57
Time 00:06:50 | Step 3012 / 5200 | TPS 9.57684 | ETA 00:03:48
Time 00:07:00 | Step 3104 / 5200 | TPS 9.15716 | ETA 00:03:48
Time 00:07:10 | Step 3202 / 5200 | TPS 9.74541 | ETA 00:03:25
Time 00:07:20 | Step 3294 / 5200 | TPS 9.15519 | ETA 00:03:28
Time 00:07:31 | Step 3395 / 5200 | TPS 10.08 | ETA 00:02:59
Time 00:07:41 | Step 3491 / 5200 | TPS 9.5976 | ETA 00:02:58
Time 00:07:51 | Step 3592 / 5200 | TPS 10.0693 | ETA 00:02:39
Time 00:08:01 | Step 3683 / 5200 | TPS 8.78936 | ETA 00:02:52
Time 00:08:11 | Step 3787 / 5200 | TPS 10.389 | ETA 00:02:16
Time 00:08:21 | Step 3891 / 5200 | TPS 10.3598 | ETA 00:02:06
Time 00:08:31 | Step 3982 / 5200 | TPS 9.05186 | ETA 00:02:14
Time 00:08:41 | Step 4086 / 5200 | TPS 10.2993 | ETA 00:01:48
Time 00:08:51 | Step 4181 / 5200 | TPS 9.46654 | ETA 00:01:47
Time 00:09:01 | Step 4279 / 5200 | TPS 9.50538 | ETA 00:01:36
Time 00:09:11 | Step 4375 / 5200 | TPS 9.55803 | ETA 00:01:26
Time 00:09:22 | Step 4472 / 5200 | TPS 9.66011 | ETA 00:01:15
Time 00:09:32 | Step 4565 / 5200 | TPS 9.05016 | ETA 00:01:10
Time 00:09:42 | Step 4663 / 5200 | TPS 9.74719 | ETA 00:00:55
Time 00:09:52 | Step 4770 / 5200 | TPS 10.6728 | ETA 00:00:40
Time 00:10:02 | Step 4867 / 5200 | TPS 9.56104 | ETA 00:00:34
Time 00:10:12 | Step 4980 / 5200 | TPS 11.2703 | ETA 00:00:19
Time 00:10:22 | Step 5083 / 5200 | TPS 10.2712 | ETA 00:00:11
Time 00:10:32 | Step 5190 / 5200 | TPS 10.5175 | ETA 00:00:00
Time 00:10:33 | Step 5200 / 5200 | TPS 11.5605 | ETA 00:00:00
Average TPS: 8.47536
Simulation: 589.9454s | 100.000% 
        Bond harmonic:      4.7357s |  0.803% 
                update bond table:  0.1421s |  0.024% 
                Self:               4.5936s |  0.779% 
        Harmonic Angle:    10.9290s |  1.853% 
        Harmonic Dihedral: 40.7795s |  6.912% 
        Integrate:         27.6878s |  4.693% 
                NPT step 1:  0.1092s |  0.019% 
                        Thermo:  0.0023s |  0.000% 
                NPT step 2:  9.1556s |  1.552% 
                        Thermo:  6.1408s |  1.041% 
                        Self:    3.0148s |  0.511% 
                Net force:  18.3836s |  3.116% 
        Neighbor:          279.0875s | 47.307% 
                Cell:        2.8443s |  0.482% 
                        compute:  0.6561s |  0.111% 
                        init:     2.0842s |  0.353% 
                compute:    213.2810s | 36.153% 
                dist-check:  1.5492s |  0.263% 
                filter:     52.7638s |  8.944% 
                head-list:   0.6464s |  0.110% 
                update-ex:   0.0160s |  0.003% 
                Self:        7.9869s |  1.354% 
        Pair lj:           97.8934s | 16.594% 
        Pair slj:          128.5889s | 21.797% 
        SFCPack:            0.1431s |  0.024% 
---------
-- Neighborlist stats:
674 normal updates / 18 forced updates / 0 dangerous updates
n_neigh_min: 3 / n_neigh_max: 148 / n_neigh_avg: 79.02770
shortest rebuild period: 5
-- Cell list stats:
Dimension: 81, 81, 19
n_min    : 0 / n_max: 123 / n_avg: 14.29307
** run complete **










################################################################
Running: mpirun -n 2 python polymer_brush.py --mode=gpu --user=32
HOOMD-blue 1.3.3-unknown CUDA (7.5) SINGLE MPI SSE SSE2 SSE3 
Compiled: 03/06/2016
Copyright 2009-2016 The Regents of the University of Michigan.

All publications and presentations based on HOOMD-blue, including any reports
or published results obtained, in whole or in part, with HOOMD-blue, will
acknowledge its use according to the terms posted at the time of submission on:
http://codeblue.umich.edu/hoomd-blue/citations.html
-----
You are using HOOMD-blue. Read and cite the following:
* J A Anderson, C D Lorenz, and A Travesset. "General purpose molecular dynamics
  simulations fully implemented on graphics processing units", Journal of
  Computational Physics 227 (2008) 5342--5359
and
* J Glaser, T D Nguyen, J A Anderson, P Liu, F Spiga, J A Millan, D C Morse, and
  S C Glotzer. "Strong scaling of general-purpose molecular dynamics simulations
  on GPUs", Computer Physics Communications 192 (2015) 97--107
and
* http://codeblue.umich.edu/hoomd-blue
You can save these citations to file using cite.save().
-----
notice(2): This system is not compute exclusive, using local rank to select GPUs
notice(2): Unable to identify node local rank information
notice(2): Using global rank to select GPUs
HOOMD-blue is running on the following GPU(s):
Rank 0:  [0]            Tesla K40m  15 SM_3.5 @ 0.745 GHz, 11439 MiB DRAM
Rank 1:  [1]            Tesla K40m  15 SM_3.5 @ 0.745 GHz, 11439 MiB DRAM
polymer_brush.py:012  |  system=init.read_xml(filename='init.xml')
notice(2): Reading init.xml...
notice(2): --- hoomd_xml file read summary
notice(2): 1740 positions at timestep 0
notice(2): 1740 velocities
notice(2): 1740 masses
notice(2): 1740 diameters
notice(2): 5 particle types
notice(2): 1740 particle body values
notice(2): 1580 bonds
notice(2): 1420 angles
notice(2): 3780 dihedrals
notice(2): 1740 charges
HOOMD-blue is using domain decomposition: n_x = 1 n_y = 1 n_z = 2.
1 x 1 x 2 local grid on 1 nodes
notice(2): Group "all" created containing 1740 particles
polymer_brush.py:018  |  system.replicate(nx=rep, ny=rep, nz=1)
polymer_brush.py:019  |  typeW1=group.type('W1')
notice(2): Group "type W1" created containing 61440 particles
polymer_brush.py:020  |  typeW2=group.type('W2')
*Warning*: W2 does not exist in the system, creating an empty group
notice(2): Group "type W2" created containing 0 particles
notice(2): Group "Wall" created containing 61440 particles
polymer_brush.py:022  |  typeB= group.type('B')
notice(2): Group "type B" created containing 1044480 particles
polymer_brush.py:023  |  typeSolvBackBone = group.type('Solvent')
notice(2): Group "type Solvent" created containing 409600 particles
polymer_brush.py:024  |  typeC= group.type('C')
*Warning*: C does not exist in the system, creating an empty group
notice(2): Group "type C" created containing 0 particles
polymer_brush.py:025  |  typeCH3_W1=group.type('CH3_W1')
notice(2): Group "type CH3_W1" created containing 61440 particles
polymer_brush.py:026  |  typeCH3_W2=group.type('CH3_W2')
*Warning*: CH3_W2 does not exist in the system, creating an empty group
notice(2): Group "type CH3_W2" created containing 0 particles
polymer_brush.py:027  |  typeSolvTail=group.type('SolvTail')
notice(2): Group "type SolvTail" created containing 204800 particles
notice(2): Group "BCH3-particles" created containing 1105920 particles
notice(2): Group "CCH3-particles" created containing 0 particles
notice(2): Group "all-solvent" created containing 614400 particles
notice(2): Group "bc-particles" created containing 1105920 particles
notice(2): Group "typeAll" created containing 1720320 particles
notice(2): Group "typeNPT" created containing 1781760 particles
Number of polymeric particles 1720320
polymer_brush.py:044  |  lj = pair.lj(r_cut=3.3)
nlist.py:1051  |          globals.neighbor_list = cell();
polymer_brush.py:052  |  lj.pair_coeff.set('Solvent','W1' ,epsilon=0 , sigma=1.3144)
polymer_brush.py:053  |  lj.pair_coeff.set('Solvent','W2' ,epsilon=0 , sigma=1.3144)
polymer_brush.py:054  |  lj.pair_coeff.set('Solvent','Solvent' ,epsilon=1.0*tether_bulk , sigma=1.3144)
polymer_brush.py:055  |  lj.pair_coeff.set('Solvent','B' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:056  |  lj.pair_coeff.set('Solvent','C' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:057  |  lj.pair_coeff.set('Solvent','CH3_W1' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:058  |  lj.pair_coeff.set('Solvent','CH3_W2' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:059  |  lj.pair_coeff.set('Solvent','SolvTail' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:060  |  lj.pair_coeff.set('B','B' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:061  |  lj.pair_coeff.set('C','C' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:062  |  lj.pair_coeff.set('B','C' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:063  |  lj.pair_coeff.set('B','CH3_W1' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:064  |  lj.pair_coeff.set('B','CH3_W2' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:065  |  lj.pair_coeff.set('C','CH3_W1' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:066  |  lj.pair_coeff.set('C','CH3_W2' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:067  |  lj.pair_coeff.set('CH3_W1','CH3_W1' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:068  |  lj.pair_coeff.set('CH3_W1','CH3_W2' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:069  |  lj.pair_coeff.set('CH3_W2' ,'CH3_W2' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:071  |  lj.pair_coeff.set('B','SolvTail' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:072  |  lj.pair_coeff.set('C','SolvTail' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:073  |  lj.pair_coeff.set('CH3_W1','SolvTail' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:074  |  lj.pair_coeff.set('CH3_W2','SolvTail' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:075  |  lj.pair_coeff.set('SolvTail' ,'SolvTail' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:077  |  lj.pair_coeff.set('B','C' ,epsilon=0.01 , sigma=2.62 , alpha=0.0)
polymer_brush.py:078  |  lj.pair_coeff.set('W1','W2' ,epsilon=0.0 , sigma=1.0)
polymer_brush.py:079  |  lj.pair_coeff.set('W1','W1' ,epsilon=0.0 , sigma=1.0)
polymer_brush.py:080  |  lj.pair_coeff.set('W1','B' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:081  |  lj.pair_coeff.set('W1','C' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:082  |  lj.pair_coeff.set('W2','W2' ,epsilon=0.0 , sigma=1.0)
polymer_brush.py:083  |  lj.pair_coeff.set('W2','B' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:084  |  lj.pair_coeff.set('W2','C' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:085  |  lj.pair_coeff.set('W1','CH3_W1' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:086  |  lj.pair_coeff.set('W1','CH3_W2' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:087  |  lj.pair_coeff.set('W1','SolvTail' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:088  |  lj.pair_coeff.set('W2','CH3_W1' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:089  |  lj.pair_coeff.set('W2','CH3_W2' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:090  |  lj.pair_coeff.set('W2','SolvTail' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:091  |  lj.pair_coeff.set('A','C' ,epsilon=0.0 , sigma=1.0 , alpha=0.0)
polymer_brush.py:093  |  slj = pair.slj(r_cut= 1.3)
notice(2): Notice: slj set d_max=2.0
polymer_brush.py:094  |  slj.set_params(mode="shift")
pair.py:886  |          pair.set_params(self, mode=mode);
polymer_brush.py:095  |  slj.pair_coeff.set('W2','Solvent', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:096  |  slj.pair_coeff.set('W1','Solvent', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:097  |  slj.pair_coeff.set('Solvent','Solvent', epsilon = 0, sigma = 1.0)
polymer_brush.py:098  |  slj.pair_coeff.set('Solvent','B', epsilon = 0, sigma = 1.0)
polymer_brush.py:099  |  slj.pair_coeff.set('Solvent','C', epsilon = 0, sigma = 1.0)
polymer_brush.py:100  |  slj.pair_coeff.set('Solvent','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:101  |  slj.pair_coeff.set('Solvent','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:102  |  slj.pair_coeff.set('Solvent','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:103  |  slj.pair_coeff.set('W1','W2', epsilon = 0 , sigma =1.0)
polymer_brush.py:104  |  slj.pair_coeff.set('W1','W1', epsilon = 0 , sigma =1.0)
polymer_brush.py:105  |  slj.pair_coeff.set('W2','W2', epsilon = 0 , sigma =1.0)
polymer_brush.py:106  |  slj.pair_coeff.set('W1','B', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:107  |  slj.pair_coeff.set('W1','C', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:108  |  slj.pair_coeff.set('W2','B', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:109  |  slj.pair_coeff.set('W2','C', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:110  |  slj.pair_coeff.set('W1','CH3_W1', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:111  |  slj.pair_coeff.set('W1','CH3_W2', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:112  |  slj.pair_coeff.set('W2','CH3_W1', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:113  |  slj.pair_coeff.set('W2','CH3_W2', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:114  |  slj.pair_coeff.set('W1','SolvTail', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:115  |  slj.pair_coeff.set('W2','SolvTail', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:116  |  slj.pair_coeff.set('B','B', epsilon = 0, sigma = 1.0)
polymer_brush.py:117  |  slj.pair_coeff.set('C','C', epsilon = 0, sigma = 1.0)
polymer_brush.py:118  |  slj.pair_coeff.set('B','C', epsilon = 0, sigma = 1.0)
polymer_brush.py:119  |  slj.pair_coeff.set('B','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:120  |  slj.pair_coeff.set('B','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:121  |  slj.pair_coeff.set('B','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:122  |  slj.pair_coeff.set('C','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:123  |  slj.pair_coeff.set('C','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:124  |  slj.pair_coeff.set('C','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:125  |  slj.pair_coeff.set('CH3_W1','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:126  |  slj.pair_coeff.set('CH3_W1','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:127  |  slj.pair_coeff.set('CH3_W2','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:128  |  slj.pair_coeff.set('CH3_W1','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:129  |  slj.pair_coeff.set('CH3_W2','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:130  |  slj.pair_coeff.set('SolvTail','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:133  |  harmonicO_O= bond.harmonic(name = 'O-O-bond')
polymer_brush.py:135  |  harmonicO_O.bond_coeff.set('oleic', k=9892.9362 , r0=0.5)
polymer_brush.py:138  |  harmonicO_O.bond_coeff.set('wall', k=9892.9362, r0=1.25)
polymer_brush.py:141  |  angleWO = angle.harmonic()
polymer_brush.py:142  |  angleWO.set_coeff('W-O' , k = 201.2878 , t0= 2.5307)
polymer_brush.py:143  |  angleWO.set_coeff('O-O' , k = 201.2878 , t0= 1.92)
polymer_brush.py:144  |  angleWO.set_coeff('kink' , k = 1000.2878 , t0= 2.8)
polymer_brush.py:150  |  dihedralField = dihedral.harmonic()
polymer_brush.py:151  |  dihedralField.set_coeff('DihedralW1' , k = 2.6838 , d=1 , n= 1)
polymer_brush.py:152  |  dihedralField.set_coeff('DihedralW2' , k = 1.4543 , d=-1 , n= 2)
polymer_brush.py:153  |  dihedralField.set_coeff('DihedralW3' , k =5.4347 , d=1 , n= 3)
polymer_brush.py:154  |  dihedralField.set_coeff('Dihedral1' , k =2.6838 , d=1 , n= 1)
polymer_brush.py:155  |  dihedralField.set_coeff('Dihedral2' , k = 1.4543 , d=-1 , n= 2)
polymer_brush.py:156  |  dihedralField.set_coeff('Dihedral3' , k =5.4347 , d=1 , n= 3)
polymer_brush.py:158  |  integrate.mode_standard(dt= 0.005)
polymer_brush.py:160  |  integrator=integrate.nve(group=typeAll , limit=0.01 )
polymer_brush.py:161  |  zeroer = update.zero_momentum(period = 1)
polymer_brush.py:164  |  run(200)
notice(2): -- Neighborlist exclusion statistics -- :
notice(2): Particles with 1 exclusions             : 327680
notice(2): Particles with 2 exclusions             : 1454080
notice(2): Neighbors included by diameter          : yes
notice(2): Neighbors excluded when in the same body: no
** starting run **
Time 00:00:22 | Step 22 / 200 | TPS 2.18468 | ETA 00:01:21
Time 00:00:32 | Step 90 / 200 | TPS 6.67895 | ETA 00:00:16
Time 00:00:42 | Step 150 / 200 | TPS 5.87068 | ETA 00:00:08
Time 00:00:50 | Step 200 / 200 | TPS 6.53361 | ETA 00:00:00
Average TPS: 5.24598
---------
-- Neighborlist stats:
9 normal updates / 1 forced updates / 0 dangerous updates
n_neigh_min: 14 / n_neigh_max: 142 / n_neigh_avg: 91.7712
shortest rebuild period: 21
-- Cell list stats:
Dimension: 81, 81, 5
n_min    : 6 / n_max: 137 / n_avg: 51.0049
** run complete **
polymer_brush.py:165  |  zeroer.disable()
polymer_brush.py:167  |  integrator.disable()
polymer_brush.py:169  |  integrator=integrate.npt(group=typeAll , tau=1.0 , T= 1.0 , tauP = 1.2 , P = 0.00078 , x=False , y = False , z = True , rescale_all=True )
polymer_brush.py:172  |  run(5e3, profile=True, limit_hours=1)
** starting run **
Time 00:01:00 | Step 239 / 5200 | TPS 3.89287 | ETA 00:21:14
Time 00:01:10 | Step 285 / 5200 | TPS 4.49905 | ETA 00:18:12
Time 00:01:21 | Step 325 / 5200 | TPS 3.98603 | ETA 00:20:23
Time 00:01:31 | Step 371 / 5200 | TPS 4.59337 | ETA 00:17:31
Time 00:01:41 | Step 420 / 5200 | TPS 4.80573 | ETA 00:16:34
Time 00:01:51 | Step 471 / 5200 | TPS 4.8847 | ETA 00:16:08
Time 00:02:02 | Step 518 / 5200 | TPS 4.39 | ETA 00:17:46
Time 00:02:12 | Step 565 / 5200 | TPS 4.65846 | ETA 00:16:34
Time 00:02:22 | Step 619 / 5200 | TPS 5.3288 | ETA 00:14:19
Time 00:02:32 | Step 668 / 5200 | TPS 4.88366 | ETA 00:15:27
Time 00:02:42 | Step 715 / 5200 | TPS 4.68782 | ETA 00:15:56
Time 00:02:53 | Step 769 / 5200 | TPS 5.17048 | ETA 00:14:16
Time 00:03:03 | Step 822 / 5200 | TPS 5.08325 | ETA 00:14:21
Time 00:03:14 | Step 874 / 5200 | TPS 4.959 | ETA 00:14:32
Time 00:03:24 | Step 928 / 5200 | TPS 5.31477 | ETA 00:13:23
Time 00:03:34 | Step 999 / 5200 | TPS 7.06123 | ETA 00:09:54
Time 00:03:44 | Step 1074 / 5200 | TPS 7.31142 | ETA 00:09:24
Time 00:03:54 | Step 1159 / 5200 | TPS 8.47038 | ETA 00:07:57
Time 00:04:04 | Step 1257 / 5200 | TPS 9.77226 | ETA 00:06:43
Time 00:04:14 | Step 1347 / 5200 | TPS 8.78583 | ETA 00:07:18
Time 00:04:24 | Step 1446 / 5200 | TPS 9.83602 | ETA 00:06:21
Time 00:04:35 | Step 1542 / 5200 | TPS 9.23929 | ETA 00:06:35
Time 00:04:45 | Step 1641 / 5200 | TPS 9.67479 | ETA 00:06:07
Time 00:04:55 | Step 1732 / 5200 | TPS 8.65581 | ETA 00:06:40
Time 00:05:06 | Step 1819 / 5200 | TPS 8.62294 | ETA 00:06:32
Time 00:05:16 | Step 1906 / 5200 | TPS 8.67594 | ETA 00:06:19
Time 00:05:26 | Step 1981 / 5200 | TPS 7.46374 | ETA 00:07:11
Time 00:05:36 | Step 2070 / 5200 | TPS 8.77678 | ETA 00:05:56
Time 00:05:46 | Step 2156 / 5200 | TPS 8.5594 | ETA 00:05:55
Time 00:05:56 | Step 2248 / 5200 | TPS 9.16953 | ETA 00:05:21
Time 00:06:06 | Step 2345 / 5200 | TPS 9.55752 | ETA 00:04:58
Time 00:06:16 | Step 2448 / 5200 | TPS 10.2852 | ETA 00:04:27
Time 00:06:26 | Step 2553 / 5200 | TPS 10.4586 | ETA 00:04:13
Time 00:06:36 | Step 2654 / 5200 | TPS 10.0785 | ETA 00:04:12
Time 00:06:46 | Step 2758 / 5200 | TPS 10.3811 | ETA 00:03:55
Time 00:06:56 | Step 2853 / 5200 | TPS 9.48987 | ETA 00:04:07
Time 00:07:07 | Step 2955 / 5200 | TPS 9.84093 | ETA 00:03:48
Time 00:07:17 | Step 3050 / 5200 | TPS 9.16874 | ETA 00:03:54
Time 00:07:27 | Step 3146 / 5200 | TPS 9.51719 | ETA 00:03:35
Time 00:07:37 | Step 3242 / 5200 | TPS 9.39239 | ETA 00:03:28
Time 00:07:47 | Step 3337 / 5200 | TPS 9.48229 | ETA 00:03:16
Time 00:07:57 | Step 3439 / 5200 | TPS 10.1588 | ETA 00:02:53
Time 00:08:07 | Step 3540 / 5200 | TPS 10.0553 | ETA 00:02:45
Time 00:08:17 | Step 3640 / 5200 | TPS 9.99214 | ETA 00:02:36
Time 00:08:28 | Step 3736 / 5200 | TPS 9.28487 | ETA 00:02:37
Time 00:08:38 | Step 3847 / 5200 | TPS 10.8848 | ETA 00:02:04
Time 00:08:48 | Step 3949 / 5200 | TPS 9.73992 | ETA 00:02:08
Time 00:08:59 | Step 4053 / 5200 | TPS 10.1535 | ETA 00:01:52
Time 00:09:09 | Step 4152 / 5200 | TPS 9.54914 | ETA 00:01:49
Time 00:09:19 | Step 4248 / 5200 | TPS 9.27427 | ETA 00:01:42
Time 00:09:29 | Step 4348 / 5200 | TPS 9.97499 | ETA 00:01:25
Time 00:09:40 | Step 4441 / 5200 | TPS 9.07172 | ETA 00:01:23
Time 00:09:50 | Step 4544 / 5200 | TPS 9.91266 | ETA 00:01:06
Time 00:10:00 | Step 4639 / 5200 | TPS 9.45722 | ETA 00:00:59
Time 00:10:10 | Step 4749 / 5200 | TPS 10.9547 | ETA 00:00:41
Time 00:10:20 | Step 4849 / 5200 | TPS 9.87421 | ETA 00:00:35
Time 00:10:30 | Step 4964 / 5200 | TPS 11.4839 | ETA 00:00:20
Time 00:10:40 | Step 5071 / 5200 | TPS 10.6473 | ETA 00:00:12
Time 00:10:51 | Step 5180 / 5200 | TPS 10.516 | ETA 00:00:01
Time 00:10:52 | Step 5200 / 5200 | TPS 12.118 | ETA 00:00:00
Average TPS: 8.30603
Simulation: 601.9723s | 100.000% 
        Bond harmonic:      8.5323s |  1.417% 
                update bond table:  4.8227s |  0.801% 
                Self:               3.7096s |  0.616% 
        Harmonic Angle:    15.5217s |  2.578% 
        Harmonic Dihedral: 60.3746s | 10.029% 
        Integrate:         22.2946s |  3.704% 
                NPT step 1:  0.2474s |  0.041% 
                        Thermo:  0.0029s |  0.000% 
                NPT step 2:  7.3298s |  1.218% 
                        Thermo:  4.8637s |  0.808% 
                        Self:    2.4661s |  0.410% 
                Net force:  14.5084s |  2.410% 
        Neighbor:          251.6917s | 41.811% 
                Cell:           1.3807s |  0.229% 
                        compute:  0.5902s |  0.098% 
                        init:     0.7451s |  0.124% 
                MPI allreduce:  0.0223s |  0.004% 
                compute:       199.4667s | 33.136% 
                filter:        49.2382s |  8.179% 
                head-list:      0.9092s |  0.151% 
                update-ex:      0.6191s |  0.103% 
        Pair lj:           88.8206s | 14.755% 
        Pair slj:          117.1004s | 19.453% 
        SFCPack:            0.1208s |  0.020% 
        comm_ghost_exch:    5.6924s |  0.946% 
                MPI send/recv:  1.5159s |  0.252% 5.90476 GiB/s 
                Self:           4.1765s |  0.694% 
        comm_ghost_update: 10.7959s |  1.793% 
                MPI send/recv:  5.4230s |  0.901% 7.46052 GiB/s 
                pack:           3.5545s |  0.590% 
                unpack:         1.7365s |  0.288% 
        comm_migrate:      12.0958s |  2.009% 
                MPI send/recv:  0.1839s |  0.031% 290.64384 MiB/s 
                angle:          2.1187s |  0.352% 
                        MPI send/recv:  0.1493s |  0.025% 278.65539 MiB/s 
                        Self:           1.9694s |  0.327% 
                bond:           1.6120s |  0.268% 
                        MPI send/recv:  0.0428s |  0.007% 505.76872 MiB/s 
                        Self:           1.5692s |  0.261% 
                dihedral:       5.8970s |  0.980% 
                        MPI send/recv:  0.1345s |  0.022% 1.35141 GiB/s 
                        Self:           5.7624s |  0.957% 
                pack:           1.6961s |  0.282% 
                unpack:         0.0275s |  0.005% 
        dist-check:         2.4846s |  0.413% 
        Self:               6.4467s |  1.071% 
---------
-- Neighborlist stats:
672 normal updates / 18 forced updates / 0 dangerous updates
n_neigh_min: 3 / n_neigh_max: 150 / n_neigh_avg: 96.29742
shortest rebuild period: 5
-- Cell list stats:
Dimension: 81, 81, 10
n_min    : 0 / n_max: 127 / n_avg: 21.63731
** run complete **










################################################################
Running: mpirun -n 4 python polymer_brush.py --mode=gpu --user=32
HOOMD-blue 1.3.3-unknown CUDA (7.5) SINGLE MPI SSE SSE2 SSE3 
Compiled: 03/06/2016
Copyright 2009-2016 The Regents of the University of Michigan.

All publications and presentations based on HOOMD-blue, including any reports
or published results obtained, in whole or in part, with HOOMD-blue, will
acknowledge its use according to the terms posted at the time of submission on:
http://codeblue.umich.edu/hoomd-blue/citations.html
-----
You are using HOOMD-blue. Read and cite the following:
* J A Anderson, C D Lorenz, and A Travesset. "General purpose molecular dynamics
  simulations fully implemented on graphics processing units", Journal of
  Computational Physics 227 (2008) 5342--5359
and
* J Glaser, T D Nguyen, J A Anderson, P Liu, F Spiga, J A Millan, D C Morse, and
  S C Glotzer. "Strong scaling of general-purpose molecular dynamics simulations
  on GPUs", Computer Physics Communications 192 (2015) 97--107
and
* http://codeblue.umich.edu/hoomd-blue
You can save these citations to file using cite.save().
-----
notice(2): This system is not compute exclusive, using local rank to select GPUs
notice(2): Unable to identify node local rank information
notice(2): Using global rank to select GPUs
HOOMD-blue is running on the following GPU(s):
Rank 0:  [0]            Tesla K40m  15 SM_3.5 @ 0.745 GHz, 11439 MiB DRAM
Rank 1:  [1]            Tesla K40m  15 SM_3.5 @ 0.745 GHz, 11439 MiB DRAM
Rank 2:  [2]            Tesla K40m  15 SM_3.5 @ 0.745 GHz, 11439 MiB DRAM
Rank 3:  [3]            Tesla K40m  15 SM_3.5 @ 0.745 GHz, 11439 MiB DRAM
polymer_brush.py:012  |  system=init.read_xml(filename='init.xml')
notice(2): Reading init.xml...
notice(2): --- hoomd_xml file read summary
notice(2): 1740 positions at timestep 0
notice(2): 1740 velocities
notice(2): 1740 masses
notice(2): 1740 diameters
notice(2): 5 particle types
notice(2): 1740 particle body values
notice(2): 1580 bonds
notice(2): 1420 angles
notice(2): 3780 dihedrals
notice(2): 1740 charges
HOOMD-blue is using domain decomposition: n_x = 1 n_y = 1 n_z = 4.
1 x 1 x 4 local grid on 1 nodes
notice(2): Group "all" created containing 1740 particles
polymer_brush.py:018  |  system.replicate(nx=rep, ny=rep, nz=1)
polymer_brush.py:019  |  typeW1=group.type('W1')
notice(2): Group "type W1" created containing 61440 particles
polymer_brush.py:020  |  typeW2=group.type('W2')
*Warning*: W2 does not exist in the system, creating an empty group
notice(2): Group "type W2" created containing 0 particles
notice(2): Group "Wall" created containing 61440 particles
polymer_brush.py:022  |  typeB= group.type('B')
notice(2): Group "type B" created containing 1044480 particles
polymer_brush.py:023  |  typeSolvBackBone = group.type('Solvent')
notice(2): Group "type Solvent" created containing 409600 particles
polymer_brush.py:024  |  typeC= group.type('C')
*Warning*: C does not exist in the system, creating an empty group
notice(2): Group "type C" created containing 0 particles
polymer_brush.py:025  |  typeCH3_W1=group.type('CH3_W1')
notice(2): Group "type CH3_W1" created containing 61440 particles
polymer_brush.py:026  |  typeCH3_W2=group.type('CH3_W2')
*Warning*: CH3_W2 does not exist in the system, creating an empty group
notice(2): Group "type CH3_W2" created containing 0 particles
polymer_brush.py:027  |  typeSolvTail=group.type('SolvTail')
notice(2): Group "type SolvTail" created containing 204800 particles
notice(2): Group "BCH3-particles" created containing 1105920 particles
notice(2): Group "CCH3-particles" created containing 0 particles
notice(2): Group "all-solvent" created containing 614400 particles
notice(2): Group "bc-particles" created containing 1105920 particles
notice(2): Group "typeAll" created containing 1720320 particles
notice(2): Group "typeNPT" created containing 1781760 particles
Number of polymeric particles 1720320
polymer_brush.py:044  |  lj = pair.lj(r_cut=3.3)
nlist.py:1051  |          globals.neighbor_list = cell();
polymer_brush.py:052  |  lj.pair_coeff.set('Solvent','W1' ,epsilon=0 , sigma=1.3144)
polymer_brush.py:053  |  lj.pair_coeff.set('Solvent','W2' ,epsilon=0 , sigma=1.3144)
polymer_brush.py:054  |  lj.pair_coeff.set('Solvent','Solvent' ,epsilon=1.0*tether_bulk , sigma=1.3144)
polymer_brush.py:055  |  lj.pair_coeff.set('Solvent','B' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:056  |  lj.pair_coeff.set('Solvent','C' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:057  |  lj.pair_coeff.set('Solvent','CH3_W1' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:058  |  lj.pair_coeff.set('Solvent','CH3_W2' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:059  |  lj.pair_coeff.set('Solvent','SolvTail' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:060  |  lj.pair_coeff.set('B','B' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:061  |  lj.pair_coeff.set('C','C' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:062  |  lj.pair_coeff.set('B','C' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:063  |  lj.pair_coeff.set('B','CH3_W1' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:064  |  lj.pair_coeff.set('B','CH3_W2' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:065  |  lj.pair_coeff.set('C','CH3_W1' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:066  |  lj.pair_coeff.set('C','CH3_W2' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:067  |  lj.pair_coeff.set('CH3_W1','CH3_W1' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:068  |  lj.pair_coeff.set('CH3_W1','CH3_W2' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:069  |  lj.pair_coeff.set('CH3_W2' ,'CH3_W2' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:071  |  lj.pair_coeff.set('B','SolvTail' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:072  |  lj.pair_coeff.set('C','SolvTail' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:073  |  lj.pair_coeff.set('CH3_W1','SolvTail' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:074  |  lj.pair_coeff.set('CH3_W2','SolvTail' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:075  |  lj.pair_coeff.set('SolvTail' ,'SolvTail' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:077  |  lj.pair_coeff.set('B','C' ,epsilon=0.01 , sigma=2.62 , alpha=0.0)
polymer_brush.py:078  |  lj.pair_coeff.set('W1','W2' ,epsilon=0.0 , sigma=1.0)
polymer_brush.py:079  |  lj.pair_coeff.set('W1','W1' ,epsilon=0.0 , sigma=1.0)
polymer_brush.py:080  |  lj.pair_coeff.set('W1','B' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:081  |  lj.pair_coeff.set('W1','C' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:082  |  lj.pair_coeff.set('W2','W2' ,epsilon=0.0 , sigma=1.0)
polymer_brush.py:083  |  lj.pair_coeff.set('W2','B' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:084  |  lj.pair_coeff.set('W2','C' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:085  |  lj.pair_coeff.set('W1','CH3_W1' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:086  |  lj.pair_coeff.set('W1','CH3_W2' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:087  |  lj.pair_coeff.set('W1','SolvTail' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:088  |  lj.pair_coeff.set('W2','CH3_W1' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:089  |  lj.pair_coeff.set('W2','CH3_W2' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:090  |  lj.pair_coeff.set('W2','SolvTail' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:091  |  lj.pair_coeff.set('A','C' ,epsilon=0.0 , sigma=1.0 , alpha=0.0)
polymer_brush.py:093  |  slj = pair.slj(r_cut= 1.3)
notice(2): Notice: slj set d_max=2.0
polymer_brush.py:094  |  slj.set_params(mode="shift")
pair.py:886  |          pair.set_params(self, mode=mode);
polymer_brush.py:095  |  slj.pair_coeff.set('W2','Solvent', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:096  |  slj.pair_coeff.set('W1','Solvent', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:097  |  slj.pair_coeff.set('Solvent','Solvent', epsilon = 0, sigma = 1.0)
polymer_brush.py:098  |  slj.pair_coeff.set('Solvent','B', epsilon = 0, sigma = 1.0)
polymer_brush.py:099  |  slj.pair_coeff.set('Solvent','C', epsilon = 0, sigma = 1.0)
polymer_brush.py:100  |  slj.pair_coeff.set('Solvent','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:101  |  slj.pair_coeff.set('Solvent','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:102  |  slj.pair_coeff.set('Solvent','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:103  |  slj.pair_coeff.set('W1','W2', epsilon = 0 , sigma =1.0)
polymer_brush.py:104  |  slj.pair_coeff.set('W1','W1', epsilon = 0 , sigma =1.0)
polymer_brush.py:105  |  slj.pair_coeff.set('W2','W2', epsilon = 0 , sigma =1.0)
polymer_brush.py:106  |  slj.pair_coeff.set('W1','B', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:107  |  slj.pair_coeff.set('W1','C', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:108  |  slj.pair_coeff.set('W2','B', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:109  |  slj.pair_coeff.set('W2','C', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:110  |  slj.pair_coeff.set('W1','CH3_W1', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:111  |  slj.pair_coeff.set('W1','CH3_W2', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:112  |  slj.pair_coeff.set('W2','CH3_W1', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:113  |  slj.pair_coeff.set('W2','CH3_W2', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:114  |  slj.pair_coeff.set('W1','SolvTail', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:115  |  slj.pair_coeff.set('W2','SolvTail', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:116  |  slj.pair_coeff.set('B','B', epsilon = 0, sigma = 1.0)
polymer_brush.py:117  |  slj.pair_coeff.set('C','C', epsilon = 0, sigma = 1.0)
polymer_brush.py:118  |  slj.pair_coeff.set('B','C', epsilon = 0, sigma = 1.0)
polymer_brush.py:119  |  slj.pair_coeff.set('B','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:120  |  slj.pair_coeff.set('B','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:121  |  slj.pair_coeff.set('B','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:122  |  slj.pair_coeff.set('C','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:123  |  slj.pair_coeff.set('C','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:124  |  slj.pair_coeff.set('C','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:125  |  slj.pair_coeff.set('CH3_W1','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:126  |  slj.pair_coeff.set('CH3_W1','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:127  |  slj.pair_coeff.set('CH3_W2','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:128  |  slj.pair_coeff.set('CH3_W1','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:129  |  slj.pair_coeff.set('CH3_W2','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:130  |  slj.pair_coeff.set('SolvTail','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:133  |  harmonicO_O= bond.harmonic(name = 'O-O-bond')
polymer_brush.py:135  |  harmonicO_O.bond_coeff.set('oleic', k=9892.9362 , r0=0.5)
polymer_brush.py:138  |  harmonicO_O.bond_coeff.set('wall', k=9892.9362, r0=1.25)
polymer_brush.py:141  |  angleWO = angle.harmonic()
polymer_brush.py:142  |  angleWO.set_coeff('W-O' , k = 201.2878 , t0= 2.5307)
polymer_brush.py:143  |  angleWO.set_coeff('O-O' , k = 201.2878 , t0= 1.92)
polymer_brush.py:144  |  angleWO.set_coeff('kink' , k = 1000.2878 , t0= 2.8)
polymer_brush.py:150  |  dihedralField = dihedral.harmonic()
polymer_brush.py:151  |  dihedralField.set_coeff('DihedralW1' , k = 2.6838 , d=1 , n= 1)
polymer_brush.py:152  |  dihedralField.set_coeff('DihedralW2' , k = 1.4543 , d=-1 , n= 2)
polymer_brush.py:153  |  dihedralField.set_coeff('DihedralW3' , k =5.4347 , d=1 , n= 3)
polymer_brush.py:154  |  dihedralField.set_coeff('Dihedral1' , k =2.6838 , d=1 , n= 1)
polymer_brush.py:155  |  dihedralField.set_coeff('Dihedral2' , k = 1.4543 , d=-1 , n= 2)
polymer_brush.py:156  |  dihedralField.set_coeff('Dihedral3' , k =5.4347 , d=1 , n= 3)
polymer_brush.py:158  |  integrate.mode_standard(dt= 0.005)
polymer_brush.py:160  |  integrator=integrate.nve(group=typeAll , limit=0.01 )
polymer_brush.py:161  |  zeroer = update.zero_momentum(period = 1)
polymer_brush.py:164  |  run(200)
notice(2): -- Neighborlist exclusion statistics -- :
notice(2): Particles with 1 exclusions             : 327680
notice(2): Particles with 2 exclusions             : 1454080
notice(2): Neighbors included by diameter          : yes
notice(2): Neighbors excluded when in the same body: no
** starting run **
Time 00:00:23 | Step 31 / 200 | TPS 3.05604 | ETA 00:00:55
Time 00:00:33 | Step 106 / 200 | TPS 7.16346 | ETA 00:00:13
Time 00:00:43 | Step 172 / 200 | TPS 6.56376 | ETA 00:00:04
Time 00:00:47 | Step 200 / 200 | TPS 8.10712 | ETA 00:00:00
Average TPS: 5.86121
---------
-- Neighborlist stats:
9 normal updates / 1 forced updates / 0 dangerous updates
n_neigh_min: 58 / n_neigh_max: 142 / n_neigh_avg: 110.01
shortest rebuild period: 21
-- Cell list stats:
Dimension: 81, 81, 3
n_min    : 6 / n_max: 163 / n_avg: 66.9557
** run complete **
polymer_brush.py:165  |  zeroer.disable()
polymer_brush.py:167  |  integrator.disable()
polymer_brush.py:169  |  integrator=integrate.npt(group=typeAll , tau=1.0 , T= 1.0 , tauP = 1.2 , P = 0.00078 , x=False , y = False , z = True , rescale_all=True )
polymer_brush.py:172  |  run(5e3, profile=True, limit_hours=1)
** starting run **
Time 00:00:57 | Step 247 / 5200 | TPS 4.69949 | ETA 00:17:33
Time 00:01:07 | Step 301 / 5200 | TPS 5.0979 | ETA 00:16:00
Time 00:01:17 | Step 349 / 5200 | TPS 4.76691 | ETA 00:16:57
Time 00:01:28 | Step 405 / 5200 | TPS 5.58227 | ETA 00:14:18
Time 00:01:38 | Step 454 / 5200 | TPS 4.88952 | ETA 00:16:10
Time 00:01:48 | Step 507 / 5200 | TPS 5.26432 | ETA 00:14:51
Time 00:01:58 | Step 558 / 5200 | TPS 4.87983 | ETA 00:15:51
Time 00:02:09 | Step 613 / 5200 | TPS 5.23924 | ETA 00:14:35
Time 00:02:19 | Step 667 / 5200 | TPS 5.25367 | ETA 00:14:22
Time 00:02:29 | Step 721 / 5200 | TPS 5.14974 | ETA 00:14:29
Time 00:02:39 | Step 776 / 5200 | TPS 5.41737 | ETA 00:13:36
Time 00:02:49 | Step 834 / 5200 | TPS 5.79379 | ETA 00:12:33
Time 00:03:00 | Step 893 / 5200 | TPS 5.58579 | ETA 00:12:51
Time 00:03:10 | Step 950 / 5200 | TPS 5.67641 | ETA 00:12:28
Time 00:03:21 | Step 1029 / 5200 | TPS 7.54885 | ETA 00:09:12
Time 00:03:31 | Step 1105 / 5200 | TPS 7.537 | ETA 00:09:03
Time 00:03:41 | Step 1196 / 5200 | TPS 8.95194 | ETA 00:07:27
Time 00:03:51 | Step 1294 / 5200 | TPS 9.74812 | ETA 00:06:40
Time 00:04:01 | Step 1390 / 5200 | TPS 9.58025 | ETA 00:06:37
Time 00:04:11 | Step 1487 / 5200 | TPS 9.28028 | ETA 00:06:40
Time 00:04:21 | Step 1580 / 5200 | TPS 9.27091 | ETA 00:06:30
Time 00:04:31 | Step 1680 / 5200 | TPS 9.95623 | ETA 00:05:53
Time 00:04:42 | Step 1765 / 5200 | TPS 8.27617 | ETA 00:06:55
Time 00:04:52 | Step 1859 / 5200 | TPS 9.18032 | ETA 00:06:03
Time 00:05:02 | Step 1943 / 5200 | TPS 8.36312 | ETA 00:06:29
Time 00:05:12 | Step 2031 / 5200 | TPS 8.58874 | ETA 00:06:08
Time 00:05:23 | Step 2122 / 5200 | TPS 8.62922 | ETA 00:05:56
Time 00:05:33 | Step 2220 / 5200 | TPS 9.78649 | ETA 00:05:04
Time 00:05:43 | Step 2318 / 5200 | TPS 9.77872 | ETA 00:04:54
Time 00:05:53 | Step 2417 / 5200 | TPS 9.6567 | ETA 00:04:48
Time 00:06:03 | Step 2526 / 5200 | TPS 10.8982 | ETA 00:04:05
Time 00:06:13 | Step 2635 / 5200 | TPS 10.8647 | ETA 00:03:56
Time 00:06:23 | Step 2741 / 5200 | TPS 10.5944 | ETA 00:03:52
Time 00:06:33 | Step 2837 / 5200 | TPS 9.38306 | ETA 00:04:11
Time 00:06:43 | Step 2942 / 5200 | TPS 10.3408 | ETA 00:03:38
Time 00:06:54 | Step 3035 / 5200 | TPS 9.20313 | ETA 00:03:55
Time 00:07:04 | Step 3136 / 5200 | TPS 9.73464 | ETA 00:03:32
Time 00:07:14 | Step 3231 / 5200 | TPS 9.26206 | ETA 00:03:32
Time 00:07:24 | Step 3329 / 5200 | TPS 9.76763 | ETA 00:03:11
Time 00:07:34 | Step 3429 / 5200 | TPS 9.98893 | ETA 00:02:57
Time 00:07:45 | Step 3531 / 5200 | TPS 9.84568 | ETA 00:02:49
Time 00:07:55 | Step 3632 / 5200 | TPS 9.79736 | ETA 00:02:40
Time 00:08:05 | Step 3732 / 5200 | TPS 9.79413 | ETA 00:02:29
Time 00:08:15 | Step 3842 / 5200 | TPS 10.7026 | ETA 00:02:06
Time 00:08:26 | Step 3943 / 5200 | TPS 9.8422 | ETA 00:02:07
Time 00:08:36 | Step 4048 / 5200 | TPS 10.4808 | ETA 00:01:49
Time 00:08:46 | Step 4148 / 5200 | TPS 9.80014 | ETA 00:01:47
Time 00:08:56 | Step 4246 / 5200 | TPS 9.49802 | ETA 00:01:40
Time 00:09:06 | Step 4344 / 5200 | TPS 9.61189 | ETA 00:01:29
Time 00:09:17 | Step 4440 / 5200 | TPS 9.37242 | ETA 00:01:21
Time 00:09:27 | Step 4538 / 5200 | TPS 9.76551 | ETA 00:01:07
Time 00:09:37 | Step 4635 / 5200 | TPS 9.65091 | ETA 00:00:58
Time 00:09:47 | Step 4742 / 5200 | TPS 10.4622 | ETA 00:00:43
Time 00:09:57 | Step 4842 / 5200 | TPS 9.72913 | ETA 00:00:36
Time 00:10:07 | Step 4955 / 5200 | TPS 11.2964 | ETA 00:00:21
Time 00:10:17 | Step 5062 / 5200 | TPS 10.4118 | ETA 00:00:13
Time 00:10:27 | Step 5169 / 5200 | TPS 10.6972 | ETA 00:00:02
Time 00:10:30 | Step 5200 / 5200 | TPS 10.5771 | ETA 00:00:00
Average TPS: 8.56719
Simulation: 583.6219s | 100.000% 
        Bond harmonic:      8.8355s |  1.514% 
                update bond table:  5.6683s |  0.971% 
                Self:               3.1672s |  0.543% 
        Harmonic Angle:    14.7695s |  2.531% 
        Harmonic Dihedral: 55.7543s |  9.553% 
        Integrate:         19.2902s |  3.305% 
                NPT step 1:  0.2437s |  0.042% 
                        Thermo:  0.0037s |  0.001% 
                NPT step 2:  6.2240s |  1.066% 
                        Thermo:  4.1431s |  0.710% 
                        Self:    2.0810s |  0.357% 
                Net force:  12.3940s |  2.124% 
        Neighbor:          238.5505s | 40.874% 
                Cell:           0.7298s |  0.125% 
                        compute:  0.4442s |  0.076% 
                        init:     0.2655s |  0.045% 
                MPI allreduce:  0.0252s |  0.004% 
                compute:       189.2355s | 32.424% 
                filter:        47.1267s |  8.075% 
                head-list:      0.7153s |  0.123% 
                update-ex:      0.6608s |  0.113% 
        Pair lj:           81.2704s | 13.925% 
        Pair slj:          133.1173s | 22.809% 
        SFCPack:            0.1077s |  0.018% 
        comm_ghost_exch:    5.1823s |  0.888% 
                MPI send/recv:  1.5382s |  0.264% 5.79371 GiB/s 
                Self:           3.6441s |  0.624% 
        comm_ghost_update:  9.1446s |  1.567% 
                MPI send/recv:  5.0451s |  0.864% 7.19645 GiB/s 
                pack:           3.4042s |  0.583% 
                unpack:         0.6075s |  0.104% 
        comm_migrate:      10.0168s |  1.716% 
                MPI send/recv:  0.2130s |  0.037% 41.58271 MiB/s 
                angle:          1.9117s |  0.328% 
                        MPI send/recv:  0.2424s |  0.042% 27.45374 MiB/s 
                        Self:           1.6693s |  0.286% 
                bond:           1.4232s |  0.244% 
                        MPI send/recv:  0.0860s |  0.015% 40.69556 MiB/s 
                        Self:           1.3372s |  0.229% 
                dihedral:       4.6752s |  0.801% 
                        MPI send/recv:  0.2211s |  0.038% 131.03021 MiB/s 
                        Self:           4.4541s |  0.763% 
                pack:           1.4663s |  0.251% 
                unpack:         0.0234s |  0.004% 
        dist-check:         2.1256s |  0.364% 
        Self:               5.4572s |  0.935% 
---------
-- Neighborlist stats:
675 normal updates / 18 forced updates / 0 dangerous updates
n_neigh_min: 0 / n_neigh_max: 149 / n_neigh_avg: 105.48008
shortest rebuild period: 5
-- Cell list stats:
Dimension: 81, 81, 5
n_min    : 0 / n_max: 139 / n_avg: 36.77003
** run complete **










################################################################
Running: mpirun -n 8 python polymer_brush.py --mode=gpu --user=32
HOOMD-blue 1.3.3-unknown CUDA (7.5) SINGLE MPI SSE SSE2 SSE3 
Compiled: 03/06/2016
Copyright 2009-2016 The Regents of the University of Michigan.

All publications and presentations based on HOOMD-blue, including any reports
or published results obtained, in whole or in part, with HOOMD-blue, will
acknowledge its use according to the terms posted at the time of submission on:
http://codeblue.umich.edu/hoomd-blue/citations.html
-----
You are using HOOMD-blue. Read and cite the following:
* J A Anderson, C D Lorenz, and A Travesset. "General purpose molecular dynamics
  simulations fully implemented on graphics processing units", Journal of
  Computational Physics 227 (2008) 5342--5359
and
* J Glaser, T D Nguyen, J A Anderson, P Liu, F Spiga, J A Millan, D C Morse, and
  S C Glotzer. "Strong scaling of general-purpose molecular dynamics simulations
  on GPUs", Computer Physics Communications 192 (2015) 97--107
and
* http://codeblue.umich.edu/hoomd-blue
You can save these citations to file using cite.save().
-----
notice(2): This system is not compute exclusive, using local rank to select GPUs
notice(2): Unable to identify node local rank information
notice(2): Using global rank to select GPUs
HOOMD-blue is running on the following GPU(s):
Rank 0:  [0]            Tesla K40m  15 SM_3.5 @ 0.745 GHz, 11439 MiB DRAM
Rank 1:  [1]            Tesla K40m  15 SM_3.5 @ 0.745 GHz, 11439 MiB DRAM
Rank 2:  [2]            Tesla K40m  15 SM_3.5 @ 0.745 GHz, 11439 MiB DRAM
Rank 3:  [3]            Tesla K40m  15 SM_3.5 @ 0.745 GHz, 11439 MiB DRAM
Rank 4:  [4]            Tesla K40m  15 SM_3.5 @ 0.745 GHz, 11439 MiB DRAM
Rank 5:  [5]            Tesla K40m  15 SM_3.5 @ 0.745 GHz, 11439 MiB DRAM
Rank 6:  [0]            Tesla K40m  15 SM_3.5 @ 0.745 GHz, 11439 MiB DRAM
Rank 7:  [1]            Tesla K40m  15 SM_3.5 @ 0.745 GHz, 11439 MiB DRAM
polymer_brush.py:012  |  system=init.read_xml(filename='init.xml')
notice(2): Reading init.xml...
notice(2): --- hoomd_xml file read summary
notice(2): 1740 positions at timestep 0
notice(2): 1740 velocities
notice(2): 1740 masses
notice(2): 1740 diameters
notice(2): 5 particle types
notice(2): 1740 particle body values
notice(2): 1580 bonds
notice(2): 1420 angles
notice(2): 3780 dihedrals
notice(2): 1740 charges
HOOMD-blue is using domain decomposition: n_x = 1 n_y = 2 n_z = 4.
1 x 2 x 4 local grid on 1 nodes
notice(2): Group "all" created containing 1740 particles
polymer_brush.py:018  |  system.replicate(nx=rep, ny=rep, nz=1)
polymer_brush.py:019  |  typeW1=group.type('W1')
notice(2): Group "type W1" created containing 61440 particles
polymer_brush.py:020  |  typeW2=group.type('W2')
*Warning*: W2 does not exist in the system, creating an empty group
notice(2): Group "type W2" created containing 0 particles
notice(2): Group "Wall" created containing 61440 particles
polymer_brush.py:022  |  typeB= group.type('B')
notice(2): Group "type B" created containing 1044480 particles
polymer_brush.py:023  |  typeSolvBackBone = group.type('Solvent')
notice(2): Group "type Solvent" created containing 409600 particles
polymer_brush.py:024  |  typeC= group.type('C')
*Warning*: C does not exist in the system, creating an empty group
notice(2): Group "type C" created containing 0 particles
polymer_brush.py:025  |  typeCH3_W1=group.type('CH3_W1')
notice(2): Group "type CH3_W1" created containing 61440 particles
polymer_brush.py:026  |  typeCH3_W2=group.type('CH3_W2')
*Warning*: CH3_W2 does not exist in the system, creating an empty group
notice(2): Group "type CH3_W2" created containing 0 particles
polymer_brush.py:027  |  typeSolvTail=group.type('SolvTail')
notice(2): Group "type SolvTail" created containing 204800 particles
notice(2): Group "BCH3-particles" created containing 1105920 particles
notice(2): Group "CCH3-particles" created containing 0 particles
notice(2): Group "all-solvent" created containing 614400 particles
notice(2): Group "bc-particles" created containing 1105920 particles
notice(2): Group "typeAll" created containing 1720320 particles
notice(2): Group "typeNPT" created containing 1781760 particles
Number of polymeric particles 1720320
polymer_brush.py:044  |  lj = pair.lj(r_cut=3.3)
nlist.py:1051  |          globals.neighbor_list = cell();
polymer_brush.py:052  |  lj.pair_coeff.set('Solvent','W1' ,epsilon=0 , sigma=1.3144)
polymer_brush.py:053  |  lj.pair_coeff.set('Solvent','W2' ,epsilon=0 , sigma=1.3144)
polymer_brush.py:054  |  lj.pair_coeff.set('Solvent','Solvent' ,epsilon=1.0*tether_bulk , sigma=1.3144)
polymer_brush.py:055  |  lj.pair_coeff.set('Solvent','B' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:056  |  lj.pair_coeff.set('Solvent','C' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:057  |  lj.pair_coeff.set('Solvent','CH3_W1' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:058  |  lj.pair_coeff.set('Solvent','CH3_W2' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:059  |  lj.pair_coeff.set('Solvent','SolvTail' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:060  |  lj.pair_coeff.set('B','B' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:061  |  lj.pair_coeff.set('C','C' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:062  |  lj.pair_coeff.set('B','C' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:063  |  lj.pair_coeff.set('B','CH3_W1' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:064  |  lj.pair_coeff.set('B','CH3_W2' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:065  |  lj.pair_coeff.set('C','CH3_W1' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:066  |  lj.pair_coeff.set('C','CH3_W2' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:067  |  lj.pair_coeff.set('CH3_W1','CH3_W1' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:068  |  lj.pair_coeff.set('CH3_W1','CH3_W2' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:069  |  lj.pair_coeff.set('CH3_W2' ,'CH3_W2' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:071  |  lj.pair_coeff.set('B','SolvTail' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:072  |  lj.pair_coeff.set('C','SolvTail' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:073  |  lj.pair_coeff.set('CH3_W1','SolvTail' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:074  |  lj.pair_coeff.set('CH3_W2','SolvTail' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:075  |  lj.pair_coeff.set('SolvTail' ,'SolvTail' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:077  |  lj.pair_coeff.set('B','C' ,epsilon=0.01 , sigma=2.62 , alpha=0.0)
polymer_brush.py:078  |  lj.pair_coeff.set('W1','W2' ,epsilon=0.0 , sigma=1.0)
polymer_brush.py:079  |  lj.pair_coeff.set('W1','W1' ,epsilon=0.0 , sigma=1.0)
polymer_brush.py:080  |  lj.pair_coeff.set('W1','B' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:081  |  lj.pair_coeff.set('W1','C' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:082  |  lj.pair_coeff.set('W2','W2' ,epsilon=0.0 , sigma=1.0)
polymer_brush.py:083  |  lj.pair_coeff.set('W2','B' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:084  |  lj.pair_coeff.set('W2','C' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:085  |  lj.pair_coeff.set('W1','CH3_W1' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:086  |  lj.pair_coeff.set('W1','CH3_W2' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:087  |  lj.pair_coeff.set('W1','SolvTail' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:088  |  lj.pair_coeff.set('W2','CH3_W1' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:089  |  lj.pair_coeff.set('W2','CH3_W2' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:090  |  lj.pair_coeff.set('W2','SolvTail' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:091  |  lj.pair_coeff.set('A','C' ,epsilon=0.0 , sigma=1.0 , alpha=0.0)
polymer_brush.py:093  |  slj = pair.slj(r_cut= 1.3)
notice(2): Notice: slj set d_max=2.0
polymer_brush.py:094  |  slj.set_params(mode="shift")
pair.py:886  |          pair.set_params(self, mode=mode);
polymer_brush.py:095  |  slj.pair_coeff.set('W2','Solvent', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:096  |  slj.pair_coeff.set('W1','Solvent', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:097  |  slj.pair_coeff.set('Solvent','Solvent', epsilon = 0, sigma = 1.0)
polymer_brush.py:098  |  slj.pair_coeff.set('Solvent','B', epsilon = 0, sigma = 1.0)
polymer_brush.py:099  |  slj.pair_coeff.set('Solvent','C', epsilon = 0, sigma = 1.0)
polymer_brush.py:100  |  slj.pair_coeff.set('Solvent','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:101  |  slj.pair_coeff.set('Solvent','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:102  |  slj.pair_coeff.set('Solvent','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:103  |  slj.pair_coeff.set('W1','W2', epsilon = 0 , sigma =1.0)
polymer_brush.py:104  |  slj.pair_coeff.set('W1','W1', epsilon = 0 , sigma =1.0)
polymer_brush.py:105  |  slj.pair_coeff.set('W2','W2', epsilon = 0 , sigma =1.0)
polymer_brush.py:106  |  slj.pair_coeff.set('W1','B', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:107  |  slj.pair_coeff.set('W1','C', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:108  |  slj.pair_coeff.set('W2','B', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:109  |  slj.pair_coeff.set('W2','C', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:110  |  slj.pair_coeff.set('W1','CH3_W1', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:111  |  slj.pair_coeff.set('W1','CH3_W2', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:112  |  slj.pair_coeff.set('W2','CH3_W1', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:113  |  slj.pair_coeff.set('W2','CH3_W2', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:114  |  slj.pair_coeff.set('W1','SolvTail', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:115  |  slj.pair_coeff.set('W2','SolvTail', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:116  |  slj.pair_coeff.set('B','B', epsilon = 0, sigma = 1.0)
polymer_brush.py:117  |  slj.pair_coeff.set('C','C', epsilon = 0, sigma = 1.0)
polymer_brush.py:118  |  slj.pair_coeff.set('B','C', epsilon = 0, sigma = 1.0)
polymer_brush.py:119  |  slj.pair_coeff.set('B','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:120  |  slj.pair_coeff.set('B','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:121  |  slj.pair_coeff.set('B','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:122  |  slj.pair_coeff.set('C','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:123  |  slj.pair_coeff.set('C','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:124  |  slj.pair_coeff.set('C','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:125  |  slj.pair_coeff.set('CH3_W1','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:126  |  slj.pair_coeff.set('CH3_W1','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:127  |  slj.pair_coeff.set('CH3_W2','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:128  |  slj.pair_coeff.set('CH3_W1','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:129  |  slj.pair_coeff.set('CH3_W2','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:130  |  slj.pair_coeff.set('SolvTail','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:133  |  harmonicO_O= bond.harmonic(name = 'O-O-bond')
polymer_brush.py:135  |  harmonicO_O.bond_coeff.set('oleic', k=9892.9362 , r0=0.5)
polymer_brush.py:138  |  harmonicO_O.bond_coeff.set('wall', k=9892.9362, r0=1.25)
polymer_brush.py:141  |  angleWO = angle.harmonic()
polymer_brush.py:142  |  angleWO.set_coeff('W-O' , k = 201.2878 , t0= 2.5307)
polymer_brush.py:143  |  angleWO.set_coeff('O-O' , k = 201.2878 , t0= 1.92)
polymer_brush.py:144  |  angleWO.set_coeff('kink' , k = 1000.2878 , t0= 2.8)
polymer_brush.py:150  |  dihedralField = dihedral.harmonic()
polymer_brush.py:151  |  dihedralField.set_coeff('DihedralW1' , k = 2.6838 , d=1 , n= 1)
polymer_brush.py:152  |  dihedralField.set_coeff('DihedralW2' , k = 1.4543 , d=-1 , n= 2)
polymer_brush.py:153  |  dihedralField.set_coeff('DihedralW3' , k =5.4347 , d=1 , n= 3)
polymer_brush.py:154  |  dihedralField.set_coeff('Dihedral1' , k =2.6838 , d=1 , n= 1)
polymer_brush.py:155  |  dihedralField.set_coeff('Dihedral2' , k = 1.4543 , d=-1 , n= 2)
polymer_brush.py:156  |  dihedralField.set_coeff('Dihedral3' , k =5.4347 , d=1 , n= 3)
polymer_brush.py:158  |  integrate.mode_standard(dt= 0.005)
polymer_brush.py:160  |  integrator=integrate.nve(group=typeAll , limit=0.01 )
polymer_brush.py:161  |  zeroer = update.zero_momentum(period = 1)
polymer_brush.py:164  |  run(200)
notice(2): -- Neighborlist exclusion statistics -- :
notice(2): Particles with 1 exclusions             : 327680
notice(2): Particles with 2 exclusions             : 1454080
notice(2): Neighbors included by diameter          : yes
notice(2): Neighbors excluded when in the same body: no
** starting run **
Time 00:00:25 | Step 85 / 200 | TPS 8.18147 | ETA 00:00:14
Time 00:00:34 | Step 200 / 200 | TPS 13.5233 | ETA 00:00:00
Average TPS: 10.5858
---------
-- Neighborlist stats:
9 normal updates / 1 forced updates / 0 dangerous updates
n_neigh_min: 0 / n_neigh_max: 142 / n_neigh_avg: 109.973
shortest rebuild period: 21
-- Cell list stats:
Dimension: 81, 41, 3
n_min    : 8 / n_max: 174 / n_avg: 69.341
** run complete **
polymer_brush.py:165  |  zeroer.disable()
polymer_brush.py:167  |  integrator.disable()
polymer_brush.py:169  |  integrator=integrate.npt(group=typeAll , tau=1.0 , T= 1.0 , tauP = 1.2 , P = 0.00078 , x=False , y = False , z = True , rescale_all=True )
polymer_brush.py:172  |  run(5e3, profile=True, limit_hours=1)
** starting run **
Time 00:00:44 | Step 295 / 5200 | TPS 9.43539 | ETA 00:08:39
Time 00:00:54 | Step 386 / 5200 | TPS 8.97901 | ETA 00:08:56
Time 00:01:04 | Step 486 / 5200 | TPS 9.9764 | ETA 00:07:52
Time 00:01:14 | Step 583 / 5200 | TPS 9.69698 | ETA 00:07:56
Time 00:01:24 | Step 688 / 5200 | TPS 10.4682 | ETA 00:07:11
Time 00:01:34 | Step 793 / 5200 | TPS 10.3012 | ETA 00:07:07
Time 00:01:44 | Step 899 / 5200 | TPS 10.5865 | ETA 00:06:46
Time 00:01:54 | Step 1024 / 5200 | TPS 12.4279 | ETA 00:05:36
Time 00:02:04 | Step 1179 / 5200 | TPS 15.4552 | ETA 00:04:20
Time 00:02:14 | Step 1350 / 5200 | TPS 17.0988 | ETA 00:03:45
Time 00:02:24 | Step 1521 / 5200 | TPS 17.0965 | ETA 00:03:35
Time 00:02:34 | Step 1685 / 5200 | TPS 16.3569 | ETA 00:03:34
Time 00:02:45 | Step 1850 / 5200 | TPS 16.4638 | ETA 00:03:23
Time 00:02:55 | Step 1999 / 5200 | TPS 14.7662 | ETA 00:03:36
Time 00:03:05 | Step 2156 / 5200 | TPS 15.6173 | ETA 00:03:14
Time 00:03:15 | Step 2333 / 5200 | TPS 17.4235 | ETA 00:02:44
Time 00:03:25 | Step 2517 / 5200 | TPS 18.2892 | ETA 00:02:26
Time 00:03:35 | Step 2702 / 5200 | TPS 18.4848 | ETA 00:02:15
Time 00:03:45 | Step 2882 / 5200 | TPS 17.986 | ETA 00:02:08
Time 00:03:55 | Step 3050 / 5200 | TPS 16.7443 | ETA 00:02:08
Time 00:04:05 | Step 3221 / 5200 | TPS 16.9234 | ETA 00:01:56
Time 00:04:15 | Step 3397 / 5200 | TPS 17.5692 | ETA 00:01:42
Time 00:04:25 | Step 3577 / 5200 | TPS 17.9881 | ETA 00:01:30
Time 00:04:35 | Step 3751 / 5200 | TPS 17.3872 | ETA 00:01:23
Time 00:04:45 | Step 3943 / 5200 | TPS 18.7341 | ETA 00:01:07
Time 00:04:55 | Step 4125 / 5200 | TPS 18.1551 | ETA 00:00:59
Time 00:05:05 | Step 4298 / 5200 | TPS 17.2657 | ETA 00:00:52
Time 00:05:15 | Step 4466 / 5200 | TPS 16.7524 | ETA 00:00:43
Time 00:05:25 | Step 4642 / 5200 | TPS 17.5727 | ETA 00:00:31
Time 00:05:35 | Step 4831 / 5200 | TPS 18.8762 | ETA 00:00:19
Time 00:05:45 | Step 5025 / 5200 | TPS 19.3512 | ETA 00:00:09
Time 00:05:55 | Step 5200 / 5200 | TPS 18.6808 | ETA 00:00:00
Average TPS: 15.5814
Simulation: 320.8950s | 100.000% 
        Bond harmonic:      5.6830s |  1.771% 
                update bond table:  4.0543s |  1.263% 
                Self:               1.6287s |  0.508% 
        Harmonic Angle:     8.6035s |  2.681% 
        Harmonic Dihedral: 29.4338s |  9.172% 
        Integrate:         15.3162s |  4.773% 
                NPT step 1:  0.2789s |  0.087% 
                        Thermo:  0.0084s |  0.003% 
                NPT step 2:  8.4412s |  2.631% 
                        Thermo:  2.2518s |  0.702% 
                        Self:    6.1894s |  1.929% 
                Net force:   6.1609s |  1.920% 
                Self:        0.4352s |  0.136% 
        Neighbor:          122.8821s | 38.294% 
                Cell:           0.7251s |  0.226% 
                        compute:  0.5001s |  0.156% 
                        init:     0.2001s |  0.062% 
                MPI allreduce:  0.1726s |  0.054% 
                compute:       96.9463s | 30.211% 
                filter:        23.4678s |  7.313% 
                head-list:      0.8189s |  0.255% 
                update-ex:      0.6943s |  0.216% 
        Pair lj:           45.5410s | 14.192% 
        Pair slj:          65.0419s | 20.269% 
        SFCPack:            0.0626s |  0.019% 
        comm_ghost_exch:    5.0695s |  1.580% 
                MPI send/recv:  1.6295s |  0.508% 3.28457 GiB/s 
                Self:           3.4400s |  1.072% 
        comm_ghost_update:  9.0284s |  2.813% 
                MPI send/recv:  3.9416s |  1.228% 5.82077 GiB/s 
                pack:           3.5248s |  1.098% 
                unpack:         1.4764s |  0.460% 
        comm_migrate:       8.9811s |  2.799% 
                MPI send/recv:  0.3771s |  0.118% 56.81713 MiB/s 
                angle:          1.8721s |  0.583% 
                        MPI send/recv:  0.4523s |  0.141% 48.29581 MiB/s 
                        Self:           1.4198s |  0.442% 
                bond:           1.4226s |  0.443% 
                        MPI send/recv:  0.1917s |  0.060% 52.25238 MiB/s 
                        Self:           1.2308s |  0.384% 
                dihedral:       3.9565s |  1.233% 
                        MPI send/recv:  0.4546s |  0.142% 250.22401 MiB/s 
                        Self:           3.5019s |  1.091% 
                pack:           0.7776s |  0.242% 
                unpack:         0.0915s |  0.029% 
                Self:           0.4837s |  0.151% 
        dist-check:         1.9750s |  0.615% 
        Self:               3.2771s |  1.021% 
---------
-- Neighborlist stats:
671 normal updates / 18 forced updates / 0 dangerous updates
n_neigh_min: 3 / n_neigh_max: 146 / n_neigh_avg: 105.47501
shortest rebuild period: 5
-- Cell list stats:
Dimension: 81, 41, 5
n_min    : 0 / n_max: 144 / n_avg: 38.08166
** run complete **










################################################################
Running: mpirun -n 16 python polymer_brush.py --mode=gpu --user=32
HOOMD-blue 1.3.3-unknown CUDA (7.5) SINGLE MPI SSE SSE2 SSE3 
Compiled: 03/06/2016
Copyright 2009-2016 The Regents of the University of Michigan.

All publications and presentations based on HOOMD-blue, including any reports
or published results obtained, in whole or in part, with HOOMD-blue, will
acknowledge its use according to the terms posted at the time of submission on:
http://codeblue.umich.edu/hoomd-blue/citations.html
-----
You are using HOOMD-blue. Read and cite the following:
* J A Anderson, C D Lorenz, and A Travesset. "General purpose molecular dynamics
  simulations fully implemented on graphics processing units", Journal of
  Computational Physics 227 (2008) 5342--5359
and
* J Glaser, T D Nguyen, J A Anderson, P Liu, F Spiga, J A Millan, D C Morse, and
  S C Glotzer. "Strong scaling of general-purpose molecular dynamics simulations
  on GPUs", Computer Physics Communications 192 (2015) 97--107
and
* http://codeblue.umich.edu/hoomd-blue
You can save these citations to file using cite.save().
-----
notice(2): This system is not compute exclusive, using local rank to select GPUs
notice(2): Unable to identify node local rank information
notice(2): Using global rank to select GPUs
HOOMD-blue is running on the following GPU(s):
Rank 0:  [0]            Tesla K40m  15 SM_3.5 @ 0.745 GHz, 11439 MiB DRAM
Rank 1:  [1]            Tesla K40m  15 SM_3.5 @ 0.745 GHz, 11439 MiB DRAM
Rank 2:  [2]            Tesla K40m  15 SM_3.5 @ 0.745 GHz, 11439 MiB DRAM
Rank 3:  [3]            Tesla K40m  15 SM_3.5 @ 0.745 GHz, 11439 MiB DRAM
Rank 4:  [4]            Tesla K40m  15 SM_3.5 @ 0.745 GHz, 11439 MiB DRAM
Rank 5:  [5]            Tesla K40m  15 SM_3.5 @ 0.745 GHz, 11439 MiB DRAM
Rank 6:  [0]            Tesla K40m  15 SM_3.5 @ 0.745 GHz, 11439 MiB DRAM
Rank 7:  [1]            Tesla K40m  15 SM_3.5 @ 0.745 GHz, 11439 MiB DRAM
Rank 8:  [2]            Tesla K40m  15 SM_3.5 @ 0.745 GHz, 11439 MiB DRAM
Rank 9:  [3]            Tesla K40m  15 SM_3.5 @ 0.745 GHz, 11439 MiB DRAM
Rank 10:  [4]            Tesla K40m  15 SM_3.5 @ 0.745 GHz, 11439 MiB DRAM
Rank 11:  [5]            Tesla K40m  15 SM_3.5 @ 0.745 GHz, 11439 MiB DRAM
Rank 12:  [0]            Tesla K40m  15 SM_3.5 @ 0.745 GHz, 11439 MiB DRAM
Rank 13:  [1]            Tesla K40m  15 SM_3.5 @ 0.745 GHz, 11439 MiB DRAM
Rank 14:  [2]            Tesla K40m  15 SM_3.5 @ 0.745 GHz, 11439 MiB DRAM
Rank 15:  [3]            Tesla K40m  15 SM_3.5 @ 0.745 GHz, 11439 MiB DRAM
polymer_brush.py:012  |  system=init.read_xml(filename='init.xml')
notice(2): Reading init.xml...
notice(2): --- hoomd_xml file read summary
notice(2): 1740 positions at timestep 0
notice(2): 1740 velocities
notice(2): 1740 masses
notice(2): 1740 diameters
notice(2): 5 particle types
notice(2): 1740 particle body values
notice(2): 1580 bonds
notice(2): 1420 angles
notice(2): 3780 dihedrals
notice(2): 1740 charges
HOOMD-blue is using domain decomposition: n_x = 2 n_y = 2 n_z = 4.
2 x 2 x 4 local grid on 1 nodes
notice(2): Group "all" created containing 1740 particles
polymer_brush.py:018  |  system.replicate(nx=rep, ny=rep, nz=1)
polymer_brush.py:019  |  typeW1=group.type('W1')
notice(2): Group "type W1" created containing 61440 particles
polymer_brush.py:020  |  typeW2=group.type('W2')
*Warning*: W2 does not exist in the system, creating an empty group
notice(2): Group "type W2" created containing 0 particles
notice(2): Group "Wall" created containing 61440 particles
polymer_brush.py:022  |  typeB= group.type('B')
notice(2): Group "type B" created containing 1044480 particles
polymer_brush.py:023  |  typeSolvBackBone = group.type('Solvent')
notice(2): Group "type Solvent" created containing 409600 particles
polymer_brush.py:024  |  typeC= group.type('C')
*Warning*: C does not exist in the system, creating an empty group
notice(2): Group "type C" created containing 0 particles
polymer_brush.py:025  |  typeCH3_W1=group.type('CH3_W1')
notice(2): Group "type CH3_W1" created containing 61440 particles
polymer_brush.py:026  |  typeCH3_W2=group.type('CH3_W2')
*Warning*: CH3_W2 does not exist in the system, creating an empty group
notice(2): Group "type CH3_W2" created containing 0 particles
polymer_brush.py:027  |  typeSolvTail=group.type('SolvTail')
notice(2): Group "type SolvTail" created containing 204800 particles
notice(2): Group "BCH3-particles" created containing 1105920 particles
notice(2): Group "CCH3-particles" created containing 0 particles
notice(2): Group "all-solvent" created containing 614400 particles
notice(2): Group "bc-particles" created containing 1105920 particles
notice(2): Group "typeAll" created containing 1720320 particles
notice(2): Group "typeNPT" created containing 1781760 particles
Number of polymeric particles 1720320
polymer_brush.py:044  |  lj = pair.lj(r_cut=3.3)
nlist.py:1051  |          globals.neighbor_list = cell();
polymer_brush.py:052  |  lj.pair_coeff.set('Solvent','W1' ,epsilon=0 , sigma=1.3144)
polymer_brush.py:053  |  lj.pair_coeff.set('Solvent','W2' ,epsilon=0 , sigma=1.3144)
polymer_brush.py:054  |  lj.pair_coeff.set('Solvent','Solvent' ,epsilon=1.0*tether_bulk , sigma=1.3144)
polymer_brush.py:055  |  lj.pair_coeff.set('Solvent','B' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:056  |  lj.pair_coeff.set('Solvent','C' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:057  |  lj.pair_coeff.set('Solvent','CH3_W1' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:058  |  lj.pair_coeff.set('Solvent','CH3_W2' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:059  |  lj.pair_coeff.set('Solvent','SolvTail' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:060  |  lj.pair_coeff.set('B','B' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:061  |  lj.pair_coeff.set('C','C' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:062  |  lj.pair_coeff.set('B','C' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:063  |  lj.pair_coeff.set('B','CH3_W1' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:064  |  lj.pair_coeff.set('B','CH3_W2' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:065  |  lj.pair_coeff.set('C','CH3_W1' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:066  |  lj.pair_coeff.set('C','CH3_W2' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:067  |  lj.pair_coeff.set('CH3_W1','CH3_W1' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:068  |  lj.pair_coeff.set('CH3_W1','CH3_W2' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:069  |  lj.pair_coeff.set('CH3_W2' ,'CH3_W2' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:071  |  lj.pair_coeff.set('B','SolvTail' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:072  |  lj.pair_coeff.set('C','SolvTail' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:073  |  lj.pair_coeff.set('CH3_W1','SolvTail' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:074  |  lj.pair_coeff.set('CH3_W2','SolvTail' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:075  |  lj.pair_coeff.set('SolvTail' ,'SolvTail' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:077  |  lj.pair_coeff.set('B','C' ,epsilon=0.01 , sigma=2.62 , alpha=0.0)
polymer_brush.py:078  |  lj.pair_coeff.set('W1','W2' ,epsilon=0.0 , sigma=1.0)
polymer_brush.py:079  |  lj.pair_coeff.set('W1','W1' ,epsilon=0.0 , sigma=1.0)
polymer_brush.py:080  |  lj.pair_coeff.set('W1','B' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:081  |  lj.pair_coeff.set('W1','C' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:082  |  lj.pair_coeff.set('W2','W2' ,epsilon=0.0 , sigma=1.0)
polymer_brush.py:083  |  lj.pair_coeff.set('W2','B' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:084  |  lj.pair_coeff.set('W2','C' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:085  |  lj.pair_coeff.set('W1','CH3_W1' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:086  |  lj.pair_coeff.set('W1','CH3_W2' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:087  |  lj.pair_coeff.set('W1','SolvTail' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:088  |  lj.pair_coeff.set('W2','CH3_W1' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:089  |  lj.pair_coeff.set('W2','CH3_W2' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:090  |  lj.pair_coeff.set('W2','SolvTail' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:091  |  lj.pair_coeff.set('A','C' ,epsilon=0.0 , sigma=1.0 , alpha=0.0)
polymer_brush.py:093  |  slj = pair.slj(r_cut= 1.3)
notice(2): Notice: slj set d_max=2.0
polymer_brush.py:094  |  slj.set_params(mode="shift")
pair.py:886  |          pair.set_params(self, mode=mode);
polymer_brush.py:095  |  slj.pair_coeff.set('W2','Solvent', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:096  |  slj.pair_coeff.set('W1','Solvent', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:097  |  slj.pair_coeff.set('Solvent','Solvent', epsilon = 0, sigma = 1.0)
polymer_brush.py:098  |  slj.pair_coeff.set('Solvent','B', epsilon = 0, sigma = 1.0)
polymer_brush.py:099  |  slj.pair_coeff.set('Solvent','C', epsilon = 0, sigma = 1.0)
polymer_brush.py:100  |  slj.pair_coeff.set('Solvent','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:101  |  slj.pair_coeff.set('Solvent','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:102  |  slj.pair_coeff.set('Solvent','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:103  |  slj.pair_coeff.set('W1','W2', epsilon = 0 , sigma =1.0)
polymer_brush.py:104  |  slj.pair_coeff.set('W1','W1', epsilon = 0 , sigma =1.0)
polymer_brush.py:105  |  slj.pair_coeff.set('W2','W2', epsilon = 0 , sigma =1.0)
polymer_brush.py:106  |  slj.pair_coeff.set('W1','B', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:107  |  slj.pair_coeff.set('W1','C', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:108  |  slj.pair_coeff.set('W2','B', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:109  |  slj.pair_coeff.set('W2','C', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:110  |  slj.pair_coeff.set('W1','CH3_W1', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:111  |  slj.pair_coeff.set('W1','CH3_W2', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:112  |  slj.pair_coeff.set('W2','CH3_W1', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:113  |  slj.pair_coeff.set('W2','CH3_W2', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:114  |  slj.pair_coeff.set('W1','SolvTail', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:115  |  slj.pair_coeff.set('W2','SolvTail', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:116  |  slj.pair_coeff.set('B','B', epsilon = 0, sigma = 1.0)
polymer_brush.py:117  |  slj.pair_coeff.set('C','C', epsilon = 0, sigma = 1.0)
polymer_brush.py:118  |  slj.pair_coeff.set('B','C', epsilon = 0, sigma = 1.0)
polymer_brush.py:119  |  slj.pair_coeff.set('B','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:120  |  slj.pair_coeff.set('B','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:121  |  slj.pair_coeff.set('B','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:122  |  slj.pair_coeff.set('C','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:123  |  slj.pair_coeff.set('C','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:124  |  slj.pair_coeff.set('C','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:125  |  slj.pair_coeff.set('CH3_W1','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:126  |  slj.pair_coeff.set('CH3_W1','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:127  |  slj.pair_coeff.set('CH3_W2','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:128  |  slj.pair_coeff.set('CH3_W1','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:129  |  slj.pair_coeff.set('CH3_W2','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:130  |  slj.pair_coeff.set('SolvTail','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:133  |  harmonicO_O= bond.harmonic(name = 'O-O-bond')
polymer_brush.py:135  |  harmonicO_O.bond_coeff.set('oleic', k=9892.9362 , r0=0.5)
polymer_brush.py:138  |  harmonicO_O.bond_coeff.set('wall', k=9892.9362, r0=1.25)
polymer_brush.py:141  |  angleWO = angle.harmonic()
polymer_brush.py:142  |  angleWO.set_coeff('W-O' , k = 201.2878 , t0= 2.5307)
polymer_brush.py:143  |  angleWO.set_coeff('O-O' , k = 201.2878 , t0= 1.92)
polymer_brush.py:144  |  angleWO.set_coeff('kink' , k = 1000.2878 , t0= 2.8)
polymer_brush.py:150  |  dihedralField = dihedral.harmonic()
polymer_brush.py:151  |  dihedralField.set_coeff('DihedralW1' , k = 2.6838 , d=1 , n= 1)
polymer_brush.py:152  |  dihedralField.set_coeff('DihedralW2' , k = 1.4543 , d=-1 , n= 2)
polymer_brush.py:153  |  dihedralField.set_coeff('DihedralW3' , k =5.4347 , d=1 , n= 3)
polymer_brush.py:154  |  dihedralField.set_coeff('Dihedral1' , k =2.6838 , d=1 , n= 1)
polymer_brush.py:155  |  dihedralField.set_coeff('Dihedral2' , k = 1.4543 , d=-1 , n= 2)
polymer_brush.py:156  |  dihedralField.set_coeff('Dihedral3' , k =5.4347 , d=1 , n= 3)
polymer_brush.py:158  |  integrate.mode_standard(dt= 0.005)
polymer_brush.py:160  |  integrator=integrate.nve(group=typeAll , limit=0.01 )
polymer_brush.py:161  |  zeroer = update.zero_momentum(period = 1)
polymer_brush.py:164  |  run(200)
notice(2): -- Neighborlist exclusion statistics -- :
notice(2): Particles with 1 exclusions             : 327680
notice(2): Particles with 2 exclusions             : 1454080
notice(2): Neighbors included by diameter          : yes
notice(2): Neighbors excluded when in the same body: no
** starting run **
Time 00:00:31 | Step 112 / 200 | TPS 11.1992 | ETA 00:00:07
Time 00:00:35 | Step 200 / 200 | TPS 20.9717 | ETA 00:00:00
Average TPS: 14.0876
---------
-- Neighborlist stats:
9 normal updates / 1 forced updates / 0 dangerous updates
n_neigh_min: 0 / n_neigh_max: 142 / n_neigh_avg: 109.979
shortest rebuild period: 21
-- Cell list stats:
Dimension: 41, 41, 3
n_min    : 8 / n_max: 179 / n_avg: 71.718
** run complete **
polymer_brush.py:165  |  zeroer.disable()
polymer_brush.py:167  |  integrator.disable()
polymer_brush.py:169  |  integrator=integrate.npt(group=typeAll , tau=1.0 , T= 1.0 , tauP = 1.2 , P = 0.00078 , x=False , y = False , z = True , rescale_all=True )
polymer_brush.py:172  |  run(5e3, profile=True, limit_hours=1)
** starting run **
Time 00:00:46 | Step 332 / 5200 | TPS 12.9627 | ETA 00:06:15
Time 00:00:56 | Step 484 / 5200 | TPS 15.0228 | ETA 00:05:13
Time 00:01:06 | Step 635 / 5200 | TPS 14.8968 | ETA 00:05:06
Time 00:01:16 | Step 798 / 5200 | TPS 16.1068 | ETA 00:04:33
Time 00:01:26 | Step 962 / 5200 | TPS 16.2203 | ETA 00:04:21
Time 00:01:36 | Step 1193 / 5200 | TPS 22.8129 | ETA 00:02:55
Time 00:01:47 | Step 1465 / 5200 | TPS 26.6289 | ETA 00:02:20
Time 00:01:57 | Step 1713 / 5200 | TPS 24.4833 | ETA 00:02:22
Time 00:02:07 | Step 1953 / 5200 | TPS 23.9598 | ETA 00:02:15
Time 00:02:17 | Step 2196 / 5200 | TPS 24.2326 | ETA 00:02:03
Time 00:02:27 | Step 2476 / 5200 | TPS 27.9767 | ETA 00:01:37
Time 00:02:37 | Step 2758 / 5200 | TPS 28.12 | ETA 00:01:26
Time 00:02:47 | Step 3019 / 5200 | TPS 26.0806 | ETA 00:01:23
Time 00:02:57 | Step 3276 / 5200 | TPS 25.6548 | ETA 00:01:14
Time 00:03:07 | Step 3543 / 5200 | TPS 26.5258 | ETA 00:01:02
Time 00:03:17 | Step 3816 / 5200 | TPS 27.2822 | ETA 00:00:50
Time 00:03:27 | Step 4083 / 5200 | TPS 26.3238 | ETA 00:00:42
Time 00:03:37 | Step 4335 / 5200 | TPS 24.9589 | ETA 00:00:34
Time 00:03:47 | Step 4593 / 5200 | TPS 25.4762 | ETA 00:00:23
Time 00:03:57 | Step 4870 / 5200 | TPS 27.6786 | ETA 00:00:11
Time 00:04:07 | Step 5156 / 5200 | TPS 28.2353 | ETA 00:00:01
Time 00:04:09 | Step 5200 / 5200 | TPS 29.5168 | ETA 00:00:00
Average TPS: 23.4401
Simulation: 213.3097s | 100.000% 
        Bond harmonic:      3.4230s |  1.605% 
                update bond table:  2.5479s |  1.194% 
                Self:               0.8751s |  0.410% 
        Harmonic Angle:     5.9399s |  2.785% 
        Harmonic Dihedral: 16.5735s |  7.770% 
        Integrate:         19.2792s |  9.038% 
                NPT step 1:  0.2809s |  0.132% 
                        Thermo:  0.0171s |  0.008% 
                        Self:    0.2638s |  0.124% 
                NPT step 2: 15.6357s |  7.330% 
                        Thermo:  1.3057s |  0.612% 
                        Self:   14.3299s |  6.718% 
                Net force:   2.9702s |  1.392% 
                Self:        0.3925s |  0.184% 
        Neighbor:          76.5345s | 35.880% 
                Cell:           0.9939s |  0.466% 
                        compute:  0.6616s |  0.310% 
                        init:     0.2814s |  0.132% 
                MPI allreduce:  1.0697s |  0.501% 
                compute:       60.0816s | 28.166% 
                filter:        11.9425s |  5.599% 
                head-list:      1.6333s |  0.766% 
                update-ex:      0.7289s |  0.342% 
        Pair lj:           28.0002s | 13.127% 
        Pair slj:          36.2861s | 17.011% 
        SFCPack:            0.0406s |  0.019% 
        comm_ghost_exch:    4.9410s |  2.316% 
                MPI send/recv:  2.0748s |  0.973% 1.54259 GiB/s 
                Self:           2.8662s |  1.344% 
        comm_ghost_update:  8.5658s |  4.016% 
                MPI send/recv:  4.2346s |  1.985% 3.31257 GiB/s 
                pack:           2.1023s |  0.986% 
                unpack:         2.1098s |  0.989% 
        comm_migrate:       9.7318s |  4.562% 
                MPI send/recv:  0.5719s |  0.268% 30.30900 MiB/s 
                angle:          2.2248s |  1.043% 
                        MPI send/recv:  0.8003s |  0.375% 23.01607 MiB/s 
                        Self:           1.4245s |  0.668% 
                bond:           1.6846s |  0.790% 
                        MPI send/recv:  0.4282s |  0.201% 19.30262 MiB/s 
                        Self:           1.2564s |  0.589% 
                dihedral:       4.0846s |  1.915% 
                        MPI send/recv:  0.9919s |  0.465% 98.93905 MiB/s 
                        Self:           3.0926s |  1.450% 
                pack:           0.5765s |  0.270% 
                unpack:         0.1468s |  0.069% 
                Self:           0.4426s |  0.208% 
        dist-check:         2.3355s |  1.095% 
        Self:               1.6586s |  0.778% 
---------
-- Neighborlist stats:
675 normal updates / 18 forced updates / 0 dangerous updates
n_neigh_min: 3 / n_neigh_max: 147 / n_neigh_avg: 105.48354
shortest rebuild period: 5
-- Cell list stats:
Dimension: 41, 41, 5
n_min    : 0 / n_max: 150 / n_avg: 39.46687
** run complete **










################################################################
CPU n=8
################################################################
################################################################
Running: mpirun -n 16 python polymer_brush.py --mode=cpu --user=8
HOOMD-blue 1.3.3-unknown CUDA (7.5) SINGLE MPI SSE SSE2 SSE3 
Compiled: 03/06/2016
Copyright 2009-2016 The Regents of the University of Michigan.

All publications and presentations based on HOOMD-blue, including any reports
or published results obtained, in whole or in part, with HOOMD-blue, will
acknowledge its use according to the terms posted at the time of submission on:
http://codeblue.umich.edu/hoomd-blue/citations.html
-----
You are using HOOMD-blue. Read and cite the following:
* J A Anderson, C D Lorenz, and A Travesset. "General purpose molecular dynamics
  simulations fully implemented on graphics processing units", Journal of
  Computational Physics 227 (2008) 5342--5359
and
* J Glaser, T D Nguyen, J A Anderson, P Liu, F Spiga, J A Millan, D C Morse, and
  S C Glotzer. "Strong scaling of general-purpose molecular dynamics simulations
  on GPUs", Computer Physics Communications 192 (2015) 97--107
and
* http://codeblue.umich.edu/hoomd-blue
You can save these citations to file using cite.save().
-----
Ranks 0-15: HOOMD-blue is running on the CPU
polymer_brush.py:012  |  system=init.read_xml(filename='init.xml')
notice(2): Reading init.xml...
notice(2): --- hoomd_xml file read summary
notice(2): 1740 positions at timestep 0
notice(2): 1740 velocities
notice(2): 1740 masses
notice(2): 1740 diameters
notice(2): 5 particle types
notice(2): 1740 particle body values
notice(2): 1580 bonds
notice(2): 1420 angles
notice(2): 3780 dihedrals
notice(2): 1740 charges
HOOMD-blue is using domain decomposition: n_x = 2 n_y = 2 n_z = 4.
2 x 2 x 4 local grid on 1 nodes
notice(2): Group "all" created containing 1740 particles
polymer_brush.py:018  |  system.replicate(nx=rep, ny=rep, nz=1)
polymer_brush.py:019  |  typeW1=group.type('W1')
notice(2): Group "type W1" created containing 3840 particles
polymer_brush.py:020  |  typeW2=group.type('W2')
*Warning*: W2 does not exist in the system, creating an empty group
notice(2): Group "type W2" created containing 0 particles
notice(2): Group "Wall" created containing 3840 particles
polymer_brush.py:022  |  typeB= group.type('B')
notice(2): Group "type B" created containing 65280 particles
polymer_brush.py:023  |  typeSolvBackBone = group.type('Solvent')
notice(2): Group "type Solvent" created containing 25600 particles
polymer_brush.py:024  |  typeC= group.type('C')
*Warning*: C does not exist in the system, creating an empty group
notice(2): Group "type C" created containing 0 particles
polymer_brush.py:025  |  typeCH3_W1=group.type('CH3_W1')
notice(2): Group "type CH3_W1" created containing 3840 particles
polymer_brush.py:026  |  typeCH3_W2=group.type('CH3_W2')
*Warning*: CH3_W2 does not exist in the system, creating an empty group
notice(2): Group "type CH3_W2" created containing 0 particles
polymer_brush.py:027  |  typeSolvTail=group.type('SolvTail')
notice(2): Group "type SolvTail" created containing 12800 particles
notice(2): Group "BCH3-particles" created containing 69120 particles
notice(2): Group "CCH3-particles" created containing 0 particles
notice(2): Group "all-solvent" created containing 38400 particles
notice(2): Group "bc-particles" created containing 69120 particles
notice(2): Group "typeAll" created containing 107520 particles
notice(2): Group "typeNPT" created containing 111360 particles
Number of polymeric particles 107520
polymer_brush.py:044  |  lj = pair.lj(r_cut=3.3)
nlist.py:1051  |          globals.neighbor_list = cell();
polymer_brush.py:052  |  lj.pair_coeff.set('Solvent','W1' ,epsilon=0 , sigma=1.3144)
polymer_brush.py:053  |  lj.pair_coeff.set('Solvent','W2' ,epsilon=0 , sigma=1.3144)
polymer_brush.py:054  |  lj.pair_coeff.set('Solvent','Solvent' ,epsilon=1.0*tether_bulk , sigma=1.3144)
polymer_brush.py:055  |  lj.pair_coeff.set('Solvent','B' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:056  |  lj.pair_coeff.set('Solvent','C' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:057  |  lj.pair_coeff.set('Solvent','CH3_W1' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:058  |  lj.pair_coeff.set('Solvent','CH3_W2' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:059  |  lj.pair_coeff.set('Solvent','SolvTail' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:060  |  lj.pair_coeff.set('B','B' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:061  |  lj.pair_coeff.set('C','C' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:062  |  lj.pair_coeff.set('B','C' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:063  |  lj.pair_coeff.set('B','CH3_W1' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:064  |  lj.pair_coeff.set('B','CH3_W2' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:065  |  lj.pair_coeff.set('C','CH3_W1' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:066  |  lj.pair_coeff.set('C','CH3_W2' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:067  |  lj.pair_coeff.set('CH3_W1','CH3_W1' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:068  |  lj.pair_coeff.set('CH3_W1','CH3_W2' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:069  |  lj.pair_coeff.set('CH3_W2' ,'CH3_W2' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:071  |  lj.pair_coeff.set('B','SolvTail' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:072  |  lj.pair_coeff.set('C','SolvTail' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:073  |  lj.pair_coeff.set('CH3_W1','SolvTail' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:074  |  lj.pair_coeff.set('CH3_W2','SolvTail' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:075  |  lj.pair_coeff.set('SolvTail' ,'SolvTail' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:077  |  lj.pair_coeff.set('B','C' ,epsilon=0.01 , sigma=2.62 , alpha=0.0)
polymer_brush.py:078  |  lj.pair_coeff.set('W1','W2' ,epsilon=0.0 , sigma=1.0)
polymer_brush.py:079  |  lj.pair_coeff.set('W1','W1' ,epsilon=0.0 , sigma=1.0)
polymer_brush.py:080  |  lj.pair_coeff.set('W1','B' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:081  |  lj.pair_coeff.set('W1','C' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:082  |  lj.pair_coeff.set('W2','W2' ,epsilon=0.0 , sigma=1.0)
polymer_brush.py:083  |  lj.pair_coeff.set('W2','B' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:084  |  lj.pair_coeff.set('W2','C' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:085  |  lj.pair_coeff.set('W1','CH3_W1' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:086  |  lj.pair_coeff.set('W1','CH3_W2' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:087  |  lj.pair_coeff.set('W1','SolvTail' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:088  |  lj.pair_coeff.set('W2','CH3_W1' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:089  |  lj.pair_coeff.set('W2','CH3_W2' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:090  |  lj.pair_coeff.set('W2','SolvTail' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:091  |  lj.pair_coeff.set('A','C' ,epsilon=0.0 , sigma=1.0 , alpha=0.0)
polymer_brush.py:093  |  slj = pair.slj(r_cut= 1.3)
notice(2): Notice: slj set d_max=2.0
polymer_brush.py:094  |  slj.set_params(mode="shift")
pair.py:886  |          pair.set_params(self, mode=mode);
polymer_brush.py:095  |  slj.pair_coeff.set('W2','Solvent', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:096  |  slj.pair_coeff.set('W1','Solvent', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:097  |  slj.pair_coeff.set('Solvent','Solvent', epsilon = 0, sigma = 1.0)
polymer_brush.py:098  |  slj.pair_coeff.set('Solvent','B', epsilon = 0, sigma = 1.0)
polymer_brush.py:099  |  slj.pair_coeff.set('Solvent','C', epsilon = 0, sigma = 1.0)
polymer_brush.py:100  |  slj.pair_coeff.set('Solvent','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:101  |  slj.pair_coeff.set('Solvent','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:102  |  slj.pair_coeff.set('Solvent','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:103  |  slj.pair_coeff.set('W1','W2', epsilon = 0 , sigma =1.0)
polymer_brush.py:104  |  slj.pair_coeff.set('W1','W1', epsilon = 0 , sigma =1.0)
polymer_brush.py:105  |  slj.pair_coeff.set('W2','W2', epsilon = 0 , sigma =1.0)
polymer_brush.py:106  |  slj.pair_coeff.set('W1','B', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:107  |  slj.pair_coeff.set('W1','C', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:108  |  slj.pair_coeff.set('W2','B', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:109  |  slj.pair_coeff.set('W2','C', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:110  |  slj.pair_coeff.set('W1','CH3_W1', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:111  |  slj.pair_coeff.set('W1','CH3_W2', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:112  |  slj.pair_coeff.set('W2','CH3_W1', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:113  |  slj.pair_coeff.set('W2','CH3_W2', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:114  |  slj.pair_coeff.set('W1','SolvTail', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:115  |  slj.pair_coeff.set('W2','SolvTail', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:116  |  slj.pair_coeff.set('B','B', epsilon = 0, sigma = 1.0)
polymer_brush.py:117  |  slj.pair_coeff.set('C','C', epsilon = 0, sigma = 1.0)
polymer_brush.py:118  |  slj.pair_coeff.set('B','C', epsilon = 0, sigma = 1.0)
polymer_brush.py:119  |  slj.pair_coeff.set('B','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:120  |  slj.pair_coeff.set('B','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:121  |  slj.pair_coeff.set('B','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:122  |  slj.pair_coeff.set('C','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:123  |  slj.pair_coeff.set('C','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:124  |  slj.pair_coeff.set('C','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:125  |  slj.pair_coeff.set('CH3_W1','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:126  |  slj.pair_coeff.set('CH3_W1','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:127  |  slj.pair_coeff.set('CH3_W2','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:128  |  slj.pair_coeff.set('CH3_W1','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:129  |  slj.pair_coeff.set('CH3_W2','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:130  |  slj.pair_coeff.set('SolvTail','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:133  |  harmonicO_O= bond.harmonic(name = 'O-O-bond')
polymer_brush.py:135  |  harmonicO_O.bond_coeff.set('oleic', k=9892.9362 , r0=0.5)
polymer_brush.py:138  |  harmonicO_O.bond_coeff.set('wall', k=9892.9362, r0=1.25)
polymer_brush.py:141  |  angleWO = angle.harmonic()
polymer_brush.py:142  |  angleWO.set_coeff('W-O' , k = 201.2878 , t0= 2.5307)
polymer_brush.py:143  |  angleWO.set_coeff('O-O' , k = 201.2878 , t0= 1.92)
polymer_brush.py:144  |  angleWO.set_coeff('kink' , k = 1000.2878 , t0= 2.8)
polymer_brush.py:150  |  dihedralField = dihedral.harmonic()
polymer_brush.py:151  |  dihedralField.set_coeff('DihedralW1' , k = 2.6838 , d=1 , n= 1)
polymer_brush.py:152  |  dihedralField.set_coeff('DihedralW2' , k = 1.4543 , d=-1 , n= 2)
polymer_brush.py:153  |  dihedralField.set_coeff('DihedralW3' , k =5.4347 , d=1 , n= 3)
polymer_brush.py:154  |  dihedralField.set_coeff('Dihedral1' , k =2.6838 , d=1 , n= 1)
polymer_brush.py:155  |  dihedralField.set_coeff('Dihedral2' , k = 1.4543 , d=-1 , n= 2)
polymer_brush.py:156  |  dihedralField.set_coeff('Dihedral3' , k =5.4347 , d=1 , n= 3)
polymer_brush.py:158  |  integrate.mode_standard(dt= 0.005)
polymer_brush.py:160  |  integrator=integrate.nve(group=typeAll , limit=0.01 )
polymer_brush.py:161  |  zeroer = update.zero_momentum(period = 1)
polymer_brush.py:164  |  run(200)
notice(2): -- Neighborlist exclusion statistics -- :
notice(2): Particles with 1 exclusions             : 20480
notice(2): Particles with 2 exclusions             : 90880
notice(2): Neighbors included by diameter          : yes
notice(2): Neighbors excluded when in the same body: no
** starting run **
Time 00:00:10 | Step 122 / 200 | TPS 12.0815 | ETA 00:00:06
Time 00:00:16 | Step 200 / 200 | TPS 14.9932 | ETA 00:00:00
Average TPS: 13.0715
---------
-- Neighborlist stats:
8 normal updates / 2 forced updates / 0 dangerous updates
n_neigh_min: 0 / n_neigh_max: 129 / n_neigh_avg: 58.3439
shortest rebuild period: 21
-- Cell list stats:
Dimension: 11, 11, 3
n_min    : 8 / n_max: 207 / n_avg: 80.4738
** run complete **
polymer_brush.py:165  |  zeroer.disable()
polymer_brush.py:167  |  integrator.disable()
polymer_brush.py:169  |  integrator=integrate.npt(group=typeAll , tau=1.0 , T= 1.0 , tauP = 1.2 , P = 0.00078 , x=False , y = False , z = True , rescale_all=True )
polymer_brush.py:172  |  run(5e3, profile=True, limit_hours=1)
** starting run **
Time 00:00:26 | Step 293 / 5200 | TPS 9.24745 | ETA 00:08:50
Time 00:00:36 | Step 395 / 5200 | TPS 9.82959 | ETA 00:08:08
Time 00:00:46 | Step 487 / 5200 | TPS 9.14116 | ETA 00:08:35
Time 00:00:56 | Step 570 / 5200 | TPS 8.04415 | ETA 00:09:35
Time 00:01:07 | Step 652 / 5200 | TPS 7.78554 | ETA 00:09:44
Time 00:01:17 | Step 726 / 5200 | TPS 7.39144 | ETA 00:10:05
Time 00:01:27 | Step 807 / 5200 | TPS 7.9696 | ETA 00:09:11
Time 00:01:37 | Step 898 / 5200 | TPS 8.99498 | ETA 00:07:58
srun: Job step aborted: Waiting up to 32 seconds for job step to finish.
slurmstepd: error: *** STEP 82563.15 ON ivb106 CANCELLED AT 2017-05-15T01:14:58 DUE TO TIME LIMIT ***
slurmstepd: error: *** JOB 82563 ON ivb106 CANCELLED AT 2017-05-15T01:14:58 DUE TO TIME LIMIT ***
