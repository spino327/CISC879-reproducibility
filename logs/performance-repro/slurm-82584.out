################################################################
GPU n=8
################################################################
################################################################
Running: mpirun -n 1 python polymer_brush.py --mode=gpu --user=8
HOOMD-blue 1.3.3-unknown CUDA (7.5) SINGLE MPI SSE SSE2 SSE3 
Compiled: 03/06/2016
Copyright 2009-2016 The Regents of the University of Michigan.

All publications and presentations based on HOOMD-blue, including any reports
or published results obtained, in whole or in part, with HOOMD-blue, will
acknowledge its use according to the terms posted at the time of submission on:
http://codeblue.umich.edu/hoomd-blue/citations.html
-----
You are using HOOMD-blue. Read and cite the following:
* J A Anderson, C D Lorenz, and A Travesset. "General purpose molecular dynamics
  simulations fully implemented on graphics processing units", Journal of
  Computational Physics 227 (2008) 5342--5359
and
* J Glaser, T D Nguyen, J A Anderson, P Liu, F Spiga, J A Millan, D C Morse, and
  S C Glotzer. "Strong scaling of general-purpose molecular dynamics simulations
  on GPUs", Computer Physics Communications 192 (2015) 97--107
and
* http://codeblue.umich.edu/hoomd-blue
You can save these citations to file using cite.save().
-----
notice(2): This system is not compute exclusive, using local rank to select GPUs
notice(2): Unable to identify node local rank information
notice(2): Using global rank to select GPUs
HOOMD-blue is running on the following GPU(s):
 [0]  Tesla P100-PCIE-16GB  56 SM_6.0 @ 1.33 GHz, 16276 MiB DRAM
polymer_brush.py:012  |  system=init.read_xml(filename='init.xml')
notice(2): Reading init.xml...
notice(2): --- hoomd_xml file read summary
notice(2): 1740 positions at timestep 0
notice(2): 1740 velocities
notice(2): 1740 masses
notice(2): 1740 diameters
notice(2): 5 particle types
notice(2): 1740 particle body values
notice(2): 1580 bonds
notice(2): 1420 angles
notice(2): 3780 dihedrals
notice(2): 1740 charges
notice(2): Group "all" created containing 1740 particles
polymer_brush.py:018  |  system.replicate(nx=rep, ny=rep, nz=1)
polymer_brush.py:019  |  typeW1=group.type('W1')
notice(2): Group "type W1" created containing 3840 particles
polymer_brush.py:020  |  typeW2=group.type('W2')
*Warning*: W2 does not exist in the system, creating an empty group
notice(2): Group "type W2" created containing 0 particles
notice(2): Group "Wall" created containing 3840 particles
polymer_brush.py:022  |  typeB= group.type('B')
notice(2): Group "type B" created containing 65280 particles
polymer_brush.py:023  |  typeSolvBackBone = group.type('Solvent')
notice(2): Group "type Solvent" created containing 25600 particles
polymer_brush.py:024  |  typeC= group.type('C')
*Warning*: C does not exist in the system, creating an empty group
notice(2): Group "type C" created containing 0 particles
polymer_brush.py:025  |  typeCH3_W1=group.type('CH3_W1')
notice(2): Group "type CH3_W1" created containing 3840 particles
polymer_brush.py:026  |  typeCH3_W2=group.type('CH3_W2')
*Warning*: CH3_W2 does not exist in the system, creating an empty group
notice(2): Group "type CH3_W2" created containing 0 particles
polymer_brush.py:027  |  typeSolvTail=group.type('SolvTail')
notice(2): Group "type SolvTail" created containing 12800 particles
notice(2): Group "BCH3-particles" created containing 69120 particles
notice(2): Group "CCH3-particles" created containing 0 particles
notice(2): Group "all-solvent" created containing 38400 particles
notice(2): Group "bc-particles" created containing 69120 particles
notice(2): Group "typeAll" created containing 107520 particles
notice(2): Group "typeNPT" created containing 111360 particles
Number of polymeric particles 107520
polymer_brush.py:044  |  lj = pair.lj(r_cut=3.3)
nlist.py:1051  |          globals.neighbor_list = cell();
polymer_brush.py:052  |  lj.pair_coeff.set('Solvent','W1' ,epsilon=0 , sigma=1.3144)
polymer_brush.py:053  |  lj.pair_coeff.set('Solvent','W2' ,epsilon=0 , sigma=1.3144)
polymer_brush.py:054  |  lj.pair_coeff.set('Solvent','Solvent' ,epsilon=1.0*tether_bulk , sigma=1.3144)
polymer_brush.py:055  |  lj.pair_coeff.set('Solvent','B' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:056  |  lj.pair_coeff.set('Solvent','C' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:057  |  lj.pair_coeff.set('Solvent','CH3_W1' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:058  |  lj.pair_coeff.set('Solvent','CH3_W2' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:059  |  lj.pair_coeff.set('Solvent','SolvTail' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:060  |  lj.pair_coeff.set('B','B' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:061  |  lj.pair_coeff.set('C','C' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:062  |  lj.pair_coeff.set('B','C' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:063  |  lj.pair_coeff.set('B','CH3_W1' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:064  |  lj.pair_coeff.set('B','CH3_W2' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:065  |  lj.pair_coeff.set('C','CH3_W1' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:066  |  lj.pair_coeff.set('C','CH3_W2' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:067  |  lj.pair_coeff.set('CH3_W1','CH3_W1' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:068  |  lj.pair_coeff.set('CH3_W1','CH3_W2' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:069  |  lj.pair_coeff.set('CH3_W2' ,'CH3_W2' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:071  |  lj.pair_coeff.set('B','SolvTail' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:072  |  lj.pair_coeff.set('C','SolvTail' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:073  |  lj.pair_coeff.set('CH3_W1','SolvTail' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:074  |  lj.pair_coeff.set('CH3_W2','SolvTail' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:075  |  lj.pair_coeff.set('SolvTail' ,'SolvTail' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:077  |  lj.pair_coeff.set('B','C' ,epsilon=0.01 , sigma=2.62 , alpha=0.0)
polymer_brush.py:078  |  lj.pair_coeff.set('W1','W2' ,epsilon=0.0 , sigma=1.0)
polymer_brush.py:079  |  lj.pair_coeff.set('W1','W1' ,epsilon=0.0 , sigma=1.0)
polymer_brush.py:080  |  lj.pair_coeff.set('W1','B' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:081  |  lj.pair_coeff.set('W1','C' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:082  |  lj.pair_coeff.set('W2','W2' ,epsilon=0.0 , sigma=1.0)
polymer_brush.py:083  |  lj.pair_coeff.set('W2','B' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:084  |  lj.pair_coeff.set('W2','C' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:085  |  lj.pair_coeff.set('W1','CH3_W1' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:086  |  lj.pair_coeff.set('W1','CH3_W2' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:087  |  lj.pair_coeff.set('W1','SolvTail' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:088  |  lj.pair_coeff.set('W2','CH3_W1' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:089  |  lj.pair_coeff.set('W2','CH3_W2' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:090  |  lj.pair_coeff.set('W2','SolvTail' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:091  |  lj.pair_coeff.set('A','C' ,epsilon=0.0 , sigma=1.0 , alpha=0.0)
polymer_brush.py:093  |  slj = pair.slj(r_cut= 1.3)
notice(2): Notice: slj set d_max=2.0
polymer_brush.py:094  |  slj.set_params(mode="shift")
pair.py:886  |          pair.set_params(self, mode=mode);
polymer_brush.py:095  |  slj.pair_coeff.set('W2','Solvent', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:096  |  slj.pair_coeff.set('W1','Solvent', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:097  |  slj.pair_coeff.set('Solvent','Solvent', epsilon = 0, sigma = 1.0)
polymer_brush.py:098  |  slj.pair_coeff.set('Solvent','B', epsilon = 0, sigma = 1.0)
polymer_brush.py:099  |  slj.pair_coeff.set('Solvent','C', epsilon = 0, sigma = 1.0)
polymer_brush.py:100  |  slj.pair_coeff.set('Solvent','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:101  |  slj.pair_coeff.set('Solvent','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:102  |  slj.pair_coeff.set('Solvent','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:103  |  slj.pair_coeff.set('W1','W2', epsilon = 0 , sigma =1.0)
polymer_brush.py:104  |  slj.pair_coeff.set('W1','W1', epsilon = 0 , sigma =1.0)
polymer_brush.py:105  |  slj.pair_coeff.set('W2','W2', epsilon = 0 , sigma =1.0)
polymer_brush.py:106  |  slj.pair_coeff.set('W1','B', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:107  |  slj.pair_coeff.set('W1','C', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:108  |  slj.pair_coeff.set('W2','B', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:109  |  slj.pair_coeff.set('W2','C', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:110  |  slj.pair_coeff.set('W1','CH3_W1', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:111  |  slj.pair_coeff.set('W1','CH3_W2', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:112  |  slj.pair_coeff.set('W2','CH3_W1', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:113  |  slj.pair_coeff.set('W2','CH3_W2', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:114  |  slj.pair_coeff.set('W1','SolvTail', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:115  |  slj.pair_coeff.set('W2','SolvTail', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:116  |  slj.pair_coeff.set('B','B', epsilon = 0, sigma = 1.0)
polymer_brush.py:117  |  slj.pair_coeff.set('C','C', epsilon = 0, sigma = 1.0)
polymer_brush.py:118  |  slj.pair_coeff.set('B','C', epsilon = 0, sigma = 1.0)
polymer_brush.py:119  |  slj.pair_coeff.set('B','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:120  |  slj.pair_coeff.set('B','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:121  |  slj.pair_coeff.set('B','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:122  |  slj.pair_coeff.set('C','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:123  |  slj.pair_coeff.set('C','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:124  |  slj.pair_coeff.set('C','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:125  |  slj.pair_coeff.set('CH3_W1','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:126  |  slj.pair_coeff.set('CH3_W1','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:127  |  slj.pair_coeff.set('CH3_W2','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:128  |  slj.pair_coeff.set('CH3_W1','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:129  |  slj.pair_coeff.set('CH3_W2','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:130  |  slj.pair_coeff.set('SolvTail','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:133  |  harmonicO_O= bond.harmonic(name = 'O-O-bond')
polymer_brush.py:135  |  harmonicO_O.bond_coeff.set('oleic', k=9892.9362 , r0=0.5)
polymer_brush.py:138  |  harmonicO_O.bond_coeff.set('wall', k=9892.9362, r0=1.25)
polymer_brush.py:141  |  angleWO = angle.harmonic()
polymer_brush.py:142  |  angleWO.set_coeff('W-O' , k = 201.2878 , t0= 2.5307)
polymer_brush.py:143  |  angleWO.set_coeff('O-O' , k = 201.2878 , t0= 1.92)
polymer_brush.py:144  |  angleWO.set_coeff('kink' , k = 1000.2878 , t0= 2.8)
polymer_brush.py:150  |  dihedralField = dihedral.harmonic()
polymer_brush.py:151  |  dihedralField.set_coeff('DihedralW1' , k = 2.6838 , d=1 , n= 1)
polymer_brush.py:152  |  dihedralField.set_coeff('DihedralW2' , k = 1.4543 , d=-1 , n= 2)
polymer_brush.py:153  |  dihedralField.set_coeff('DihedralW3' , k =5.4347 , d=1 , n= 3)
polymer_brush.py:154  |  dihedralField.set_coeff('Dihedral1' , k =2.6838 , d=1 , n= 1)
polymer_brush.py:155  |  dihedralField.set_coeff('Dihedral2' , k = 1.4543 , d=-1 , n= 2)
polymer_brush.py:156  |  dihedralField.set_coeff('Dihedral3' , k =5.4347 , d=1 , n= 3)
polymer_brush.py:158  |  integrate.mode_standard(dt= 0.005)
polymer_brush.py:160  |  integrator=integrate.nve(group=typeAll , limit=0.01 )
polymer_brush.py:161  |  zeroer = update.zero_momentum(period = 1)
polymer_brush.py:164  |  run(200)
notice(2): -- Neighborlist exclusion statistics -- :
notice(2): Particles with 1 exclusions             : 20480
notice(2): Particles with 2 exclusions             : 90880
notice(2): Neighbors included by diameter          : yes
notice(2): Neighbors excluded when in the same body: no
** starting run **
Time 00:00:02 | Step 200 / 200 | TPS 164.678 | ETA 00:00:00
Average TPS: 164.67
---------
-- Neighborlist stats:
9 normal updates / 1 forced updates / 0 dangerous updates
n_neigh_min: 5 / n_neigh_max: 141 / n_neigh_avg: 84.021
shortest rebuild period: 21
-- Cell list stats:
Dimension: 20, 20, 8
n_min    : 0 / n_max: 121 / n_avg: 34.8
** run complete **
polymer_brush.py:165  |  zeroer.disable()
polymer_brush.py:167  |  integrator.disable()
polymer_brush.py:169  |  integrator=integrate.npt(group=typeAll , tau=1.0 , T= 1.0 , tauP = 1.2 , P = 0.00078 , x=False , y = False , z = True , rescale_all=True )
polymer_brush.py:172  |  run(1e4, profile=True, limit_hours=1)
** starting run **
Time 00:00:12 | Step 4541 / 10200 | TPS 433.774 | ETA 00:00:13
Time 00:00:22 | Step 9447 / 10200 | TPS 490.28 | ETA 00:00:01
Time 00:00:23 | Step 10200 / 10200 | TPS 505.733 | ETA 00:00:00
Average TPS: 465.051
Simulation: 21.5030s | 100.000% 
        Bond harmonic:      0.3249s |  1.511% 
                update bond table:  0.0089s |  0.041% 
                Self:               0.3160s |  1.470% 
        Harmonic Angle:     0.5382s |  2.503% 
        Harmonic Dihedral:  1.4184s |  6.596% 
        Integrate:          1.9546s |  9.090% 
                NPT step 1:  0.1573s |  0.731% 
                        Thermo:  0.0008s |  0.004% 
                        Self:    0.1564s |  0.728% 
                NPT step 2:  0.9158s |  4.259% 
                        Thermo:  0.5927s |  2.756% 
                        Self:    0.3231s |  1.503% 
                Net force:   0.8287s |  3.854% 
                Self:        0.0529s |  0.246% 
        Neighbor:           9.5925s | 44.610% 
                Cell:        0.3192s |  1.485% 
                        compute:  0.0584s |  0.272% 
                        init:     0.2220s |  1.032% 
                        Self:     0.0388s |  0.180% 
                compute:     5.3464s | 24.863% 
                dist-check:  0.1953s |  0.908% 
                filter:      3.2940s | 15.319% 
                head-list:   0.0795s |  0.370% 
                update-ex:   0.0007s |  0.003% 
                Self:        0.3574s |  1.662% 
        Pair lj:            3.4401s | 15.998% 
        Pair slj:           4.1039s | 19.085% 
        SFCPack:            0.0083s |  0.039% 
        Self:               0.1221s |  0.568% 
---------
-- Neighborlist stats:
1166 normal updates / 34 forced updates / 0 dangerous updates
n_neigh_min: 3 / n_neigh_max: 146 / n_neigh_avg: 81.00212
shortest rebuild period: 6
-- Cell list stats:
Dimension: 20, 20, 13
n_min    : 0 / n_max: 120 / n_avg: 21.41538
** run complete **










################################################################
Running: mpirun -n 2 python polymer_brush.py --mode=gpu --user=8
HOOMD-blue 1.3.3-unknown CUDA (7.5) SINGLE MPI SSE SSE2 SSE3 
Compiled: 03/06/2016
Copyright 2009-2016 The Regents of the University of Michigan.

All publications and presentations based on HOOMD-blue, including any reports
or published results obtained, in whole or in part, with HOOMD-blue, will
acknowledge its use according to the terms posted at the time of submission on:
http://codeblue.umich.edu/hoomd-blue/citations.html
-----
You are using HOOMD-blue. Read and cite the following:
* J A Anderson, C D Lorenz, and A Travesset. "General purpose molecular dynamics
  simulations fully implemented on graphics processing units", Journal of
  Computational Physics 227 (2008) 5342--5359
and
* J Glaser, T D Nguyen, J A Anderson, P Liu, F Spiga, J A Millan, D C Morse, and
  S C Glotzer. "Strong scaling of general-purpose molecular dynamics simulations
  on GPUs", Computer Physics Communications 192 (2015) 97--107
and
* http://codeblue.umich.edu/hoomd-blue
You can save these citations to file using cite.save().
-----
notice(2): This system is not compute exclusive, using local rank to select GPUs
notice(2): Unable to identify node local rank information
notice(2): Using global rank to select GPUs
HOOMD-blue is running on the following GPU(s):
Rank 0:  [0]  Tesla P100-PCIE-16GB  56 SM_6.0 @ 1.33 GHz, 16276 MiB DRAM
Rank 1:  [1]  Tesla P100-PCIE-16GB  56 SM_6.0 @ 1.33 GHz, 16276 MiB DRAM
polymer_brush.py:012  |  system=init.read_xml(filename='init.xml')
notice(2): Reading init.xml...
notice(2): --- hoomd_xml file read summary
notice(2): 1740 positions at timestep 0
notice(2): 1740 velocities
notice(2): 1740 masses
notice(2): 1740 diameters
notice(2): 5 particle types
notice(2): 1740 particle body values
notice(2): 1580 bonds
notice(2): 1420 angles
notice(2): 3780 dihedrals
notice(2): 1740 charges
HOOMD-blue is using domain decomposition: n_x = 1 n_y = 1 n_z = 2.
1 x 1 x 2 local grid on 1 nodes
notice(2): Group "all" created containing 1740 particles
polymer_brush.py:018  |  system.replicate(nx=rep, ny=rep, nz=1)
polymer_brush.py:019  |  typeW1=group.type('W1')
notice(2): Group "type W1" created containing 3840 particles
polymer_brush.py:020  |  typeW2=group.type('W2')
*Warning*: W2 does not exist in the system, creating an empty group
notice(2): Group "type W2" created containing 0 particles
notice(2): Group "Wall" created containing 3840 particles
polymer_brush.py:022  |  typeB= group.type('B')
notice(2): Group "type B" created containing 65280 particles
polymer_brush.py:023  |  typeSolvBackBone = group.type('Solvent')
notice(2): Group "type Solvent" created containing 25600 particles
polymer_brush.py:024  |  typeC= group.type('C')
*Warning*: C does not exist in the system, creating an empty group
notice(2): Group "type C" created containing 0 particles
polymer_brush.py:025  |  typeCH3_W1=group.type('CH3_W1')
notice(2): Group "type CH3_W1" created containing 3840 particles
polymer_brush.py:026  |  typeCH3_W2=group.type('CH3_W2')
*Warning*: CH3_W2 does not exist in the system, creating an empty group
notice(2): Group "type CH3_W2" created containing 0 particles
polymer_brush.py:027  |  typeSolvTail=group.type('SolvTail')
notice(2): Group "type SolvTail" created containing 12800 particles
notice(2): Group "BCH3-particles" created containing 69120 particles
notice(2): Group "CCH3-particles" created containing 0 particles
notice(2): Group "all-solvent" created containing 38400 particles
notice(2): Group "bc-particles" created containing 69120 particles
notice(2): Group "typeAll" created containing 107520 particles
notice(2): Group "typeNPT" created containing 111360 particles
Number of polymeric particles 107520
polymer_brush.py:044  |  lj = pair.lj(r_cut=3.3)
nlist.py:1051  |          globals.neighbor_list = cell();
polymer_brush.py:052  |  lj.pair_coeff.set('Solvent','W1' ,epsilon=0 , sigma=1.3144)
polymer_brush.py:053  |  lj.pair_coeff.set('Solvent','W2' ,epsilon=0 , sigma=1.3144)
polymer_brush.py:054  |  lj.pair_coeff.set('Solvent','Solvent' ,epsilon=1.0*tether_bulk , sigma=1.3144)
polymer_brush.py:055  |  lj.pair_coeff.set('Solvent','B' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:056  |  lj.pair_coeff.set('Solvent','C' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:057  |  lj.pair_coeff.set('Solvent','CH3_W1' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:058  |  lj.pair_coeff.set('Solvent','CH3_W2' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:059  |  lj.pair_coeff.set('Solvent','SolvTail' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:060  |  lj.pair_coeff.set('B','B' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:061  |  lj.pair_coeff.set('C','C' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:062  |  lj.pair_coeff.set('B','C' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:063  |  lj.pair_coeff.set('B','CH3_W1' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:064  |  lj.pair_coeff.set('B','CH3_W2' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:065  |  lj.pair_coeff.set('C','CH3_W1' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:066  |  lj.pair_coeff.set('C','CH3_W2' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:067  |  lj.pair_coeff.set('CH3_W1','CH3_W1' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:068  |  lj.pair_coeff.set('CH3_W1','CH3_W2' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:069  |  lj.pair_coeff.set('CH3_W2' ,'CH3_W2' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:071  |  lj.pair_coeff.set('B','SolvTail' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:072  |  lj.pair_coeff.set('C','SolvTail' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:073  |  lj.pair_coeff.set('CH3_W1','SolvTail' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:074  |  lj.pair_coeff.set('CH3_W2','SolvTail' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:075  |  lj.pair_coeff.set('SolvTail' ,'SolvTail' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:077  |  lj.pair_coeff.set('B','C' ,epsilon=0.01 , sigma=2.62 , alpha=0.0)
polymer_brush.py:078  |  lj.pair_coeff.set('W1','W2' ,epsilon=0.0 , sigma=1.0)
polymer_brush.py:079  |  lj.pair_coeff.set('W1','W1' ,epsilon=0.0 , sigma=1.0)
polymer_brush.py:080  |  lj.pair_coeff.set('W1','B' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:081  |  lj.pair_coeff.set('W1','C' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:082  |  lj.pair_coeff.set('W2','W2' ,epsilon=0.0 , sigma=1.0)
polymer_brush.py:083  |  lj.pair_coeff.set('W2','B' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:084  |  lj.pair_coeff.set('W2','C' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:085  |  lj.pair_coeff.set('W1','CH3_W1' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:086  |  lj.pair_coeff.set('W1','CH3_W2' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:087  |  lj.pair_coeff.set('W1','SolvTail' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:088  |  lj.pair_coeff.set('W2','CH3_W1' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:089  |  lj.pair_coeff.set('W2','CH3_W2' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:090  |  lj.pair_coeff.set('W2','SolvTail' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:091  |  lj.pair_coeff.set('A','C' ,epsilon=0.0 , sigma=1.0 , alpha=0.0)
polymer_brush.py:093  |  slj = pair.slj(r_cut= 1.3)
notice(2): Notice: slj set d_max=2.0
polymer_brush.py:094  |  slj.set_params(mode="shift")
pair.py:886  |          pair.set_params(self, mode=mode);
polymer_brush.py:095  |  slj.pair_coeff.set('W2','Solvent', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:096  |  slj.pair_coeff.set('W1','Solvent', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:097  |  slj.pair_coeff.set('Solvent','Solvent', epsilon = 0, sigma = 1.0)
polymer_brush.py:098  |  slj.pair_coeff.set('Solvent','B', epsilon = 0, sigma = 1.0)
polymer_brush.py:099  |  slj.pair_coeff.set('Solvent','C', epsilon = 0, sigma = 1.0)
polymer_brush.py:100  |  slj.pair_coeff.set('Solvent','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:101  |  slj.pair_coeff.set('Solvent','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:102  |  slj.pair_coeff.set('Solvent','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:103  |  slj.pair_coeff.set('W1','W2', epsilon = 0 , sigma =1.0)
polymer_brush.py:104  |  slj.pair_coeff.set('W1','W1', epsilon = 0 , sigma =1.0)
polymer_brush.py:105  |  slj.pair_coeff.set('W2','W2', epsilon = 0 , sigma =1.0)
polymer_brush.py:106  |  slj.pair_coeff.set('W1','B', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:107  |  slj.pair_coeff.set('W1','C', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:108  |  slj.pair_coeff.set('W2','B', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:109  |  slj.pair_coeff.set('W2','C', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:110  |  slj.pair_coeff.set('W1','CH3_W1', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:111  |  slj.pair_coeff.set('W1','CH3_W2', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:112  |  slj.pair_coeff.set('W2','CH3_W1', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:113  |  slj.pair_coeff.set('W2','CH3_W2', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:114  |  slj.pair_coeff.set('W1','SolvTail', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:115  |  slj.pair_coeff.set('W2','SolvTail', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:116  |  slj.pair_coeff.set('B','B', epsilon = 0, sigma = 1.0)
polymer_brush.py:117  |  slj.pair_coeff.set('C','C', epsilon = 0, sigma = 1.0)
polymer_brush.py:118  |  slj.pair_coeff.set('B','C', epsilon = 0, sigma = 1.0)
polymer_brush.py:119  |  slj.pair_coeff.set('B','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:120  |  slj.pair_coeff.set('B','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:121  |  slj.pair_coeff.set('B','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:122  |  slj.pair_coeff.set('C','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:123  |  slj.pair_coeff.set('C','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:124  |  slj.pair_coeff.set('C','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:125  |  slj.pair_coeff.set('CH3_W1','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:126  |  slj.pair_coeff.set('CH3_W1','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:127  |  slj.pair_coeff.set('CH3_W2','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:128  |  slj.pair_coeff.set('CH3_W1','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:129  |  slj.pair_coeff.set('CH3_W2','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:130  |  slj.pair_coeff.set('SolvTail','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:133  |  harmonicO_O= bond.harmonic(name = 'O-O-bond')
polymer_brush.py:135  |  harmonicO_O.bond_coeff.set('oleic', k=9892.9362 , r0=0.5)
polymer_brush.py:138  |  harmonicO_O.bond_coeff.set('wall', k=9892.9362, r0=1.25)
polymer_brush.py:141  |  angleWO = angle.harmonic()
polymer_brush.py:142  |  angleWO.set_coeff('W-O' , k = 201.2878 , t0= 2.5307)
polymer_brush.py:143  |  angleWO.set_coeff('O-O' , k = 201.2878 , t0= 1.92)
polymer_brush.py:144  |  angleWO.set_coeff('kink' , k = 1000.2878 , t0= 2.8)
polymer_brush.py:150  |  dihedralField = dihedral.harmonic()
polymer_brush.py:151  |  dihedralField.set_coeff('DihedralW1' , k = 2.6838 , d=1 , n= 1)
polymer_brush.py:152  |  dihedralField.set_coeff('DihedralW2' , k = 1.4543 , d=-1 , n= 2)
polymer_brush.py:153  |  dihedralField.set_coeff('DihedralW3' , k =5.4347 , d=1 , n= 3)
polymer_brush.py:154  |  dihedralField.set_coeff('Dihedral1' , k =2.6838 , d=1 , n= 1)
polymer_brush.py:155  |  dihedralField.set_coeff('Dihedral2' , k = 1.4543 , d=-1 , n= 2)
polymer_brush.py:156  |  dihedralField.set_coeff('Dihedral3' , k =5.4347 , d=1 , n= 3)
polymer_brush.py:158  |  integrate.mode_standard(dt= 0.005)
polymer_brush.py:160  |  integrator=integrate.nve(group=typeAll , limit=0.01 )
polymer_brush.py:161  |  zeroer = update.zero_momentum(period = 1)
polymer_brush.py:164  |  run(200)
notice(2): -- Neighborlist exclusion statistics -- :
notice(2): Particles with 1 exclusions             : 20480
notice(2): Particles with 2 exclusions             : 90880
notice(2): Neighbors included by diameter          : yes
notice(2): Neighbors excluded when in the same body: no
** starting run **
Time 00:00:03 | Step 200 / 200 | TPS 130.649 | ETA 00:00:00
Average TPS: 130.646
---------
-- Neighborlist stats:
9 normal updates / 1 forced updates / 0 dangerous updates
n_neigh_min: 14 / n_neigh_max: 140 / n_neigh_avg: 91.809
shortest rebuild period: 21
-- Cell list stats:
Dimension: 20, 20, 5
n_min    : 8 / n_max: 135 / n_avg: 52.288
** run complete **
polymer_brush.py:165  |  zeroer.disable()
polymer_brush.py:167  |  integrator.disable()
polymer_brush.py:169  |  integrator=integrate.npt(group=typeAll , tau=1.0 , T= 1.0 , tauP = 1.2 , P = 0.00078 , x=False , y = False , z = True , rescale_all=True )
polymer_brush.py:172  |  run(1e4, profile=True, limit_hours=1)
** starting run **
Time 00:00:13 | Step 3657 / 10200 | TPS 345.592 | ETA 00:00:18
Time 00:00:23 | Step 7867 / 10200 | TPS 420.855 | ETA 00:00:05
Time 00:00:28 | Step 10200 / 10200 | TPS 440.341 | ETA 00:00:00
Average TPS: 395.183
Simulation: 25.3048s | 100.000% 
        Bond harmonic:      0.5843s |  2.309% 
                update bond table:  0.2894s |  1.144% 
                Self:               0.2949s |  1.165% 
        Harmonic Angle:     0.7738s |  3.058% 
        Harmonic Dihedral:  2.2679s |  8.962% 
        Integrate:          1.9408s |  7.670% 
                NPT step 1:  0.3407s |  1.347% 
                        Thermo:  0.0011s |  0.004% 
                        Self:    0.3396s |  1.342% 
                NPT step 2:  0.8292s |  3.277% 
                        Thermo:  0.4964s |  1.962% 
                        Self:    0.3328s |  1.315% 
                Net force:   0.6676s |  2.638% 
                Self:        0.1033s |  0.408% 
        Neighbor:           8.7325s | 34.509% 
                Cell:           0.1855s |  0.733% 
                        compute:  0.0584s |  0.231% 
                        init:     0.1047s |  0.414% 
                MPI allreduce:  0.0385s |  0.152% 
                compute:        4.8793s | 19.282% 
                filter:         3.3383s | 13.192% 
                head-list:      0.1885s |  0.745% 
                update-ex:      0.0236s |  0.093% 
                Self:           0.0789s |  0.312% 
        Pair lj:            3.0043s | 11.872% 
        Pair slj:           3.5743s | 14.125% 
        SFCPack:            0.0072s |  0.028% 
        comm_ghost_exch:    0.6818s |  2.694% 
                MPI send/recv:  0.1835s |  0.725% 4.56558 GiB/s 
                Self:           0.4983s |  1.969% 
        comm_ghost_update:  1.5036s |  5.942% 
                MPI send/recv:  0.7467s |  2.951% 5.83286 GiB/s 
                pack:           0.4284s |  1.693% 
                unpack:         0.2066s |  0.817% 
                Self:           0.1218s |  0.481% 
        comm_migrate:       1.4330s |  5.663% 
                MPI send/recv:  0.0674s |  0.266% 69.17196 MiB/s 
                angle:          0.3258s |  1.288% 
                        MPI send/recv:  0.0669s |  0.264% 54.80933 MiB/s 
                        Self:           0.2590s |  1.023% 
                bond:           0.2714s |  1.073% 
                        MPI send/recv:  0.0305s |  0.120% 62.66334 MiB/s 
                        Self:           0.2410s |  0.952% 
                dihedral:       0.4960s |  1.960% 
                        MPI send/recv:  0.0678s |  0.268% 235.11756 MiB/s 
                        Self:           0.4282s |  1.692% 
                pack:           0.1263s |  0.499% 
                unpack:         0.0197s |  0.078% 
                Self:           0.1264s |  0.500% 
        dist-check:         0.3074s |  1.215% 
        Self:               0.4938s |  1.952% 
---------
-- Neighborlist stats:
1172 normal updates / 34 forced updates / 0 dangerous updates
n_neigh_min: 3 / n_neigh_max: 150 / n_neigh_avg: 98.90684
shortest rebuild period: 5
-- Cell list stats:
Dimension: 20, 20, 7
n_min    : 0 / n_max: 131 / n_avg: 31.12464
** run complete **










################################################################
Running: mpirun -n 4 python polymer_brush.py --mode=gpu --user=8
HOOMD-blue 1.3.3-unknown CUDA (7.5) SINGLE MPI SSE SSE2 SSE3 
Compiled: 03/06/2016
Copyright 2009-2016 The Regents of the University of Michigan.

All publications and presentations based on HOOMD-blue, including any reports
or published results obtained, in whole or in part, with HOOMD-blue, will
acknowledge its use according to the terms posted at the time of submission on:
http://codeblue.umich.edu/hoomd-blue/citations.html
-----
You are using HOOMD-blue. Read and cite the following:
* J A Anderson, C D Lorenz, and A Travesset. "General purpose molecular dynamics
  simulations fully implemented on graphics processing units", Journal of
  Computational Physics 227 (2008) 5342--5359
and
* J Glaser, T D Nguyen, J A Anderson, P Liu, F Spiga, J A Millan, D C Morse, and
  S C Glotzer. "Strong scaling of general-purpose molecular dynamics simulations
  on GPUs", Computer Physics Communications 192 (2015) 97--107
and
* http://codeblue.umich.edu/hoomd-blue
You can save these citations to file using cite.save().
-----
notice(2): This system is not compute exclusive, using local rank to select GPUs
notice(2): Unable to identify node local rank information
notice(2): Using global rank to select GPUs
HOOMD-blue is running on the following GPU(s):
Rank 0:  [0]  Tesla P100-PCIE-16GB  56 SM_6.0 @ 1.33 GHz, 16276 MiB DRAM
Rank 1:  [1]  Tesla P100-PCIE-16GB  56 SM_6.0 @ 1.33 GHz, 16276 MiB DRAM
Rank 2:  [2]  Tesla P100-PCIE-16GB  56 SM_6.0 @ 1.33 GHz, 16276 MiB DRAM
Rank 3:  [3]  Tesla P100-PCIE-16GB  56 SM_6.0 @ 1.33 GHz, 16276 MiB DRAM
polymer_brush.py:012  |  system=init.read_xml(filename='init.xml')
notice(2): Reading init.xml...
notice(2): --- hoomd_xml file read summary
notice(2): 1740 positions at timestep 0
notice(2): 1740 velocities
notice(2): 1740 masses
notice(2): 1740 diameters
notice(2): 5 particle types
notice(2): 1740 particle body values
notice(2): 1580 bonds
notice(2): 1420 angles
notice(2): 3780 dihedrals
notice(2): 1740 charges
HOOMD-blue is using domain decomposition: n_x = 1 n_y = 1 n_z = 4.
1 x 1 x 4 local grid on 1 nodes
notice(2): Group "all" created containing 1740 particles
polymer_brush.py:018  |  system.replicate(nx=rep, ny=rep, nz=1)
polymer_brush.py:019  |  typeW1=group.type('W1')
notice(2): Group "type W1" created containing 3840 particles
polymer_brush.py:020  |  typeW2=group.type('W2')
*Warning*: W2 does not exist in the system, creating an empty group
notice(2): Group "type W2" created containing 0 particles
notice(2): Group "Wall" created containing 3840 particles
polymer_brush.py:022  |  typeB= group.type('B')
notice(2): Group "type B" created containing 65280 particles
polymer_brush.py:023  |  typeSolvBackBone = group.type('Solvent')
notice(2): Group "type Solvent" created containing 25600 particles
polymer_brush.py:024  |  typeC= group.type('C')
*Warning*: C does not exist in the system, creating an empty group
notice(2): Group "type C" created containing 0 particles
polymer_brush.py:025  |  typeCH3_W1=group.type('CH3_W1')
notice(2): Group "type CH3_W1" created containing 3840 particles
polymer_brush.py:026  |  typeCH3_W2=group.type('CH3_W2')
*Warning*: CH3_W2 does not exist in the system, creating an empty group
notice(2): Group "type CH3_W2" created containing 0 particles
polymer_brush.py:027  |  typeSolvTail=group.type('SolvTail')
notice(2): Group "type SolvTail" created containing 12800 particles
notice(2): Group "BCH3-particles" created containing 69120 particles
notice(2): Group "CCH3-particles" created containing 0 particles
notice(2): Group "all-solvent" created containing 38400 particles
notice(2): Group "bc-particles" created containing 69120 particles
notice(2): Group "typeAll" created containing 107520 particles
notice(2): Group "typeNPT" created containing 111360 particles
Number of polymeric particles 107520
polymer_brush.py:044  |  lj = pair.lj(r_cut=3.3)
nlist.py:1051  |          globals.neighbor_list = cell();
polymer_brush.py:052  |  lj.pair_coeff.set('Solvent','W1' ,epsilon=0 , sigma=1.3144)
polymer_brush.py:053  |  lj.pair_coeff.set('Solvent','W2' ,epsilon=0 , sigma=1.3144)
polymer_brush.py:054  |  lj.pair_coeff.set('Solvent','Solvent' ,epsilon=1.0*tether_bulk , sigma=1.3144)
polymer_brush.py:055  |  lj.pair_coeff.set('Solvent','B' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:056  |  lj.pair_coeff.set('Solvent','C' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:057  |  lj.pair_coeff.set('Solvent','CH3_W1' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:058  |  lj.pair_coeff.set('Solvent','CH3_W2' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:059  |  lj.pair_coeff.set('Solvent','SolvTail' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:060  |  lj.pair_coeff.set('B','B' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:061  |  lj.pair_coeff.set('C','C' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:062  |  lj.pair_coeff.set('B','C' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:063  |  lj.pair_coeff.set('B','CH3_W1' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:064  |  lj.pair_coeff.set('B','CH3_W2' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:065  |  lj.pair_coeff.set('C','CH3_W1' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:066  |  lj.pair_coeff.set('C','CH3_W2' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:067  |  lj.pair_coeff.set('CH3_W1','CH3_W1' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:068  |  lj.pair_coeff.set('CH3_W1','CH3_W2' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:069  |  lj.pair_coeff.set('CH3_W2' ,'CH3_W2' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:071  |  lj.pair_coeff.set('B','SolvTail' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:072  |  lj.pair_coeff.set('C','SolvTail' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:073  |  lj.pair_coeff.set('CH3_W1','SolvTail' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:074  |  lj.pair_coeff.set('CH3_W2','SolvTail' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:075  |  lj.pair_coeff.set('SolvTail' ,'SolvTail' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:077  |  lj.pair_coeff.set('B','C' ,epsilon=0.01 , sigma=2.62 , alpha=0.0)
polymer_brush.py:078  |  lj.pair_coeff.set('W1','W2' ,epsilon=0.0 , sigma=1.0)
polymer_brush.py:079  |  lj.pair_coeff.set('W1','W1' ,epsilon=0.0 , sigma=1.0)
polymer_brush.py:080  |  lj.pair_coeff.set('W1','B' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:081  |  lj.pair_coeff.set('W1','C' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:082  |  lj.pair_coeff.set('W2','W2' ,epsilon=0.0 , sigma=1.0)
polymer_brush.py:083  |  lj.pair_coeff.set('W2','B' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:084  |  lj.pair_coeff.set('W2','C' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:085  |  lj.pair_coeff.set('W1','CH3_W1' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:086  |  lj.pair_coeff.set('W1','CH3_W2' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:087  |  lj.pair_coeff.set('W1','SolvTail' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:088  |  lj.pair_coeff.set('W2','CH3_W1' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:089  |  lj.pair_coeff.set('W2','CH3_W2' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:090  |  lj.pair_coeff.set('W2','SolvTail' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:091  |  lj.pair_coeff.set('A','C' ,epsilon=0.0 , sigma=1.0 , alpha=0.0)
polymer_brush.py:093  |  slj = pair.slj(r_cut= 1.3)
notice(2): Notice: slj set d_max=2.0
polymer_brush.py:094  |  slj.set_params(mode="shift")
pair.py:886  |          pair.set_params(self, mode=mode);
polymer_brush.py:095  |  slj.pair_coeff.set('W2','Solvent', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:096  |  slj.pair_coeff.set('W1','Solvent', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:097  |  slj.pair_coeff.set('Solvent','Solvent', epsilon = 0, sigma = 1.0)
polymer_brush.py:098  |  slj.pair_coeff.set('Solvent','B', epsilon = 0, sigma = 1.0)
polymer_brush.py:099  |  slj.pair_coeff.set('Solvent','C', epsilon = 0, sigma = 1.0)
polymer_brush.py:100  |  slj.pair_coeff.set('Solvent','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:101  |  slj.pair_coeff.set('Solvent','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:102  |  slj.pair_coeff.set('Solvent','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:103  |  slj.pair_coeff.set('W1','W2', epsilon = 0 , sigma =1.0)
polymer_brush.py:104  |  slj.pair_coeff.set('W1','W1', epsilon = 0 , sigma =1.0)
polymer_brush.py:105  |  slj.pair_coeff.set('W2','W2', epsilon = 0 , sigma =1.0)
polymer_brush.py:106  |  slj.pair_coeff.set('W1','B', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:107  |  slj.pair_coeff.set('W1','C', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:108  |  slj.pair_coeff.set('W2','B', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:109  |  slj.pair_coeff.set('W2','C', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:110  |  slj.pair_coeff.set('W1','CH3_W1', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:111  |  slj.pair_coeff.set('W1','CH3_W2', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:112  |  slj.pair_coeff.set('W2','CH3_W1', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:113  |  slj.pair_coeff.set('W2','CH3_W2', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:114  |  slj.pair_coeff.set('W1','SolvTail', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:115  |  slj.pair_coeff.set('W2','SolvTail', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:116  |  slj.pair_coeff.set('B','B', epsilon = 0, sigma = 1.0)
polymer_brush.py:117  |  slj.pair_coeff.set('C','C', epsilon = 0, sigma = 1.0)
polymer_brush.py:118  |  slj.pair_coeff.set('B','C', epsilon = 0, sigma = 1.0)
polymer_brush.py:119  |  slj.pair_coeff.set('B','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:120  |  slj.pair_coeff.set('B','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:121  |  slj.pair_coeff.set('B','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:122  |  slj.pair_coeff.set('C','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:123  |  slj.pair_coeff.set('C','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:124  |  slj.pair_coeff.set('C','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:125  |  slj.pair_coeff.set('CH3_W1','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:126  |  slj.pair_coeff.set('CH3_W1','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:127  |  slj.pair_coeff.set('CH3_W2','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:128  |  slj.pair_coeff.set('CH3_W1','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:129  |  slj.pair_coeff.set('CH3_W2','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:130  |  slj.pair_coeff.set('SolvTail','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:133  |  harmonicO_O= bond.harmonic(name = 'O-O-bond')
polymer_brush.py:135  |  harmonicO_O.bond_coeff.set('oleic', k=9892.9362 , r0=0.5)
polymer_brush.py:138  |  harmonicO_O.bond_coeff.set('wall', k=9892.9362, r0=1.25)
polymer_brush.py:141  |  angleWO = angle.harmonic()
polymer_brush.py:142  |  angleWO.set_coeff('W-O' , k = 201.2878 , t0= 2.5307)
polymer_brush.py:143  |  angleWO.set_coeff('O-O' , k = 201.2878 , t0= 1.92)
polymer_brush.py:144  |  angleWO.set_coeff('kink' , k = 1000.2878 , t0= 2.8)
polymer_brush.py:150  |  dihedralField = dihedral.harmonic()
polymer_brush.py:151  |  dihedralField.set_coeff('DihedralW1' , k = 2.6838 , d=1 , n= 1)
polymer_brush.py:152  |  dihedralField.set_coeff('DihedralW2' , k = 1.4543 , d=-1 , n= 2)
polymer_brush.py:153  |  dihedralField.set_coeff('DihedralW3' , k =5.4347 , d=1 , n= 3)
polymer_brush.py:154  |  dihedralField.set_coeff('Dihedral1' , k =2.6838 , d=1 , n= 1)
polymer_brush.py:155  |  dihedralField.set_coeff('Dihedral2' , k = 1.4543 , d=-1 , n= 2)
polymer_brush.py:156  |  dihedralField.set_coeff('Dihedral3' , k =5.4347 , d=1 , n= 3)
polymer_brush.py:158  |  integrate.mode_standard(dt= 0.005)
polymer_brush.py:160  |  integrator=integrate.nve(group=typeAll , limit=0.01 )
polymer_brush.py:161  |  zeroer = update.zero_momentum(period = 1)
polymer_brush.py:164  |  run(200)
notice(2): -- Neighborlist exclusion statistics -- :
notice(2): Particles with 1 exclusions             : 20480
notice(2): Particles with 2 exclusions             : 90880
notice(2): Neighbors included by diameter          : yes
notice(2): Neighbors excluded when in the same body: no
** starting run **
Time 00:00:03 | Step 200 / 200 | TPS 123.577 | ETA 00:00:00
Average TPS: 123.574
---------
-- Neighborlist stats:
9 normal updates / 1 forced updates / 0 dangerous updates
n_neigh_min: 60 / n_neigh_max: 140 / n_neigh_avg: 110.134
shortest rebuild period: 21
-- Cell list stats:
Dimension: 20, 20, 3
n_min    : 8 / n_max: 169 / n_avg: 68.64
** run complete **
polymer_brush.py:165  |  zeroer.disable()
polymer_brush.py:167  |  integrator.disable()
polymer_brush.py:169  |  integrator=integrate.npt(group=typeAll , tau=1.0 , T= 1.0 , tauP = 1.2 , P = 0.00078 , x=False , y = False , z = True , rescale_all=True )
polymer_brush.py:172  |  run(1e4, profile=True, limit_hours=1)
** starting run **
Time 00:00:13 | Step 3451 / 10200 | TPS 324.823 | ETA 00:00:20
Time 00:00:23 | Step 7619 / 10200 | TPS 416.758 | ETA 00:00:06
Time 00:00:29 | Step 10200 / 10200 | TPS 419.411 | ETA 00:00:00
Average TPS: 382.213
Simulation: 26.1635s | 100.000% 
        Bond harmonic:      0.5559s |  2.125% 
                update bond table:  0.3238s |  1.238% 
                Self:               0.2320s |  0.887% 
        Harmonic Angle:     0.9913s |  3.789% 
        Harmonic Dihedral:  2.6020s |  9.945% 
        Integrate:          1.7828s |  6.814% 
                NPT step 1:  0.3300s |  1.261% 
                        Thermo:  0.0022s |  0.009% 
                        Self:    0.3278s |  1.253% 
                NPT step 2:  0.7811s |  2.985% 
                        Thermo:  0.4647s |  1.776% 
                        Self:    0.3164s |  1.209% 
                Net force:   0.5675s |  2.169% 
                Self:        0.1042s |  0.398% 
        Neighbor:           8.6109s | 32.912% 
                Cell:           0.1513s |  0.578% 
                        compute:  0.0570s |  0.218% 
                        init:     0.0804s |  0.307% 
                MPI allreduce:  0.0971s |  0.371% 
                compute:        4.7912s | 18.313% 
                filter:         3.2058s | 12.253% 
                head-list:      0.2657s |  1.015% 
                update-ex:      0.0230s |  0.088% 
                Self:           0.0767s |  0.293% 
        Pair lj:            2.8915s | 11.052% 
        Pair slj:           3.7424s | 14.304% 
        SFCPack:            0.0068s |  0.026% 
        comm_ghost_exch:    0.7984s |  3.052% 
                MPI send/recv:  0.3276s |  1.252% 2.39401 GiB/s 
                Self:           0.4708s |  1.799% 
        comm_ghost_update:  1.3995s |  5.349% 
                MPI send/recv:  0.7064s |  2.700% 5.35336 GiB/s 
                pack:           0.4124s |  1.576% 
                unpack:         0.1593s |  0.609% 
                Self:           0.1214s |  0.464% 
        comm_migrate:       2.0024s |  7.653% 
                MPI send/recv:  0.2077s |  0.794% 5.07440 MiB/s 
                angle:          0.5319s |  2.033% 
                        MPI send/recv:  0.2884s |  1.102% 2.88968 MiB/s 
                        Self:           0.2435s |  0.931% 
                bond:           0.3684s |  1.408% 
                        MPI send/recv:  0.1390s |  0.531% 3.25640 MiB/s 
                        Self:           0.2294s |  0.877% 
                dihedral:       0.6554s |  2.505% 
                        MPI send/recv:  0.2716s |  1.038% 12.90445 MiB/s 
                        Self:           0.3838s |  1.467% 
                pack:           0.1146s |  0.438% 
                unpack:         0.0197s |  0.075% 
                Self:           0.1047s |  0.400% 
        dist-check:         0.3049s |  1.165% 
        Self:               0.4748s |  1.815% 
---------
-- Neighborlist stats:
1163 normal updates / 34 forced updates / 0 dangerous updates
n_neigh_min: 3 / n_neigh_max: 147 / n_neigh_avg: 105.96649
shortest rebuild period: 5
-- Cell list stats:
Dimension: 20, 20, 4
n_min    : 0 / n_max: 130 / n_avg: 48.27562
** run complete **










################################################################
Running: mpirun -n 8 python polymer_brush.py --mode=gpu --user=8
HOOMD-blue 1.3.3-unknown CUDA (7.5) SINGLE MPI SSE SSE2 SSE3 
Compiled: 03/06/2016
Copyright 2009-2016 The Regents of the University of Michigan.

All publications and presentations based on HOOMD-blue, including any reports
or published results obtained, in whole or in part, with HOOMD-blue, will
acknowledge its use according to the terms posted at the time of submission on:
http://codeblue.umich.edu/hoomd-blue/citations.html
-----
You are using HOOMD-blue. Read and cite the following:
* J A Anderson, C D Lorenz, and A Travesset. "General purpose molecular dynamics
  simulations fully implemented on graphics processing units", Journal of
  Computational Physics 227 (2008) 5342--5359
and
* J Glaser, T D Nguyen, J A Anderson, P Liu, F Spiga, J A Millan, D C Morse, and
  S C Glotzer. "Strong scaling of general-purpose molecular dynamics simulations
  on GPUs", Computer Physics Communications 192 (2015) 97--107
and
* http://codeblue.umich.edu/hoomd-blue
You can save these citations to file using cite.save().
-----
notice(2): This system is not compute exclusive, using local rank to select GPUs
notice(2): Unable to identify node local rank information
notice(2): Using global rank to select GPUs
HOOMD-blue is running on the following GPU(s):
Rank 0:  [0]  Tesla P100-PCIE-16GB  56 SM_6.0 @ 1.33 GHz, 16276 MiB DRAM
Rank 1:  [1]  Tesla P100-PCIE-16GB  56 SM_6.0 @ 1.33 GHz, 16276 MiB DRAM
Rank 2:  [2]  Tesla P100-PCIE-16GB  56 SM_6.0 @ 1.33 GHz, 16276 MiB DRAM
Rank 3:  [3]  Tesla P100-PCIE-16GB  56 SM_6.0 @ 1.33 GHz, 16276 MiB DRAM
Rank 4:  [0]  Tesla P100-PCIE-16GB  56 SM_6.0 @ 1.33 GHz, 16276 MiB DRAM
Rank 5:  [1]  Tesla P100-PCIE-16GB  56 SM_6.0 @ 1.33 GHz, 16276 MiB DRAM
Rank 6:  [2]  Tesla P100-PCIE-16GB  56 SM_6.0 @ 1.33 GHz, 16276 MiB DRAM
Rank 7:  [3]  Tesla P100-PCIE-16GB  56 SM_6.0 @ 1.33 GHz, 16276 MiB DRAM
polymer_brush.py:012  |  system=init.read_xml(filename='init.xml')
notice(2): Reading init.xml...
notice(2): --- hoomd_xml file read summary
notice(2): 1740 positions at timestep 0
notice(2): 1740 velocities
notice(2): 1740 masses
notice(2): 1740 diameters
notice(2): 5 particle types
notice(2): 1740 particle body values
notice(2): 1580 bonds
notice(2): 1420 angles
notice(2): 3780 dihedrals
notice(2): 1740 charges
HOOMD-blue is using domain decomposition: n_x = 1 n_y = 2 n_z = 4.
1 x 2 x 4 local grid on 1 nodes
notice(2): Group "all" created containing 1740 particles
polymer_brush.py:018  |  system.replicate(nx=rep, ny=rep, nz=1)
polymer_brush.py:019  |  typeW1=group.type('W1')
notice(2): Group "type W1" created containing 3840 particles
polymer_brush.py:020  |  typeW2=group.type('W2')
*Warning*: W2 does not exist in the system, creating an empty group
notice(2): Group "type W2" created containing 0 particles
notice(2): Group "Wall" created containing 3840 particles
polymer_brush.py:022  |  typeB= group.type('B')
notice(2): Group "type B" created containing 65280 particles
polymer_brush.py:023  |  typeSolvBackBone = group.type('Solvent')
notice(2): Group "type Solvent" created containing 25600 particles
polymer_brush.py:024  |  typeC= group.type('C')
*Warning*: C does not exist in the system, creating an empty group
notice(2): Group "type C" created containing 0 particles
polymer_brush.py:025  |  typeCH3_W1=group.type('CH3_W1')
notice(2): Group "type CH3_W1" created containing 3840 particles
polymer_brush.py:026  |  typeCH3_W2=group.type('CH3_W2')
*Warning*: CH3_W2 does not exist in the system, creating an empty group
notice(2): Group "type CH3_W2" created containing 0 particles
polymer_brush.py:027  |  typeSolvTail=group.type('SolvTail')
notice(2): Group "type SolvTail" created containing 12800 particles
notice(2): Group "BCH3-particles" created containing 69120 particles
notice(2): Group "CCH3-particles" created containing 0 particles
notice(2): Group "all-solvent" created containing 38400 particles
notice(2): Group "bc-particles" created containing 69120 particles
notice(2): Group "typeAll" created containing 107520 particles
notice(2): Group "typeNPT" created containing 111360 particles
Number of polymeric particles 107520
polymer_brush.py:044  |  lj = pair.lj(r_cut=3.3)
nlist.py:1051  |          globals.neighbor_list = cell();
polymer_brush.py:052  |  lj.pair_coeff.set('Solvent','W1' ,epsilon=0 , sigma=1.3144)
polymer_brush.py:053  |  lj.pair_coeff.set('Solvent','W2' ,epsilon=0 , sigma=1.3144)
polymer_brush.py:054  |  lj.pair_coeff.set('Solvent','Solvent' ,epsilon=1.0*tether_bulk , sigma=1.3144)
polymer_brush.py:055  |  lj.pair_coeff.set('Solvent','B' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:056  |  lj.pair_coeff.set('Solvent','C' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:057  |  lj.pair_coeff.set('Solvent','CH3_W1' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:058  |  lj.pair_coeff.set('Solvent','CH3_W2' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:059  |  lj.pair_coeff.set('Solvent','SolvTail' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:060  |  lj.pair_coeff.set('B','B' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:061  |  lj.pair_coeff.set('C','C' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:062  |  lj.pair_coeff.set('B','C' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:063  |  lj.pair_coeff.set('B','CH3_W1' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:064  |  lj.pair_coeff.set('B','CH3_W2' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:065  |  lj.pair_coeff.set('C','CH3_W1' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:066  |  lj.pair_coeff.set('C','CH3_W2' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:067  |  lj.pair_coeff.set('CH3_W1','CH3_W1' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:068  |  lj.pair_coeff.set('CH3_W1','CH3_W2' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:069  |  lj.pair_coeff.set('CH3_W2' ,'CH3_W2' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:071  |  lj.pair_coeff.set('B','SolvTail' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:072  |  lj.pair_coeff.set('C','SolvTail' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:073  |  lj.pair_coeff.set('CH3_W1','SolvTail' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:074  |  lj.pair_coeff.set('CH3_W2','SolvTail' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:075  |  lj.pair_coeff.set('SolvTail' ,'SolvTail' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:077  |  lj.pair_coeff.set('B','C' ,epsilon=0.01 , sigma=2.62 , alpha=0.0)
polymer_brush.py:078  |  lj.pair_coeff.set('W1','W2' ,epsilon=0.0 , sigma=1.0)
polymer_brush.py:079  |  lj.pair_coeff.set('W1','W1' ,epsilon=0.0 , sigma=1.0)
polymer_brush.py:080  |  lj.pair_coeff.set('W1','B' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:081  |  lj.pair_coeff.set('W1','C' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:082  |  lj.pair_coeff.set('W2','W2' ,epsilon=0.0 , sigma=1.0)
polymer_brush.py:083  |  lj.pair_coeff.set('W2','B' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:084  |  lj.pair_coeff.set('W2','C' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:085  |  lj.pair_coeff.set('W1','CH3_W1' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:086  |  lj.pair_coeff.set('W1','CH3_W2' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:087  |  lj.pair_coeff.set('W1','SolvTail' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:088  |  lj.pair_coeff.set('W2','CH3_W1' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:089  |  lj.pair_coeff.set('W2','CH3_W2' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:090  |  lj.pair_coeff.set('W2','SolvTail' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:091  |  lj.pair_coeff.set('A','C' ,epsilon=0.0 , sigma=1.0 , alpha=0.0)
polymer_brush.py:093  |  slj = pair.slj(r_cut= 1.3)
notice(2): Notice: slj set d_max=2.0
polymer_brush.py:094  |  slj.set_params(mode="shift")
pair.py:886  |          pair.set_params(self, mode=mode);
polymer_brush.py:095  |  slj.pair_coeff.set('W2','Solvent', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:096  |  slj.pair_coeff.set('W1','Solvent', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:097  |  slj.pair_coeff.set('Solvent','Solvent', epsilon = 0, sigma = 1.0)
polymer_brush.py:098  |  slj.pair_coeff.set('Solvent','B', epsilon = 0, sigma = 1.0)
polymer_brush.py:099  |  slj.pair_coeff.set('Solvent','C', epsilon = 0, sigma = 1.0)
polymer_brush.py:100  |  slj.pair_coeff.set('Solvent','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:101  |  slj.pair_coeff.set('Solvent','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:102  |  slj.pair_coeff.set('Solvent','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:103  |  slj.pair_coeff.set('W1','W2', epsilon = 0 , sigma =1.0)
polymer_brush.py:104  |  slj.pair_coeff.set('W1','W1', epsilon = 0 , sigma =1.0)
polymer_brush.py:105  |  slj.pair_coeff.set('W2','W2', epsilon = 0 , sigma =1.0)
polymer_brush.py:106  |  slj.pair_coeff.set('W1','B', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:107  |  slj.pair_coeff.set('W1','C', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:108  |  slj.pair_coeff.set('W2','B', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:109  |  slj.pair_coeff.set('W2','C', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:110  |  slj.pair_coeff.set('W1','CH3_W1', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:111  |  slj.pair_coeff.set('W1','CH3_W2', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:112  |  slj.pair_coeff.set('W2','CH3_W1', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:113  |  slj.pair_coeff.set('W2','CH3_W2', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:114  |  slj.pair_coeff.set('W1','SolvTail', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:115  |  slj.pair_coeff.set('W2','SolvTail', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:116  |  slj.pair_coeff.set('B','B', epsilon = 0, sigma = 1.0)
polymer_brush.py:117  |  slj.pair_coeff.set('C','C', epsilon = 0, sigma = 1.0)
polymer_brush.py:118  |  slj.pair_coeff.set('B','C', epsilon = 0, sigma = 1.0)
polymer_brush.py:119  |  slj.pair_coeff.set('B','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:120  |  slj.pair_coeff.set('B','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:121  |  slj.pair_coeff.set('B','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:122  |  slj.pair_coeff.set('C','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:123  |  slj.pair_coeff.set('C','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:124  |  slj.pair_coeff.set('C','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:125  |  slj.pair_coeff.set('CH3_W1','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:126  |  slj.pair_coeff.set('CH3_W1','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:127  |  slj.pair_coeff.set('CH3_W2','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:128  |  slj.pair_coeff.set('CH3_W1','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:129  |  slj.pair_coeff.set('CH3_W2','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:130  |  slj.pair_coeff.set('SolvTail','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:133  |  harmonicO_O= bond.harmonic(name = 'O-O-bond')
polymer_brush.py:135  |  harmonicO_O.bond_coeff.set('oleic', k=9892.9362 , r0=0.5)
polymer_brush.py:138  |  harmonicO_O.bond_coeff.set('wall', k=9892.9362, r0=1.25)
polymer_brush.py:141  |  angleWO = angle.harmonic()
polymer_brush.py:142  |  angleWO.set_coeff('W-O' , k = 201.2878 , t0= 2.5307)
polymer_brush.py:143  |  angleWO.set_coeff('O-O' , k = 201.2878 , t0= 1.92)
polymer_brush.py:144  |  angleWO.set_coeff('kink' , k = 1000.2878 , t0= 2.8)
polymer_brush.py:150  |  dihedralField = dihedral.harmonic()
polymer_brush.py:151  |  dihedralField.set_coeff('DihedralW1' , k = 2.6838 , d=1 , n= 1)
polymer_brush.py:152  |  dihedralField.set_coeff('DihedralW2' , k = 1.4543 , d=-1 , n= 2)
polymer_brush.py:153  |  dihedralField.set_coeff('DihedralW3' , k =5.4347 , d=1 , n= 3)
polymer_brush.py:154  |  dihedralField.set_coeff('Dihedral1' , k =2.6838 , d=1 , n= 1)
polymer_brush.py:155  |  dihedralField.set_coeff('Dihedral2' , k = 1.4543 , d=-1 , n= 2)
polymer_brush.py:156  |  dihedralField.set_coeff('Dihedral3' , k =5.4347 , d=1 , n= 3)
polymer_brush.py:158  |  integrate.mode_standard(dt= 0.005)
polymer_brush.py:160  |  integrator=integrate.nve(group=typeAll , limit=0.01 )
polymer_brush.py:161  |  zeroer = update.zero_momentum(period = 1)
polymer_brush.py:164  |  run(200)
notice(2): -- Neighborlist exclusion statistics -- :
notice(2): Particles with 1 exclusions             : 20480
notice(2): Particles with 2 exclusions             : 90880
notice(2): Neighbors included by diameter          : yes
notice(2): Neighbors excluded when in the same body: no
** starting run **
Time 00:00:06 | Step 200 / 200 | TPS 99.7307 | ETA 00:00:00
Average TPS: 99.7286
---------
-- Neighborlist stats:
9 normal updates / 1 forced updates / 0 dangerous updates
n_neigh_min: 60 / n_neigh_max: 140 / n_neigh_avg: 110.108
shortest rebuild period: 21
-- Cell list stats:
Dimension: 20, 11, 3
n_min    : 8 / n_max: 189 / n_avg: 74.4727
** run complete **
polymer_brush.py:165  |  zeroer.disable()
polymer_brush.py:167  |  integrator.disable()
polymer_brush.py:169  |  integrator=integrate.npt(group=typeAll , tau=1.0 , T= 1.0 , tauP = 1.2 , P = 0.00078 , x=False , y = False , z = True , rescale_all=True )
polymer_brush.py:172  |  run(1e4, profile=True, limit_hours=1)
** starting run **
Time 00:00:16 | Step 2439 / 10200 | TPS 223.875 | ETA 00:00:34
Time 00:00:26 | Step 5070 / 10200 | TPS 262.826 | ETA 00:00:19
Time 00:00:36 | Step 7738 / 10200 | TPS 266.76 | ETA 00:00:09
Time 00:00:46 | Step 10200 / 10200 | TPS 265.36 | ETA 00:00:00
Average TPS: 254.511
Simulation: 39.2910s | 100.000% 
        Bond harmonic:      1.1606s |  2.954% 
                update bond table:  0.5947s |  1.514% 
                Self:               0.5659s |  1.440% 
        Harmonic Angle:     1.9518s |  4.968% 
        Harmonic Dihedral:  2.5933s |  6.600% 
        Integrate:          6.2563s | 15.923% 
                NPT step 1:  0.3552s |  0.904% 
                        Thermo:  0.0040s |  0.010% 
                        Self:    0.3513s |  0.894% 
                NPT step 2:  4.0569s | 10.325% 
                        Thermo:  1.4266s |  3.631% 
                        Self:    2.6303s |  6.694% 
                Net force:   1.6223s |  4.129% 
                Self:        0.2219s |  0.565% 
        Neighbor:           6.4975s | 16.537% 
                Cell:           0.5549s |  1.412% 
                        compute:  0.3275s |  0.834% 
                        init:     0.1870s |  0.476% 
                        Self:     0.0404s |  0.103% 
                MPI allreduce:  0.7135s |  1.816% 
                compute:        3.2894s |  8.372% 
                filter:         0.8873s |  2.258% 
                head-list:      0.5906s |  1.503% 
                update-ex:      0.3156s |  0.803% 
                Self:           0.1462s |  0.372% 
        Pair lj:            3.0646s |  7.800% 
        Pair slj:           3.3285s |  8.471% 
        SFCPack:            0.0093s |  0.024% 
        comm_ghost_exch:    1.6781s |  4.271% 
                MPI send/recv:  0.5406s |  1.376% 1.47249 GiB/s 
                Self:           1.1375s |  2.895% 
        comm_ghost_update:  3.8190s |  9.720% 
                MPI send/recv:  1.2036s |  3.063% 4.09219 GiB/s 
                pack:           1.5677s |  3.990% 
                unpack:         0.8965s |  2.282% 
                Self:           0.1512s |  0.385% 
        comm_migrate:       5.6192s | 14.302% 
                MPI send/recv:  0.2974s |  0.757% 30.50801 MiB/s 
                angle:          1.4996s |  3.817% 
                        MPI send/recv:  0.4416s |  1.124% 22.15665 MiB/s 
                        Self:           1.0580s |  2.693% 
                bond:           1.2865s |  3.274% 
                        MPI send/recv:  0.2287s |  0.582% 19.34923 MiB/s 
                        Self:           1.0578s |  2.692% 
                dihedral:       1.6814s |  4.279% 
                        MPI send/recv:  0.4171s |  1.062% 124.15214 MiB/s 
                        Self:           1.2644s |  3.218% 
                pack:           0.3280s |  0.835% 
                unpack:         0.1537s |  0.391% 
                Self:           0.3725s |  0.948% 
        dist-check:         2.3527s |  5.988% 
        Self:               0.9601s |  2.444% 
---------
-- Neighborlist stats:
1160 normal updates / 34 forced updates / 0 dangerous updates
n_neigh_min: 3 / n_neigh_max: 145 / n_neigh_avg: 105.95040
shortest rebuild period: 6
-- Cell list stats:
Dimension: 20, 11, 4
n_min    : 0 / n_max: 154 / n_avg: 52.70909
** run complete **










################################################################
Running: mpirun -n 16 python polymer_brush.py --mode=gpu --user=8
HOOMD-blue 1.3.3-unknown CUDA (7.5) SINGLE MPI SSE SSE2 SSE3 
Compiled: 03/06/2016
Copyright 2009-2016 The Regents of the University of Michigan.

All publications and presentations based on HOOMD-blue, including any reports
or published results obtained, in whole or in part, with HOOMD-blue, will
acknowledge its use according to the terms posted at the time of submission on:
http://codeblue.umich.edu/hoomd-blue/citations.html
-----
You are using HOOMD-blue. Read and cite the following:
* J A Anderson, C D Lorenz, and A Travesset. "General purpose molecular dynamics
  simulations fully implemented on graphics processing units", Journal of
  Computational Physics 227 (2008) 5342--5359
and
* J Glaser, T D Nguyen, J A Anderson, P Liu, F Spiga, J A Millan, D C Morse, and
  S C Glotzer. "Strong scaling of general-purpose molecular dynamics simulations
  on GPUs", Computer Physics Communications 192 (2015) 97--107
and
* http://codeblue.umich.edu/hoomd-blue
You can save these citations to file using cite.save().
-----
notice(2): This system is not compute exclusive, using local rank to select GPUs
notice(2): Unable to identify node local rank information
notice(2): Using global rank to select GPUs
HOOMD-blue is running on the following GPU(s):
Rank 0:  [0]  Tesla P100-PCIE-16GB  56 SM_6.0 @ 1.33 GHz, 16276 MiB DRAM
Rank 1:  [1]  Tesla P100-PCIE-16GB  56 SM_6.0 @ 1.33 GHz, 16276 MiB DRAM
Rank 2:  [2]  Tesla P100-PCIE-16GB  56 SM_6.0 @ 1.33 GHz, 16276 MiB DRAM
Rank 3:  [3]  Tesla P100-PCIE-16GB  56 SM_6.0 @ 1.33 GHz, 16276 MiB DRAM
Rank 4:  [0]  Tesla P100-PCIE-16GB  56 SM_6.0 @ 1.33 GHz, 16276 MiB DRAM
Rank 5:  [1]  Tesla P100-PCIE-16GB  56 SM_6.0 @ 1.33 GHz, 16276 MiB DRAM
Rank 6:  [2]  Tesla P100-PCIE-16GB  56 SM_6.0 @ 1.33 GHz, 16276 MiB DRAM
Rank 7:  [3]  Tesla P100-PCIE-16GB  56 SM_6.0 @ 1.33 GHz, 16276 MiB DRAM
Rank 8:  [0]  Tesla P100-PCIE-16GB  56 SM_6.0 @ 1.33 GHz, 16276 MiB DRAM
Rank 9:  [1]  Tesla P100-PCIE-16GB  56 SM_6.0 @ 1.33 GHz, 16276 MiB DRAM
Rank 10:  [2]  Tesla P100-PCIE-16GB  56 SM_6.0 @ 1.33 GHz, 16276 MiB DRAM
Rank 11:  [3]  Tesla P100-PCIE-16GB  56 SM_6.0 @ 1.33 GHz, 16276 MiB DRAM
Rank 12:  [0]  Tesla P100-PCIE-16GB  56 SM_6.0 @ 1.33 GHz, 16276 MiB DRAM
Rank 13:  [1]  Tesla P100-PCIE-16GB  56 SM_6.0 @ 1.33 GHz, 16276 MiB DRAM
Rank 14:  [2]  Tesla P100-PCIE-16GB  56 SM_6.0 @ 1.33 GHz, 16276 MiB DRAM
Rank 15:  [3]  Tesla P100-PCIE-16GB  56 SM_6.0 @ 1.33 GHz, 16276 MiB DRAM
polymer_brush.py:012  |  system=init.read_xml(filename='init.xml')
notice(2): Reading init.xml...
notice(2): --- hoomd_xml file read summary
notice(2): 1740 positions at timestep 0
notice(2): 1740 velocities
notice(2): 1740 masses
notice(2): 1740 diameters
notice(2): 5 particle types
notice(2): 1740 particle body values
notice(2): 1580 bonds
notice(2): 1420 angles
notice(2): 3780 dihedrals
notice(2): 1740 charges
HOOMD-blue is using domain decomposition: n_x = 2 n_y = 2 n_z = 4.
2 x 2 x 4 local grid on 1 nodes
notice(2): Group "all" created containing 1740 particles
polymer_brush.py:018  |  system.replicate(nx=rep, ny=rep, nz=1)
polymer_brush.py:019  |  typeW1=group.type('W1')
notice(2): Group "type W1" created containing 3840 particles
polymer_brush.py:020  |  typeW2=group.type('W2')
*Warning*: W2 does not exist in the system, creating an empty group
notice(2): Group "type W2" created containing 0 particles
notice(2): Group "Wall" created containing 3840 particles
polymer_brush.py:022  |  typeB= group.type('B')
notice(2): Group "type B" created containing 65280 particles
polymer_brush.py:023  |  typeSolvBackBone = group.type('Solvent')
notice(2): Group "type Solvent" created containing 25600 particles
polymer_brush.py:024  |  typeC= group.type('C')
*Warning*: C does not exist in the system, creating an empty group
notice(2): Group "type C" created containing 0 particles
polymer_brush.py:025  |  typeCH3_W1=group.type('CH3_W1')
notice(2): Group "type CH3_W1" created containing 3840 particles
polymer_brush.py:026  |  typeCH3_W2=group.type('CH3_W2')
*Warning*: CH3_W2 does not exist in the system, creating an empty group
notice(2): Group "type CH3_W2" created containing 0 particles
polymer_brush.py:027  |  typeSolvTail=group.type('SolvTail')
notice(2): Group "type SolvTail" created containing 12800 particles
notice(2): Group "BCH3-particles" created containing 69120 particles
notice(2): Group "CCH3-particles" created containing 0 particles
notice(2): Group "all-solvent" created containing 38400 particles
notice(2): Group "bc-particles" created containing 69120 particles
notice(2): Group "typeAll" created containing 107520 particles
notice(2): Group "typeNPT" created containing 111360 particles
Number of polymeric particles 107520
polymer_brush.py:044  |  lj = pair.lj(r_cut=3.3)
nlist.py:1051  |          globals.neighbor_list = cell();
polymer_brush.py:052  |  lj.pair_coeff.set('Solvent','W1' ,epsilon=0 , sigma=1.3144)
polymer_brush.py:053  |  lj.pair_coeff.set('Solvent','W2' ,epsilon=0 , sigma=1.3144)
polymer_brush.py:054  |  lj.pair_coeff.set('Solvent','Solvent' ,epsilon=1.0*tether_bulk , sigma=1.3144)
polymer_brush.py:055  |  lj.pair_coeff.set('Solvent','B' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:056  |  lj.pair_coeff.set('Solvent','C' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:057  |  lj.pair_coeff.set('Solvent','CH3_W1' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:058  |  lj.pair_coeff.set('Solvent','CH3_W2' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:059  |  lj.pair_coeff.set('Solvent','SolvTail' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:060  |  lj.pair_coeff.set('B','B' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:061  |  lj.pair_coeff.set('C','C' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:062  |  lj.pair_coeff.set('B','C' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:063  |  lj.pair_coeff.set('B','CH3_W1' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:064  |  lj.pair_coeff.set('B','CH3_W2' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:065  |  lj.pair_coeff.set('C','CH3_W1' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:066  |  lj.pair_coeff.set('C','CH3_W2' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:067  |  lj.pair_coeff.set('CH3_W1','CH3_W1' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:068  |  lj.pair_coeff.set('CH3_W1','CH3_W2' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:069  |  lj.pair_coeff.set('CH3_W2' ,'CH3_W2' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:071  |  lj.pair_coeff.set('B','SolvTail' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:072  |  lj.pair_coeff.set('C','SolvTail' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:073  |  lj.pair_coeff.set('CH3_W1','SolvTail' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:074  |  lj.pair_coeff.set('CH3_W2','SolvTail' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:075  |  lj.pair_coeff.set('SolvTail' ,'SolvTail' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:077  |  lj.pair_coeff.set('B','C' ,epsilon=0.01 , sigma=2.62 , alpha=0.0)
polymer_brush.py:078  |  lj.pair_coeff.set('W1','W2' ,epsilon=0.0 , sigma=1.0)
polymer_brush.py:079  |  lj.pair_coeff.set('W1','W1' ,epsilon=0.0 , sigma=1.0)
polymer_brush.py:080  |  lj.pair_coeff.set('W1','B' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:081  |  lj.pair_coeff.set('W1','C' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:082  |  lj.pair_coeff.set('W2','W2' ,epsilon=0.0 , sigma=1.0)
polymer_brush.py:083  |  lj.pair_coeff.set('W2','B' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:084  |  lj.pair_coeff.set('W2','C' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:085  |  lj.pair_coeff.set('W1','CH3_W1' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:086  |  lj.pair_coeff.set('W1','CH3_W2' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:087  |  lj.pair_coeff.set('W1','SolvTail' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:088  |  lj.pair_coeff.set('W2','CH3_W1' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:089  |  lj.pair_coeff.set('W2','CH3_W2' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:090  |  lj.pair_coeff.set('W2','SolvTail' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:091  |  lj.pair_coeff.set('A','C' ,epsilon=0.0 , sigma=1.0 , alpha=0.0)
polymer_brush.py:093  |  slj = pair.slj(r_cut= 1.3)
notice(2): Notice: slj set d_max=2.0
polymer_brush.py:094  |  slj.set_params(mode="shift")
pair.py:886  |          pair.set_params(self, mode=mode);
polymer_brush.py:095  |  slj.pair_coeff.set('W2','Solvent', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:096  |  slj.pair_coeff.set('W1','Solvent', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:097  |  slj.pair_coeff.set('Solvent','Solvent', epsilon = 0, sigma = 1.0)
polymer_brush.py:098  |  slj.pair_coeff.set('Solvent','B', epsilon = 0, sigma = 1.0)
polymer_brush.py:099  |  slj.pair_coeff.set('Solvent','C', epsilon = 0, sigma = 1.0)
polymer_brush.py:100  |  slj.pair_coeff.set('Solvent','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:101  |  slj.pair_coeff.set('Solvent','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:102  |  slj.pair_coeff.set('Solvent','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:103  |  slj.pair_coeff.set('W1','W2', epsilon = 0 , sigma =1.0)
polymer_brush.py:104  |  slj.pair_coeff.set('W1','W1', epsilon = 0 , sigma =1.0)
polymer_brush.py:105  |  slj.pair_coeff.set('W2','W2', epsilon = 0 , sigma =1.0)
polymer_brush.py:106  |  slj.pair_coeff.set('W1','B', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:107  |  slj.pair_coeff.set('W1','C', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:108  |  slj.pair_coeff.set('W2','B', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:109  |  slj.pair_coeff.set('W2','C', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:110  |  slj.pair_coeff.set('W1','CH3_W1', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:111  |  slj.pair_coeff.set('W1','CH3_W2', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:112  |  slj.pair_coeff.set('W2','CH3_W1', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:113  |  slj.pair_coeff.set('W2','CH3_W2', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:114  |  slj.pair_coeff.set('W1','SolvTail', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:115  |  slj.pair_coeff.set('W2','SolvTail', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:116  |  slj.pair_coeff.set('B','B', epsilon = 0, sigma = 1.0)
polymer_brush.py:117  |  slj.pair_coeff.set('C','C', epsilon = 0, sigma = 1.0)
polymer_brush.py:118  |  slj.pair_coeff.set('B','C', epsilon = 0, sigma = 1.0)
polymer_brush.py:119  |  slj.pair_coeff.set('B','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:120  |  slj.pair_coeff.set('B','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:121  |  slj.pair_coeff.set('B','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:122  |  slj.pair_coeff.set('C','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:123  |  slj.pair_coeff.set('C','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:124  |  slj.pair_coeff.set('C','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:125  |  slj.pair_coeff.set('CH3_W1','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:126  |  slj.pair_coeff.set('CH3_W1','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:127  |  slj.pair_coeff.set('CH3_W2','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:128  |  slj.pair_coeff.set('CH3_W1','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:129  |  slj.pair_coeff.set('CH3_W2','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:130  |  slj.pair_coeff.set('SolvTail','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:133  |  harmonicO_O= bond.harmonic(name = 'O-O-bond')
polymer_brush.py:135  |  harmonicO_O.bond_coeff.set('oleic', k=9892.9362 , r0=0.5)
polymer_brush.py:138  |  harmonicO_O.bond_coeff.set('wall', k=9892.9362, r0=1.25)
polymer_brush.py:141  |  angleWO = angle.harmonic()
polymer_brush.py:142  |  angleWO.set_coeff('W-O' , k = 201.2878 , t0= 2.5307)
polymer_brush.py:143  |  angleWO.set_coeff('O-O' , k = 201.2878 , t0= 1.92)
polymer_brush.py:144  |  angleWO.set_coeff('kink' , k = 1000.2878 , t0= 2.8)
polymer_brush.py:150  |  dihedralField = dihedral.harmonic()
polymer_brush.py:151  |  dihedralField.set_coeff('DihedralW1' , k = 2.6838 , d=1 , n= 1)
polymer_brush.py:152  |  dihedralField.set_coeff('DihedralW2' , k = 1.4543 , d=-1 , n= 2)
polymer_brush.py:153  |  dihedralField.set_coeff('DihedralW3' , k =5.4347 , d=1 , n= 3)
polymer_brush.py:154  |  dihedralField.set_coeff('Dihedral1' , k =2.6838 , d=1 , n= 1)
polymer_brush.py:155  |  dihedralField.set_coeff('Dihedral2' , k = 1.4543 , d=-1 , n= 2)
polymer_brush.py:156  |  dihedralField.set_coeff('Dihedral3' , k =5.4347 , d=1 , n= 3)
polymer_brush.py:158  |  integrate.mode_standard(dt= 0.005)
polymer_brush.py:160  |  integrator=integrate.nve(group=typeAll , limit=0.01 )
polymer_brush.py:161  |  zeroer = update.zero_momentum(period = 1)
polymer_brush.py:164  |  run(200)
*Warning*: compute.thermo: given a group with 0 degrees of freedom.
            overriding ndof=1 to avoid divide by 0 errors
notice(2): -- Neighborlist exclusion statistics -- :
notice(2): Particles with 1 exclusions             : 20480
notice(2): Particles with 2 exclusions             : 90880
notice(2): Neighbors included by diameter          : yes
notice(2): Neighbors excluded when in the same body: no
** starting run **
Time 00:00:14 | Step 200 / 200 | TPS 52.7288 | ETA 00:00:00
Average TPS: 52.7281
---------
-- Neighborlist stats:
9 normal updates / 1 forced updates / 0 dangerous updates
n_neigh_min: 60 / n_neigh_max: 140 / n_neigh_avg: 110.11
shortest rebuild period: 21
-- Cell list stats:
Dimension: 11, 11, 3
n_min    : 8 / n_max: 205 / n_avg: 80.4738
** run complete **
polymer_brush.py:165  |  zeroer.disable()
polymer_brush.py:167  |  integrator.disable()
polymer_brush.py:169  |  integrator=integrate.npt(group=typeAll , tau=1.0 , T= 1.0 , tauP = 1.2 , P = 0.00078 , x=False , y = False , z = True , rescale_all=True )
polymer_brush.py:172  |  run(1e4, profile=True, limit_hours=1)
** starting run **
Time 00:00:24 | Step 1606 / 10200 | TPS 140.548 | ETA 00:01:01
Time 00:00:34 | Step 3177 / 10200 | TPS 157.042 | ETA 00:00:44
Time 00:00:44 | Step 4801 / 10200 | TPS 162.383 | ETA 00:00:33
Time 00:00:54 | Step 6458 / 10200 | TPS 165.536 | ETA 00:00:22
Time 00:01:04 | Step 8079 / 10200 | TPS 162.064 | ETA 00:00:13
Time 00:01:14 | Step 9728 / 10200 | TPS 164.76 | ETA 00:00:02
Time 00:01:17 | Step 10200 / 10200 | TPS 166.229 | ETA 00:00:00
Average TPS: 159.062
Simulation: 62.8685s | 100.000% 
        Bond harmonic:      2.1415s |  3.406% 
                update bond table:  0.9870s |  1.570% 
                Self:               1.1545s |  1.836% 
        Harmonic Angle:     3.4583s |  5.501% 
        Harmonic Dihedral:  4.1547s |  6.609% 
        Integrate:         12.5844s | 20.017% 
                NPT step 1:  0.3769s |  0.600% 
                        Thermo:  0.0107s |  0.017% 
                        Self:    0.3662s |  0.582% 
                NPT step 2:  8.5515s | 13.602% 
                        Thermo:  2.8584s |  4.547% 
                        Self:    5.6931s |  9.056% 
                Net force:   3.1449s |  5.002% 
                Self:        0.5112s |  0.813% 
        Neighbor:           7.9903s | 12.710% 
                Cell:           0.7529s |  1.198% 
                        compute:  0.3705s |  0.589% 
                        init:     0.3167s |  0.504% 
                        Self:     0.0657s |  0.105% 
                MPI allreduce:  2.6087s |  4.149% 
                compute:        2.3930s |  3.806% 
                filter:         0.6775s |  1.078% 
                head-list:      0.7718s |  1.228% 
                update-ex:      0.3440s |  0.547% 
                Self:           0.4424s |  0.704% 
        Pair lj:            3.8046s |  6.052% 
        Pair slj:           4.1454s |  6.594% 
        SFCPack:            0.0141s |  0.022% 
        comm_ghost_exch:    3.0007s |  4.773% 
                MPI send/recv:  1.0910s |  1.735% 576.23157 MiB/s 
                Self:           1.9097s |  3.038% 
        comm_ghost_update:  6.1317s |  9.753% 
                MPI send/recv:  1.2970s |  2.063% 3.13065 GiB/s 
                pack:           2.8545s |  4.540% 
                unpack:         1.8183s |  2.892% 
                Self:           0.1619s |  0.258% 
        comm_migrate:       9.8083s | 15.601% 
                MPI send/recv:  0.4152s |  0.660% 18.63671 MiB/s 
                angle:          2.6379s |  4.196% 
                        MPI send/recv:  0.7846s |  1.248% 10.92301 MiB/s 
                        Self:           1.8533s |  2.948% 
                bond:           2.4669s |  3.924% 
                        MPI send/recv:  0.6350s |  1.010% 6.10554 MiB/s 
                        Self:           1.8318s |  2.914% 
                dihedral:       2.8604s |  4.550% 
                        MPI send/recv:  0.7658s |  1.218% 59.42062 MiB/s 
                        Self:           2.0946s |  3.332% 
                pack:           0.6474s |  1.030% 
                unpack:         0.2939s |  0.467% 
                Self:           0.4865s |  0.774% 
        dist-check:         4.6280s |  7.361% 
        Self:               1.0065s |  1.601% 
---------
-- Neighborlist stats:
1161 normal updates / 34 forced updates / 0 dangerous updates
n_neigh_min: 0 / n_neigh_max: 145 / n_neigh_avg: 105.66028
shortest rebuild period: 6
-- Cell list stats:
Dimension: 11, 11, 4
n_min    : 0 / n_max: 156 / n_avg: 57.11364
** run complete **










################################################################
GPU n=16
################################################################
################################################################
Running: mpirun -n 1 python polymer_brush.py --mode=gpu --user=16
HOOMD-blue 1.3.3-unknown CUDA (7.5) SINGLE MPI SSE SSE2 SSE3 
Compiled: 03/06/2016
Copyright 2009-2016 The Regents of the University of Michigan.

All publications and presentations based on HOOMD-blue, including any reports
or published results obtained, in whole or in part, with HOOMD-blue, will
acknowledge its use according to the terms posted at the time of submission on:
http://codeblue.umich.edu/hoomd-blue/citations.html
-----
You are using HOOMD-blue. Read and cite the following:
* J A Anderson, C D Lorenz, and A Travesset. "General purpose molecular dynamics
  simulations fully implemented on graphics processing units", Journal of
  Computational Physics 227 (2008) 5342--5359
and
* J Glaser, T D Nguyen, J A Anderson, P Liu, F Spiga, J A Millan, D C Morse, and
  S C Glotzer. "Strong scaling of general-purpose molecular dynamics simulations
  on GPUs", Computer Physics Communications 192 (2015) 97--107
and
* http://codeblue.umich.edu/hoomd-blue
You can save these citations to file using cite.save().
-----
notice(2): This system is not compute exclusive, using local rank to select GPUs
notice(2): Unable to identify node local rank information
notice(2): Using global rank to select GPUs
HOOMD-blue is running on the following GPU(s):
 [0]  Tesla P100-PCIE-16GB  56 SM_6.0 @ 1.33 GHz, 16276 MiB DRAM
polymer_brush.py:012  |  system=init.read_xml(filename='init.xml')
notice(2): Reading init.xml...
notice(2): --- hoomd_xml file read summary
notice(2): 1740 positions at timestep 0
notice(2): 1740 velocities
notice(2): 1740 masses
notice(2): 1740 diameters
notice(2): 5 particle types
notice(2): 1740 particle body values
notice(2): 1580 bonds
notice(2): 1420 angles
notice(2): 3780 dihedrals
notice(2): 1740 charges
notice(2): Group "all" created containing 1740 particles
polymer_brush.py:018  |  system.replicate(nx=rep, ny=rep, nz=1)
polymer_brush.py:019  |  typeW1=group.type('W1')
notice(2): Group "type W1" created containing 15360 particles
polymer_brush.py:020  |  typeW2=group.type('W2')
*Warning*: W2 does not exist in the system, creating an empty group
notice(2): Group "type W2" created containing 0 particles
notice(2): Group "Wall" created containing 15360 particles
polymer_brush.py:022  |  typeB= group.type('B')
notice(2): Group "type B" created containing 261120 particles
polymer_brush.py:023  |  typeSolvBackBone = group.type('Solvent')
notice(2): Group "type Solvent" created containing 102400 particles
polymer_brush.py:024  |  typeC= group.type('C')
*Warning*: C does not exist in the system, creating an empty group
notice(2): Group "type C" created containing 0 particles
polymer_brush.py:025  |  typeCH3_W1=group.type('CH3_W1')
notice(2): Group "type CH3_W1" created containing 15360 particles
polymer_brush.py:026  |  typeCH3_W2=group.type('CH3_W2')
*Warning*: CH3_W2 does not exist in the system, creating an empty group
notice(2): Group "type CH3_W2" created containing 0 particles
polymer_brush.py:027  |  typeSolvTail=group.type('SolvTail')
notice(2): Group "type SolvTail" created containing 51200 particles
notice(2): Group "BCH3-particles" created containing 276480 particles
notice(2): Group "CCH3-particles" created containing 0 particles
notice(2): Group "all-solvent" created containing 153600 particles
notice(2): Group "bc-particles" created containing 276480 particles
notice(2): Group "typeAll" created containing 430080 particles
notice(2): Group "typeNPT" created containing 445440 particles
Number of polymeric particles 430080
polymer_brush.py:044  |  lj = pair.lj(r_cut=3.3)
nlist.py:1051  |          globals.neighbor_list = cell();
polymer_brush.py:052  |  lj.pair_coeff.set('Solvent','W1' ,epsilon=0 , sigma=1.3144)
polymer_brush.py:053  |  lj.pair_coeff.set('Solvent','W2' ,epsilon=0 , sigma=1.3144)
polymer_brush.py:054  |  lj.pair_coeff.set('Solvent','Solvent' ,epsilon=1.0*tether_bulk , sigma=1.3144)
polymer_brush.py:055  |  lj.pair_coeff.set('Solvent','B' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:056  |  lj.pair_coeff.set('Solvent','C' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:057  |  lj.pair_coeff.set('Solvent','CH3_W1' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:058  |  lj.pair_coeff.set('Solvent','CH3_W2' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:059  |  lj.pair_coeff.set('Solvent','SolvTail' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:060  |  lj.pair_coeff.set('B','B' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:061  |  lj.pair_coeff.set('C','C' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:062  |  lj.pair_coeff.set('B','C' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:063  |  lj.pair_coeff.set('B','CH3_W1' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:064  |  lj.pair_coeff.set('B','CH3_W2' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:065  |  lj.pair_coeff.set('C','CH3_W1' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:066  |  lj.pair_coeff.set('C','CH3_W2' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:067  |  lj.pair_coeff.set('CH3_W1','CH3_W1' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:068  |  lj.pair_coeff.set('CH3_W1','CH3_W2' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:069  |  lj.pair_coeff.set('CH3_W2' ,'CH3_W2' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:071  |  lj.pair_coeff.set('B','SolvTail' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:072  |  lj.pair_coeff.set('C','SolvTail' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:073  |  lj.pair_coeff.set('CH3_W1','SolvTail' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:074  |  lj.pair_coeff.set('CH3_W2','SolvTail' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:075  |  lj.pair_coeff.set('SolvTail' ,'SolvTail' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:077  |  lj.pair_coeff.set('B','C' ,epsilon=0.01 , sigma=2.62 , alpha=0.0)
polymer_brush.py:078  |  lj.pair_coeff.set('W1','W2' ,epsilon=0.0 , sigma=1.0)
polymer_brush.py:079  |  lj.pair_coeff.set('W1','W1' ,epsilon=0.0 , sigma=1.0)
polymer_brush.py:080  |  lj.pair_coeff.set('W1','B' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:081  |  lj.pair_coeff.set('W1','C' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:082  |  lj.pair_coeff.set('W2','W2' ,epsilon=0.0 , sigma=1.0)
polymer_brush.py:083  |  lj.pair_coeff.set('W2','B' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:084  |  lj.pair_coeff.set('W2','C' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:085  |  lj.pair_coeff.set('W1','CH3_W1' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:086  |  lj.pair_coeff.set('W1','CH3_W2' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:087  |  lj.pair_coeff.set('W1','SolvTail' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:088  |  lj.pair_coeff.set('W2','CH3_W1' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:089  |  lj.pair_coeff.set('W2','CH3_W2' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:090  |  lj.pair_coeff.set('W2','SolvTail' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:091  |  lj.pair_coeff.set('A','C' ,epsilon=0.0 , sigma=1.0 , alpha=0.0)
polymer_brush.py:093  |  slj = pair.slj(r_cut= 1.3)
notice(2): Notice: slj set d_max=2.0
polymer_brush.py:094  |  slj.set_params(mode="shift")
pair.py:886  |          pair.set_params(self, mode=mode);
polymer_brush.py:095  |  slj.pair_coeff.set('W2','Solvent', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:096  |  slj.pair_coeff.set('W1','Solvent', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:097  |  slj.pair_coeff.set('Solvent','Solvent', epsilon = 0, sigma = 1.0)
polymer_brush.py:098  |  slj.pair_coeff.set('Solvent','B', epsilon = 0, sigma = 1.0)
polymer_brush.py:099  |  slj.pair_coeff.set('Solvent','C', epsilon = 0, sigma = 1.0)
polymer_brush.py:100  |  slj.pair_coeff.set('Solvent','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:101  |  slj.pair_coeff.set('Solvent','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:102  |  slj.pair_coeff.set('Solvent','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:103  |  slj.pair_coeff.set('W1','W2', epsilon = 0 , sigma =1.0)
polymer_brush.py:104  |  slj.pair_coeff.set('W1','W1', epsilon = 0 , sigma =1.0)
polymer_brush.py:105  |  slj.pair_coeff.set('W2','W2', epsilon = 0 , sigma =1.0)
polymer_brush.py:106  |  slj.pair_coeff.set('W1','B', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:107  |  slj.pair_coeff.set('W1','C', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:108  |  slj.pair_coeff.set('W2','B', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:109  |  slj.pair_coeff.set('W2','C', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:110  |  slj.pair_coeff.set('W1','CH3_W1', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:111  |  slj.pair_coeff.set('W1','CH3_W2', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:112  |  slj.pair_coeff.set('W2','CH3_W1', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:113  |  slj.pair_coeff.set('W2','CH3_W2', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:114  |  slj.pair_coeff.set('W1','SolvTail', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:115  |  slj.pair_coeff.set('W2','SolvTail', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:116  |  slj.pair_coeff.set('B','B', epsilon = 0, sigma = 1.0)
polymer_brush.py:117  |  slj.pair_coeff.set('C','C', epsilon = 0, sigma = 1.0)
polymer_brush.py:118  |  slj.pair_coeff.set('B','C', epsilon = 0, sigma = 1.0)
polymer_brush.py:119  |  slj.pair_coeff.set('B','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:120  |  slj.pair_coeff.set('B','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:121  |  slj.pair_coeff.set('B','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:122  |  slj.pair_coeff.set('C','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:123  |  slj.pair_coeff.set('C','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:124  |  slj.pair_coeff.set('C','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:125  |  slj.pair_coeff.set('CH3_W1','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:126  |  slj.pair_coeff.set('CH3_W1','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:127  |  slj.pair_coeff.set('CH3_W2','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:128  |  slj.pair_coeff.set('CH3_W1','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:129  |  slj.pair_coeff.set('CH3_W2','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:130  |  slj.pair_coeff.set('SolvTail','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:133  |  harmonicO_O= bond.harmonic(name = 'O-O-bond')
polymer_brush.py:135  |  harmonicO_O.bond_coeff.set('oleic', k=9892.9362 , r0=0.5)
polymer_brush.py:138  |  harmonicO_O.bond_coeff.set('wall', k=9892.9362, r0=1.25)
polymer_brush.py:141  |  angleWO = angle.harmonic()
polymer_brush.py:142  |  angleWO.set_coeff('W-O' , k = 201.2878 , t0= 2.5307)
polymer_brush.py:143  |  angleWO.set_coeff('O-O' , k = 201.2878 , t0= 1.92)
polymer_brush.py:144  |  angleWO.set_coeff('kink' , k = 1000.2878 , t0= 2.8)
polymer_brush.py:150  |  dihedralField = dihedral.harmonic()
polymer_brush.py:151  |  dihedralField.set_coeff('DihedralW1' , k = 2.6838 , d=1 , n= 1)
polymer_brush.py:152  |  dihedralField.set_coeff('DihedralW2' , k = 1.4543 , d=-1 , n= 2)
polymer_brush.py:153  |  dihedralField.set_coeff('DihedralW3' , k =5.4347 , d=1 , n= 3)
polymer_brush.py:154  |  dihedralField.set_coeff('Dihedral1' , k =2.6838 , d=1 , n= 1)
polymer_brush.py:155  |  dihedralField.set_coeff('Dihedral2' , k = 1.4543 , d=-1 , n= 2)
polymer_brush.py:156  |  dihedralField.set_coeff('Dihedral3' , k =5.4347 , d=1 , n= 3)
polymer_brush.py:158  |  integrate.mode_standard(dt= 0.005)
polymer_brush.py:160  |  integrator=integrate.nve(group=typeAll , limit=0.01 )
polymer_brush.py:161  |  zeroer = update.zero_momentum(period = 1)
polymer_brush.py:164  |  run(200)
notice(2): -- Neighborlist exclusion statistics -- :
notice(2): Particles with 1 exclusions             : 81920
notice(2): Particles with 2 exclusions             : 363520
notice(2): Neighbors included by diameter          : yes
notice(2): Neighbors excluded when in the same body: no
** starting run **
Time 00:00:05 | Step 200 / 200 | TPS 53.3583 | ETA 00:00:00
Average TPS: 53.3574
---------
-- Neighborlist stats:
9 normal updates / 1 forced updates / 0 dangerous updates
n_neigh_min: 5 / n_neigh_max: 142 / n_neigh_avg: 83.9711
shortest rebuild period: 21
-- Cell list stats:
Dimension: 40, 40, 8
n_min    : 0 / n_max: 121 / n_avg: 34.8
** run complete **
polymer_brush.py:165  |  zeroer.disable()
polymer_brush.py:167  |  integrator.disable()
polymer_brush.py:169  |  integrator=integrate.npt(group=typeAll , tau=1.0 , T= 1.0 , tauP = 1.2 , P = 0.00078 , x=False , y = False , z = True , rescale_all=True )
polymer_brush.py:172  |  run(1e4, profile=True, limit_hours=1)
** starting run **
Time 00:00:15 | Step 1023 / 10200 | TPS 82.0782 | ETA 00:01:51
Time 00:00:25 | Step 2233 / 10200 | TPS 120.942 | ETA 00:01:05
Time 00:00:35 | Step 3500 / 10200 | TPS 126.399 | ETA 00:00:53
Time 00:00:45 | Step 4801 / 10200 | TPS 129.692 | ETA 00:00:41
Time 00:00:55 | Step 6101 / 10200 | TPS 129.969 | ETA 00:00:31
Time 00:01:05 | Step 7400 / 10200 | TPS 129.603 | ETA 00:00:21
Time 00:01:15 | Step 8750 / 10200 | TPS 134.971 | ETA 00:00:10
Time 00:01:25 | Step 10105 / 10200 | TPS 135.271 | ETA 00:00:00
Time 00:01:26 | Step 10200 / 10200 | TPS 139.276 | ETA 00:00:00
Average TPS: 123.742
Simulation: 80.8136s | 100.000% 
        Bond harmonic:      0.8508s |  1.053% 
                update bond table:  0.0235s |  0.029% 
                Self:               0.8273s |  1.024% 
        Harmonic Angle:     1.3247s |  1.639% 
        Harmonic Dihedral:  4.1838s |  5.177% 
        Integrate:          5.0074s |  6.196% 
                NPT step 1:  0.1374s |  0.170% 
                        Thermo:  0.0011s |  0.001% 
                        Self:    0.1363s |  0.169% 
                NPT step 2:  1.9073s |  2.360% 
                        Thermo:  1.1938s |  1.477% 
                        Self:    0.7135s |  0.883% 
                Net force:   2.9123s |  3.604% 
        Neighbor:          40.8898s | 50.598% 
                Cell:        1.0948s |  1.355% 
                        compute:  0.1364s |  0.169% 
                        init:     0.8821s |  1.092% 
                compute:    20.7071s | 25.623% 
                dist-check:  0.4134s |  0.512% 
                filter:     16.9479s | 20.972% 
                head-list:   0.2624s |  0.325% 
                update-ex:   0.0017s |  0.002% 
                Self:        1.4625s |  1.810% 
        Pair lj:           12.9245s | 15.993% 
        Pair slj:          15.4872s | 19.164% 
        SFCPack:            0.0228s |  0.028% 
        Self:               0.1225s |  0.152% 
---------
-- Neighborlist stats:
1237 normal updates / 34 forced updates / 0 dangerous updates
n_neigh_min: 3 / n_neigh_max: 149 / n_neigh_avg: 81.84432
shortest rebuild period: 5
-- Cell list stats:
Dimension: 40, 40, 12
n_min    : 0 / n_max: 125 / n_avg: 23.20000
** run complete **










################################################################
Running: mpirun -n 2 python polymer_brush.py --mode=gpu --user=16
HOOMD-blue 1.3.3-unknown CUDA (7.5) SINGLE MPI SSE SSE2 SSE3 
Compiled: 03/06/2016
Copyright 2009-2016 The Regents of the University of Michigan.

All publications and presentations based on HOOMD-blue, including any reports
or published results obtained, in whole or in part, with HOOMD-blue, will
acknowledge its use according to the terms posted at the time of submission on:
http://codeblue.umich.edu/hoomd-blue/citations.html
-----
You are using HOOMD-blue. Read and cite the following:
* J A Anderson, C D Lorenz, and A Travesset. "General purpose molecular dynamics
  simulations fully implemented on graphics processing units", Journal of
  Computational Physics 227 (2008) 5342--5359
and
* J Glaser, T D Nguyen, J A Anderson, P Liu, F Spiga, J A Millan, D C Morse, and
  S C Glotzer. "Strong scaling of general-purpose molecular dynamics simulations
  on GPUs", Computer Physics Communications 192 (2015) 97--107
and
* http://codeblue.umich.edu/hoomd-blue
You can save these citations to file using cite.save().
-----
notice(2): This system is not compute exclusive, using local rank to select GPUs
notice(2): Unable to identify node local rank information
notice(2): Using global rank to select GPUs
HOOMD-blue is running on the following GPU(s):
Rank 0:  [0]  Tesla P100-PCIE-16GB  56 SM_6.0 @ 1.33 GHz, 16276 MiB DRAM
Rank 1:  [1]  Tesla P100-PCIE-16GB  56 SM_6.0 @ 1.33 GHz, 16276 MiB DRAM
polymer_brush.py:012  |  system=init.read_xml(filename='init.xml')
notice(2): Reading init.xml...
notice(2): --- hoomd_xml file read summary
notice(2): 1740 positions at timestep 0
notice(2): 1740 velocities
notice(2): 1740 masses
notice(2): 1740 diameters
notice(2): 5 particle types
notice(2): 1740 particle body values
notice(2): 1580 bonds
notice(2): 1420 angles
notice(2): 3780 dihedrals
notice(2): 1740 charges
HOOMD-blue is using domain decomposition: n_x = 1 n_y = 1 n_z = 2.
1 x 1 x 2 local grid on 1 nodes
notice(2): Group "all" created containing 1740 particles
polymer_brush.py:018  |  system.replicate(nx=rep, ny=rep, nz=1)
polymer_brush.py:019  |  typeW1=group.type('W1')
notice(2): Group "type W1" created containing 15360 particles
polymer_brush.py:020  |  typeW2=group.type('W2')
*Warning*: W2 does not exist in the system, creating an empty group
notice(2): Group "type W2" created containing 0 particles
notice(2): Group "Wall" created containing 15360 particles
polymer_brush.py:022  |  typeB= group.type('B')
notice(2): Group "type B" created containing 261120 particles
polymer_brush.py:023  |  typeSolvBackBone = group.type('Solvent')
notice(2): Group "type Solvent" created containing 102400 particles
polymer_brush.py:024  |  typeC= group.type('C')
*Warning*: C does not exist in the system, creating an empty group
notice(2): Group "type C" created containing 0 particles
polymer_brush.py:025  |  typeCH3_W1=group.type('CH3_W1')
notice(2): Group "type CH3_W1" created containing 15360 particles
polymer_brush.py:026  |  typeCH3_W2=group.type('CH3_W2')
*Warning*: CH3_W2 does not exist in the system, creating an empty group
notice(2): Group "type CH3_W2" created containing 0 particles
polymer_brush.py:027  |  typeSolvTail=group.type('SolvTail')
notice(2): Group "type SolvTail" created containing 51200 particles
notice(2): Group "BCH3-particles" created containing 276480 particles
notice(2): Group "CCH3-particles" created containing 0 particles
notice(2): Group "all-solvent" created containing 153600 particles
notice(2): Group "bc-particles" created containing 276480 particles
notice(2): Group "typeAll" created containing 430080 particles
notice(2): Group "typeNPT" created containing 445440 particles
Number of polymeric particles 430080
polymer_brush.py:044  |  lj = pair.lj(r_cut=3.3)
nlist.py:1051  |          globals.neighbor_list = cell();
polymer_brush.py:052  |  lj.pair_coeff.set('Solvent','W1' ,epsilon=0 , sigma=1.3144)
polymer_brush.py:053  |  lj.pair_coeff.set('Solvent','W2' ,epsilon=0 , sigma=1.3144)
polymer_brush.py:054  |  lj.pair_coeff.set('Solvent','Solvent' ,epsilon=1.0*tether_bulk , sigma=1.3144)
polymer_brush.py:055  |  lj.pair_coeff.set('Solvent','B' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:056  |  lj.pair_coeff.set('Solvent','C' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:057  |  lj.pair_coeff.set('Solvent','CH3_W1' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:058  |  lj.pair_coeff.set('Solvent','CH3_W2' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:059  |  lj.pair_coeff.set('Solvent','SolvTail' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:060  |  lj.pair_coeff.set('B','B' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:061  |  lj.pair_coeff.set('C','C' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:062  |  lj.pair_coeff.set('B','C' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:063  |  lj.pair_coeff.set('B','CH3_W1' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:064  |  lj.pair_coeff.set('B','CH3_W2' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:065  |  lj.pair_coeff.set('C','CH3_W1' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:066  |  lj.pair_coeff.set('C','CH3_W2' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:067  |  lj.pair_coeff.set('CH3_W1','CH3_W1' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:068  |  lj.pair_coeff.set('CH3_W1','CH3_W2' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:069  |  lj.pair_coeff.set('CH3_W2' ,'CH3_W2' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:071  |  lj.pair_coeff.set('B','SolvTail' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:072  |  lj.pair_coeff.set('C','SolvTail' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:073  |  lj.pair_coeff.set('CH3_W1','SolvTail' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:074  |  lj.pair_coeff.set('CH3_W2','SolvTail' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:075  |  lj.pair_coeff.set('SolvTail' ,'SolvTail' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:077  |  lj.pair_coeff.set('B','C' ,epsilon=0.01 , sigma=2.62 , alpha=0.0)
polymer_brush.py:078  |  lj.pair_coeff.set('W1','W2' ,epsilon=0.0 , sigma=1.0)
polymer_brush.py:079  |  lj.pair_coeff.set('W1','W1' ,epsilon=0.0 , sigma=1.0)
polymer_brush.py:080  |  lj.pair_coeff.set('W1','B' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:081  |  lj.pair_coeff.set('W1','C' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:082  |  lj.pair_coeff.set('W2','W2' ,epsilon=0.0 , sigma=1.0)
polymer_brush.py:083  |  lj.pair_coeff.set('W2','B' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:084  |  lj.pair_coeff.set('W2','C' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:085  |  lj.pair_coeff.set('W1','CH3_W1' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:086  |  lj.pair_coeff.set('W1','CH3_W2' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:087  |  lj.pair_coeff.set('W1','SolvTail' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:088  |  lj.pair_coeff.set('W2','CH3_W1' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:089  |  lj.pair_coeff.set('W2','CH3_W2' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:090  |  lj.pair_coeff.set('W2','SolvTail' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:091  |  lj.pair_coeff.set('A','C' ,epsilon=0.0 , sigma=1.0 , alpha=0.0)
polymer_brush.py:093  |  slj = pair.slj(r_cut= 1.3)
notice(2): Notice: slj set d_max=2.0
polymer_brush.py:094  |  slj.set_params(mode="shift")
pair.py:886  |          pair.set_params(self, mode=mode);
polymer_brush.py:095  |  slj.pair_coeff.set('W2','Solvent', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:096  |  slj.pair_coeff.set('W1','Solvent', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:097  |  slj.pair_coeff.set('Solvent','Solvent', epsilon = 0, sigma = 1.0)
polymer_brush.py:098  |  slj.pair_coeff.set('Solvent','B', epsilon = 0, sigma = 1.0)
polymer_brush.py:099  |  slj.pair_coeff.set('Solvent','C', epsilon = 0, sigma = 1.0)
polymer_brush.py:100  |  slj.pair_coeff.set('Solvent','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:101  |  slj.pair_coeff.set('Solvent','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:102  |  slj.pair_coeff.set('Solvent','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:103  |  slj.pair_coeff.set('W1','W2', epsilon = 0 , sigma =1.0)
polymer_brush.py:104  |  slj.pair_coeff.set('W1','W1', epsilon = 0 , sigma =1.0)
polymer_brush.py:105  |  slj.pair_coeff.set('W2','W2', epsilon = 0 , sigma =1.0)
polymer_brush.py:106  |  slj.pair_coeff.set('W1','B', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:107  |  slj.pair_coeff.set('W1','C', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:108  |  slj.pair_coeff.set('W2','B', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:109  |  slj.pair_coeff.set('W2','C', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:110  |  slj.pair_coeff.set('W1','CH3_W1', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:111  |  slj.pair_coeff.set('W1','CH3_W2', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:112  |  slj.pair_coeff.set('W2','CH3_W1', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:113  |  slj.pair_coeff.set('W2','CH3_W2', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:114  |  slj.pair_coeff.set('W1','SolvTail', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:115  |  slj.pair_coeff.set('W2','SolvTail', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:116  |  slj.pair_coeff.set('B','B', epsilon = 0, sigma = 1.0)
polymer_brush.py:117  |  slj.pair_coeff.set('C','C', epsilon = 0, sigma = 1.0)
polymer_brush.py:118  |  slj.pair_coeff.set('B','C', epsilon = 0, sigma = 1.0)
polymer_brush.py:119  |  slj.pair_coeff.set('B','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:120  |  slj.pair_coeff.set('B','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:121  |  slj.pair_coeff.set('B','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:122  |  slj.pair_coeff.set('C','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:123  |  slj.pair_coeff.set('C','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:124  |  slj.pair_coeff.set('C','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:125  |  slj.pair_coeff.set('CH3_W1','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:126  |  slj.pair_coeff.set('CH3_W1','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:127  |  slj.pair_coeff.set('CH3_W2','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:128  |  slj.pair_coeff.set('CH3_W1','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:129  |  slj.pair_coeff.set('CH3_W2','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:130  |  slj.pair_coeff.set('SolvTail','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:133  |  harmonicO_O= bond.harmonic(name = 'O-O-bond')
polymer_brush.py:135  |  harmonicO_O.bond_coeff.set('oleic', k=9892.9362 , r0=0.5)
polymer_brush.py:138  |  harmonicO_O.bond_coeff.set('wall', k=9892.9362, r0=1.25)
polymer_brush.py:141  |  angleWO = angle.harmonic()
polymer_brush.py:142  |  angleWO.set_coeff('W-O' , k = 201.2878 , t0= 2.5307)
polymer_brush.py:143  |  angleWO.set_coeff('O-O' , k = 201.2878 , t0= 1.92)
polymer_brush.py:144  |  angleWO.set_coeff('kink' , k = 1000.2878 , t0= 2.8)
polymer_brush.py:150  |  dihedralField = dihedral.harmonic()
polymer_brush.py:151  |  dihedralField.set_coeff('DihedralW1' , k = 2.6838 , d=1 , n= 1)
polymer_brush.py:152  |  dihedralField.set_coeff('DihedralW2' , k = 1.4543 , d=-1 , n= 2)
polymer_brush.py:153  |  dihedralField.set_coeff('DihedralW3' , k =5.4347 , d=1 , n= 3)
polymer_brush.py:154  |  dihedralField.set_coeff('Dihedral1' , k =2.6838 , d=1 , n= 1)
polymer_brush.py:155  |  dihedralField.set_coeff('Dihedral2' , k = 1.4543 , d=-1 , n= 2)
polymer_brush.py:156  |  dihedralField.set_coeff('Dihedral3' , k =5.4347 , d=1 , n= 3)
polymer_brush.py:158  |  integrate.mode_standard(dt= 0.005)
polymer_brush.py:160  |  integrator=integrate.nve(group=typeAll , limit=0.01 )
polymer_brush.py:161  |  zeroer = update.zero_momentum(period = 1)
polymer_brush.py:164  |  run(200)
notice(2): -- Neighborlist exclusion statistics -- :
notice(2): Particles with 1 exclusions             : 81920
notice(2): Particles with 2 exclusions             : 363520
notice(2): Neighbors included by diameter          : yes
notice(2): Neighbors excluded when in the same body: no
** starting run **
Time 00:00:07 | Step 200 / 200 | TPS 45.3043 | ETA 00:00:00
Average TPS: 45.3039
---------
-- Neighborlist stats:
9 normal updates / 1 forced updates / 0 dangerous updates
n_neigh_min: 14 / n_neigh_max: 141 / n_neigh_avg: 91.7456
shortest rebuild period: 21
-- Cell list stats:
Dimension: 40, 40, 5
n_min    : 8 / n_max: 134 / n_avg: 52.288
** run complete **
polymer_brush.py:165  |  zeroer.disable()
polymer_brush.py:167  |  integrator.disable()
polymer_brush.py:169  |  integrator=integrate.npt(group=typeAll , tau=1.0 , T= 1.0 , tauP = 1.2 , P = 0.00078 , x=False , y = False , z = True , rescale_all=True )
polymer_brush.py:172  |  run(1e4, profile=True, limit_hours=1)
** starting run **
Time 00:00:17 | Step 899 / 10200 | TPS 69.8643 | ETA 00:02:13
Time 00:00:27 | Step 1943 / 10200 | TPS 104.326 | ETA 00:01:19
Time 00:00:37 | Step 3081 / 10200 | TPS 113.797 | ETA 00:01:02
Time 00:00:47 | Step 4259 / 10200 | TPS 117.771 | ETA 00:00:50
Time 00:00:57 | Step 5466 / 10200 | TPS 120.69 | ETA 00:00:39
Time 00:01:07 | Step 6688 / 10200 | TPS 122.028 | ETA 00:00:28
Time 00:01:17 | Step 7916 / 10200 | TPS 122.668 | ETA 00:00:18
Time 00:01:27 | Step 9203 / 10200 | TPS 128.658 | ETA 00:00:07
Time 00:01:35 | Step 10200 / 10200 | TPS 127.002 | ETA 00:00:00
Average TPS: 113.773
Simulation: 87.8941s | 100.000% 
        Bond harmonic:      1.4334s |  1.631% 
                update bond table:  0.7410s |  0.843% 
                Self:               0.6924s |  0.788% 
        Harmonic Angle:     2.1087s |  2.399% 
        Harmonic Dihedral:  7.1156s |  8.096% 
        Integrate:          4.5053s |  5.126% 
                NPT step 1:  0.3809s |  0.433% 
                        Thermo:  0.0014s |  0.002% 
                        Self:    0.3795s |  0.432% 
                NPT step 2:  1.7507s |  1.992% 
                        Thermo:  1.0740s |  1.222% 
                        Self:    0.6767s |  0.770% 
                Net force:   2.2571s |  2.568% 
                Self:        0.1167s |  0.133% 
        Neighbor:          36.3151s | 41.317% 
                Cell:           0.3740s |  0.426% 
                        compute:  0.1225s |  0.139% 
                        init:     0.2238s |  0.255% 
                MPI allreduce:  0.0406s |  0.046% 
                compute:       19.8379s | 22.570% 
                filter:        15.6182s | 17.769% 
                head-list:      0.2993s |  0.341% 
                update-ex:      0.0583s |  0.066% 
        Pair lj:           11.1814s | 12.721% 
        Pair slj:          13.5078s | 15.368% 
        SFCPack:            0.0180s |  0.021% 
        comm_ghost_exch:    1.7780s |  2.023% 
                MPI send/recv:  0.6474s |  0.737% 5.60900 GiB/s 
                Self:           1.1306s |  1.286% 
        comm_ghost_update:  4.9518s |  5.634% 
                MPI send/recv:  2.5720s |  2.926% 6.89933 GiB/s 
                pack:           1.2978s |  1.477% 
                unpack:         0.9526s |  1.084% 
                Self:           0.1294s |  0.147% 
        comm_migrate:       2.8903s |  3.288% 
                MPI send/recv:  0.0991s |  0.113% 184.91685 MiB/s 
                angle:          0.5631s |  0.641% 
                        MPI send/recv:  0.0794s |  0.090% 180.42117 MiB/s 
                        Self:           0.4837s |  0.550% 
                bond:           0.4539s |  0.516% 
                        MPI send/recv:  0.0353s |  0.040% 211.33615 MiB/s 
                        Self:           0.4186s |  0.476% 
                dihedral:       1.2003s |  1.366% 
                        MPI send/recv:  0.1060s |  0.121% 589.34697 MiB/s 
                        Self:           1.0943s |  1.245% 
                pack:           0.3291s |  0.374% 
                unpack:         0.0220s |  0.025% 
                Self:           0.2228s |  0.253% 
        dist-check:         0.7144s |  0.813% 
        Self:               1.3743s |  1.564% 
---------
-- Neighborlist stats:
1240 normal updates / 34 forced updates / 0 dangerous updates
n_neigh_min: 3 / n_neigh_max: 147 / n_neigh_avg: 99.42419
shortest rebuild period: 5
-- Cell list stats:
Dimension: 40, 40, 7
n_min    : 0 / n_max: 117 / n_avg: 30.74652
** run complete **










################################################################
Running: mpirun -n 4 python polymer_brush.py --mode=gpu --user=16
HOOMD-blue 1.3.3-unknown CUDA (7.5) SINGLE MPI SSE SSE2 SSE3 
Compiled: 03/06/2016
Copyright 2009-2016 The Regents of the University of Michigan.

All publications and presentations based on HOOMD-blue, including any reports
or published results obtained, in whole or in part, with HOOMD-blue, will
acknowledge its use according to the terms posted at the time of submission on:
http://codeblue.umich.edu/hoomd-blue/citations.html
-----
You are using HOOMD-blue. Read and cite the following:
* J A Anderson, C D Lorenz, and A Travesset. "General purpose molecular dynamics
  simulations fully implemented on graphics processing units", Journal of
  Computational Physics 227 (2008) 5342--5359
and
* J Glaser, T D Nguyen, J A Anderson, P Liu, F Spiga, J A Millan, D C Morse, and
  S C Glotzer. "Strong scaling of general-purpose molecular dynamics simulations
  on GPUs", Computer Physics Communications 192 (2015) 97--107
and
* http://codeblue.umich.edu/hoomd-blue
You can save these citations to file using cite.save().
-----
notice(2): This system is not compute exclusive, using local rank to select GPUs
notice(2): Unable to identify node local rank information
notice(2): Using global rank to select GPUs
HOOMD-blue is running on the following GPU(s):
Rank 0:  [0]  Tesla P100-PCIE-16GB  56 SM_6.0 @ 1.33 GHz, 16276 MiB DRAM
Rank 1:  [1]  Tesla P100-PCIE-16GB  56 SM_6.0 @ 1.33 GHz, 16276 MiB DRAM
Rank 2:  [2]  Tesla P100-PCIE-16GB  56 SM_6.0 @ 1.33 GHz, 16276 MiB DRAM
Rank 3:  [3]  Tesla P100-PCIE-16GB  56 SM_6.0 @ 1.33 GHz, 16276 MiB DRAM
polymer_brush.py:012  |  system=init.read_xml(filename='init.xml')
notice(2): Reading init.xml...
notice(2): --- hoomd_xml file read summary
notice(2): 1740 positions at timestep 0
notice(2): 1740 velocities
notice(2): 1740 masses
notice(2): 1740 diameters
notice(2): 5 particle types
notice(2): 1740 particle body values
notice(2): 1580 bonds
notice(2): 1420 angles
notice(2): 3780 dihedrals
notice(2): 1740 charges
HOOMD-blue is using domain decomposition: n_x = 1 n_y = 1 n_z = 4.
1 x 1 x 4 local grid on 1 nodes
notice(2): Group "all" created containing 1740 particles
polymer_brush.py:018  |  system.replicate(nx=rep, ny=rep, nz=1)
polymer_brush.py:019  |  typeW1=group.type('W1')
notice(2): Group "type W1" created containing 15360 particles
polymer_brush.py:020  |  typeW2=group.type('W2')
*Warning*: W2 does not exist in the system, creating an empty group
notice(2): Group "type W2" created containing 0 particles
notice(2): Group "Wall" created containing 15360 particles
polymer_brush.py:022  |  typeB= group.type('B')
notice(2): Group "type B" created containing 261120 particles
polymer_brush.py:023  |  typeSolvBackBone = group.type('Solvent')
notice(2): Group "type Solvent" created containing 102400 particles
polymer_brush.py:024  |  typeC= group.type('C')
*Warning*: C does not exist in the system, creating an empty group
notice(2): Group "type C" created containing 0 particles
polymer_brush.py:025  |  typeCH3_W1=group.type('CH3_W1')
notice(2): Group "type CH3_W1" created containing 15360 particles
polymer_brush.py:026  |  typeCH3_W2=group.type('CH3_W2')
*Warning*: CH3_W2 does not exist in the system, creating an empty group
notice(2): Group "type CH3_W2" created containing 0 particles
polymer_brush.py:027  |  typeSolvTail=group.type('SolvTail')
notice(2): Group "type SolvTail" created containing 51200 particles
notice(2): Group "BCH3-particles" created containing 276480 particles
notice(2): Group "CCH3-particles" created containing 0 particles
notice(2): Group "all-solvent" created containing 153600 particles
notice(2): Group "bc-particles" created containing 276480 particles
notice(2): Group "typeAll" created containing 430080 particles
notice(2): Group "typeNPT" created containing 445440 particles
Number of polymeric particles 430080
polymer_brush.py:044  |  lj = pair.lj(r_cut=3.3)
nlist.py:1051  |          globals.neighbor_list = cell();
polymer_brush.py:052  |  lj.pair_coeff.set('Solvent','W1' ,epsilon=0 , sigma=1.3144)
polymer_brush.py:053  |  lj.pair_coeff.set('Solvent','W2' ,epsilon=0 , sigma=1.3144)
polymer_brush.py:054  |  lj.pair_coeff.set('Solvent','Solvent' ,epsilon=1.0*tether_bulk , sigma=1.3144)
polymer_brush.py:055  |  lj.pair_coeff.set('Solvent','B' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:056  |  lj.pair_coeff.set('Solvent','C' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:057  |  lj.pair_coeff.set('Solvent','CH3_W1' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:058  |  lj.pair_coeff.set('Solvent','CH3_W2' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:059  |  lj.pair_coeff.set('Solvent','SolvTail' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:060  |  lj.pair_coeff.set('B','B' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:061  |  lj.pair_coeff.set('C','C' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:062  |  lj.pair_coeff.set('B','C' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:063  |  lj.pair_coeff.set('B','CH3_W1' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:064  |  lj.pair_coeff.set('B','CH3_W2' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:065  |  lj.pair_coeff.set('C','CH3_W1' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:066  |  lj.pair_coeff.set('C','CH3_W2' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:067  |  lj.pair_coeff.set('CH3_W1','CH3_W1' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:068  |  lj.pair_coeff.set('CH3_W1','CH3_W2' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:069  |  lj.pair_coeff.set('CH3_W2' ,'CH3_W2' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:071  |  lj.pair_coeff.set('B','SolvTail' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:072  |  lj.pair_coeff.set('C','SolvTail' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:073  |  lj.pair_coeff.set('CH3_W1','SolvTail' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:074  |  lj.pair_coeff.set('CH3_W2','SolvTail' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:075  |  lj.pair_coeff.set('SolvTail' ,'SolvTail' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:077  |  lj.pair_coeff.set('B','C' ,epsilon=0.01 , sigma=2.62 , alpha=0.0)
polymer_brush.py:078  |  lj.pair_coeff.set('W1','W2' ,epsilon=0.0 , sigma=1.0)
polymer_brush.py:079  |  lj.pair_coeff.set('W1','W1' ,epsilon=0.0 , sigma=1.0)
polymer_brush.py:080  |  lj.pair_coeff.set('W1','B' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:081  |  lj.pair_coeff.set('W1','C' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:082  |  lj.pair_coeff.set('W2','W2' ,epsilon=0.0 , sigma=1.0)
polymer_brush.py:083  |  lj.pair_coeff.set('W2','B' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:084  |  lj.pair_coeff.set('W2','C' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:085  |  lj.pair_coeff.set('W1','CH3_W1' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:086  |  lj.pair_coeff.set('W1','CH3_W2' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:087  |  lj.pair_coeff.set('W1','SolvTail' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:088  |  lj.pair_coeff.set('W2','CH3_W1' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:089  |  lj.pair_coeff.set('W2','CH3_W2' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:090  |  lj.pair_coeff.set('W2','SolvTail' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:091  |  lj.pair_coeff.set('A','C' ,epsilon=0.0 , sigma=1.0 , alpha=0.0)
polymer_brush.py:093  |  slj = pair.slj(r_cut= 1.3)
notice(2): Notice: slj set d_max=2.0
polymer_brush.py:094  |  slj.set_params(mode="shift")
pair.py:886  |          pair.set_params(self, mode=mode);
polymer_brush.py:095  |  slj.pair_coeff.set('W2','Solvent', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:096  |  slj.pair_coeff.set('W1','Solvent', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:097  |  slj.pair_coeff.set('Solvent','Solvent', epsilon = 0, sigma = 1.0)
polymer_brush.py:098  |  slj.pair_coeff.set('Solvent','B', epsilon = 0, sigma = 1.0)
polymer_brush.py:099  |  slj.pair_coeff.set('Solvent','C', epsilon = 0, sigma = 1.0)
polymer_brush.py:100  |  slj.pair_coeff.set('Solvent','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:101  |  slj.pair_coeff.set('Solvent','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:102  |  slj.pair_coeff.set('Solvent','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:103  |  slj.pair_coeff.set('W1','W2', epsilon = 0 , sigma =1.0)
polymer_brush.py:104  |  slj.pair_coeff.set('W1','W1', epsilon = 0 , sigma =1.0)
polymer_brush.py:105  |  slj.pair_coeff.set('W2','W2', epsilon = 0 , sigma =1.0)
polymer_brush.py:106  |  slj.pair_coeff.set('W1','B', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:107  |  slj.pair_coeff.set('W1','C', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:108  |  slj.pair_coeff.set('W2','B', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:109  |  slj.pair_coeff.set('W2','C', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:110  |  slj.pair_coeff.set('W1','CH3_W1', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:111  |  slj.pair_coeff.set('W1','CH3_W2', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:112  |  slj.pair_coeff.set('W2','CH3_W1', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:113  |  slj.pair_coeff.set('W2','CH3_W2', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:114  |  slj.pair_coeff.set('W1','SolvTail', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:115  |  slj.pair_coeff.set('W2','SolvTail', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:116  |  slj.pair_coeff.set('B','B', epsilon = 0, sigma = 1.0)
polymer_brush.py:117  |  slj.pair_coeff.set('C','C', epsilon = 0, sigma = 1.0)
polymer_brush.py:118  |  slj.pair_coeff.set('B','C', epsilon = 0, sigma = 1.0)
polymer_brush.py:119  |  slj.pair_coeff.set('B','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:120  |  slj.pair_coeff.set('B','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:121  |  slj.pair_coeff.set('B','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:122  |  slj.pair_coeff.set('C','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:123  |  slj.pair_coeff.set('C','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:124  |  slj.pair_coeff.set('C','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:125  |  slj.pair_coeff.set('CH3_W1','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:126  |  slj.pair_coeff.set('CH3_W1','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:127  |  slj.pair_coeff.set('CH3_W2','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:128  |  slj.pair_coeff.set('CH3_W1','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:129  |  slj.pair_coeff.set('CH3_W2','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:130  |  slj.pair_coeff.set('SolvTail','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:133  |  harmonicO_O= bond.harmonic(name = 'O-O-bond')
polymer_brush.py:135  |  harmonicO_O.bond_coeff.set('oleic', k=9892.9362 , r0=0.5)
polymer_brush.py:138  |  harmonicO_O.bond_coeff.set('wall', k=9892.9362, r0=1.25)
polymer_brush.py:141  |  angleWO = angle.harmonic()
polymer_brush.py:142  |  angleWO.set_coeff('W-O' , k = 201.2878 , t0= 2.5307)
polymer_brush.py:143  |  angleWO.set_coeff('O-O' , k = 201.2878 , t0= 1.92)
polymer_brush.py:144  |  angleWO.set_coeff('kink' , k = 1000.2878 , t0= 2.8)
polymer_brush.py:150  |  dihedralField = dihedral.harmonic()
polymer_brush.py:151  |  dihedralField.set_coeff('DihedralW1' , k = 2.6838 , d=1 , n= 1)
polymer_brush.py:152  |  dihedralField.set_coeff('DihedralW2' , k = 1.4543 , d=-1 , n= 2)
polymer_brush.py:153  |  dihedralField.set_coeff('DihedralW3' , k =5.4347 , d=1 , n= 3)
polymer_brush.py:154  |  dihedralField.set_coeff('Dihedral1' , k =2.6838 , d=1 , n= 1)
polymer_brush.py:155  |  dihedralField.set_coeff('Dihedral2' , k = 1.4543 , d=-1 , n= 2)
polymer_brush.py:156  |  dihedralField.set_coeff('Dihedral3' , k =5.4347 , d=1 , n= 3)
polymer_brush.py:158  |  integrate.mode_standard(dt= 0.005)
polymer_brush.py:160  |  integrator=integrate.nve(group=typeAll , limit=0.01 )
polymer_brush.py:161  |  zeroer = update.zero_momentum(period = 1)
polymer_brush.py:164  |  run(200)
notice(2): -- Neighborlist exclusion statistics -- :
notice(2): Particles with 1 exclusions             : 81920
notice(2): Particles with 2 exclusions             : 363520
notice(2): Neighbors included by diameter          : yes
notice(2): Neighbors excluded when in the same body: no
** starting run **
Time 00:00:08 | Step 200 / 200 | TPS 48.7802 | ETA 00:00:00
Average TPS: 48.7797
---------
-- Neighborlist stats:
9 normal updates / 1 forced updates / 0 dangerous updates
n_neigh_min: 60 / n_neigh_max: 142 / n_neigh_avg: 110.046
shortest rebuild period: 21
-- Cell list stats:
Dimension: 40, 40, 3
n_min    : 8 / n_max: 170 / n_avg: 68.64
** run complete **
polymer_brush.py:165  |  zeroer.disable()
polymer_brush.py:167  |  integrator.disable()
polymer_brush.py:169  |  integrator=integrate.npt(group=typeAll , tau=1.0 , T= 1.0 , tauP = 1.2 , P = 0.00078 , x=False , y = False , z = True , rescale_all=True )
polymer_brush.py:172  |  run(1e4, profile=True, limit_hours=1)
** starting run **
Time 00:00:18 | Step 934 / 10200 | TPS 73.2377 | ETA 00:02:06
Time 00:00:28 | Step 1883 / 10200 | TPS 94.4904 | ETA 00:01:28
Time 00:00:38 | Step 2941 / 10200 | TPS 105.613 | ETA 00:01:08
Time 00:00:48 | Step 4029 / 10200 | TPS 108.786 | ETA 00:00:56
Time 00:00:58 | Step 5137 / 10200 | TPS 110.787 | ETA 00:00:45
Time 00:01:08 | Step 6256 / 10200 | TPS 111.815 | ETA 00:00:35
Time 00:01:18 | Step 7369 / 10200 | TPS 111.297 | ETA 00:00:25
Time 00:01:28 | Step 8480 / 10200 | TPS 111.087 | ETA 00:00:15
Time 00:01:38 | Step 9599 / 10200 | TPS 111.885 | ETA 00:00:05
Time 00:01:43 | Step 10200 / 10200 | TPS 110.589 | ETA 00:00:00
Average TPS: 104.678
Simulation: 95.5307s | 100.000% 
        Bond harmonic:      3.0407s |  3.183% 
                update bond table:  2.4526s |  2.567% 
                Self:               0.5881s |  0.616% 
        Harmonic Angle:     5.0023s |  5.236% 
        Harmonic Dihedral:  9.4873s |  9.931% 
        Integrate:          4.0939s |  4.285% 
                NPT step 1:  0.3355s |  0.351% 
                        Thermo:  0.0023s |  0.002% 
                        Self:    0.3332s |  0.349% 
                NPT step 2:  1.6800s |  1.759% 
                        Thermo:  0.9686s |  1.014% 
                        Self:    0.7113s |  0.745% 
                Net force:   1.9589s |  2.051% 
                Self:        0.1196s |  0.125% 
        Neighbor:          35.4465s | 37.105% 
                Cell:           0.2050s |  0.215% 
                        compute:  0.1093s |  0.114% 
                        init:     0.0800s |  0.084% 
                MPI allreduce:  0.0399s |  0.042% 
                compute:       19.6499s | 20.569% 
                filter:        14.9953s | 15.697% 
                head-list:      0.4186s |  0.438% 
                update-ex:      0.0596s |  0.062% 
        Pair lj:           12.2379s | 12.810% 
        Pair slj:          15.6008s | 16.331% 
        SFCPack:            0.0163s |  0.017% 
        comm_ghost_exch:    1.7127s |  1.793% 
                MPI send/recv:  0.7858s |  0.823% 4.45455 GiB/s 
                Self:           0.9269s |  0.970% 
        comm_ghost_update:  3.8216s |  4.000% 
                MPI send/recv:  2.1788s |  2.281% 7.20681 GiB/s 
                pack:           1.3004s |  1.361% 
                unpack:         0.2228s |  0.233% 
                Self:           0.1196s |  0.125% 
        comm_migrate:       3.2184s |  3.369% 
                MPI send/recv:  0.2809s |  0.294% 16.11331 MiB/s 
                angle:          0.7865s |  0.823% 
                        MPI send/recv:  0.3497s |  0.366% 9.86285 MiB/s 
                        Self:           0.4369s |  0.457% 
                bond:           0.5054s |  0.529% 
                        MPI send/recv:  0.1435s |  0.150% 12.74553 MiB/s 
                        Self:           0.3620s |  0.379% 
                dihedral:       1.1759s |  1.231% 
                        MPI send/recv:  0.3425s |  0.359% 43.50690 MiB/s 
                        Self:           0.8334s |  0.872% 
                pack:           0.3016s |  0.316% 
                unpack:         0.0209s |  0.022% 
                Self:           0.1472s |  0.154% 
        dist-check:         0.6306s |  0.660% 
        Self:               1.2216s |  1.279% 
---------
-- Neighborlist stats:
1239 normal updates / 34 forced updates / 0 dangerous updates
n_neigh_min: 3 / n_neigh_max: 150 / n_neigh_avg: 105.99146
shortest rebuild period: 5
-- Cell list stats:
Dimension: 40, 40, 4
n_min    : 0 / n_max: 136 / n_avg: 48.45562
** run complete **










################################################################
Running: mpirun -n 8 python polymer_brush.py --mode=gpu --user=16
HOOMD-blue 1.3.3-unknown CUDA (7.5) SINGLE MPI SSE SSE2 SSE3 
Compiled: 03/06/2016
Copyright 2009-2016 The Regents of the University of Michigan.

All publications and presentations based on HOOMD-blue, including any reports
or published results obtained, in whole or in part, with HOOMD-blue, will
acknowledge its use according to the terms posted at the time of submission on:
http://codeblue.umich.edu/hoomd-blue/citations.html
-----
You are using HOOMD-blue. Read and cite the following:
* J A Anderson, C D Lorenz, and A Travesset. "General purpose molecular dynamics
  simulations fully implemented on graphics processing units", Journal of
  Computational Physics 227 (2008) 5342--5359
and
* J Glaser, T D Nguyen, J A Anderson, P Liu, F Spiga, J A Millan, D C Morse, and
  S C Glotzer. "Strong scaling of general-purpose molecular dynamics simulations
  on GPUs", Computer Physics Communications 192 (2015) 97--107
and
* http://codeblue.umich.edu/hoomd-blue
You can save these citations to file using cite.save().
-----
notice(2): This system is not compute exclusive, using local rank to select GPUs
notice(2): Unable to identify node local rank information
notice(2): Using global rank to select GPUs
HOOMD-blue is running on the following GPU(s):
Rank 0:  [0]  Tesla P100-PCIE-16GB  56 SM_6.0 @ 1.33 GHz, 16276 MiB DRAM
Rank 1:  [1]  Tesla P100-PCIE-16GB  56 SM_6.0 @ 1.33 GHz, 16276 MiB DRAM
Rank 2:  [2]  Tesla P100-PCIE-16GB  56 SM_6.0 @ 1.33 GHz, 16276 MiB DRAM
Rank 3:  [3]  Tesla P100-PCIE-16GB  56 SM_6.0 @ 1.33 GHz, 16276 MiB DRAM
Rank 4:  [0]  Tesla P100-PCIE-16GB  56 SM_6.0 @ 1.33 GHz, 16276 MiB DRAM
Rank 5:  [1]  Tesla P100-PCIE-16GB  56 SM_6.0 @ 1.33 GHz, 16276 MiB DRAM
Rank 6:  [2]  Tesla P100-PCIE-16GB  56 SM_6.0 @ 1.33 GHz, 16276 MiB DRAM
Rank 7:  [3]  Tesla P100-PCIE-16GB  56 SM_6.0 @ 1.33 GHz, 16276 MiB DRAM
polymer_brush.py:012  |  system=init.read_xml(filename='init.xml')
notice(2): Reading init.xml...
notice(2): --- hoomd_xml file read summary
notice(2): 1740 positions at timestep 0
notice(2): 1740 velocities
notice(2): 1740 masses
notice(2): 1740 diameters
notice(2): 5 particle types
notice(2): 1740 particle body values
notice(2): 1580 bonds
notice(2): 1420 angles
notice(2): 3780 dihedrals
notice(2): 1740 charges
HOOMD-blue is using domain decomposition: n_x = 1 n_y = 2 n_z = 4.
1 x 2 x 4 local grid on 1 nodes
notice(2): Group "all" created containing 1740 particles
polymer_brush.py:018  |  system.replicate(nx=rep, ny=rep, nz=1)
polymer_brush.py:019  |  typeW1=group.type('W1')
notice(2): Group "type W1" created containing 15360 particles
polymer_brush.py:020  |  typeW2=group.type('W2')
*Warning*: W2 does not exist in the system, creating an empty group
notice(2): Group "type W2" created containing 0 particles
notice(2): Group "Wall" created containing 15360 particles
polymer_brush.py:022  |  typeB= group.type('B')
notice(2): Group "type B" created containing 261120 particles
polymer_brush.py:023  |  typeSolvBackBone = group.type('Solvent')
notice(2): Group "type Solvent" created containing 102400 particles
polymer_brush.py:024  |  typeC= group.type('C')
*Warning*: C does not exist in the system, creating an empty group
notice(2): Group "type C" created containing 0 particles
polymer_brush.py:025  |  typeCH3_W1=group.type('CH3_W1')
notice(2): Group "type CH3_W1" created containing 15360 particles
polymer_brush.py:026  |  typeCH3_W2=group.type('CH3_W2')
*Warning*: CH3_W2 does not exist in the system, creating an empty group
notice(2): Group "type CH3_W2" created containing 0 particles
polymer_brush.py:027  |  typeSolvTail=group.type('SolvTail')
notice(2): Group "type SolvTail" created containing 51200 particles
notice(2): Group "BCH3-particles" created containing 276480 particles
notice(2): Group "CCH3-particles" created containing 0 particles
notice(2): Group "all-solvent" created containing 153600 particles
notice(2): Group "bc-particles" created containing 276480 particles
notice(2): Group "typeAll" created containing 430080 particles
notice(2): Group "typeNPT" created containing 445440 particles
Number of polymeric particles 430080
polymer_brush.py:044  |  lj = pair.lj(r_cut=3.3)
nlist.py:1051  |          globals.neighbor_list = cell();
polymer_brush.py:052  |  lj.pair_coeff.set('Solvent','W1' ,epsilon=0 , sigma=1.3144)
polymer_brush.py:053  |  lj.pair_coeff.set('Solvent','W2' ,epsilon=0 , sigma=1.3144)
polymer_brush.py:054  |  lj.pair_coeff.set('Solvent','Solvent' ,epsilon=1.0*tether_bulk , sigma=1.3144)
polymer_brush.py:055  |  lj.pair_coeff.set('Solvent','B' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:056  |  lj.pair_coeff.set('Solvent','C' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:057  |  lj.pair_coeff.set('Solvent','CH3_W1' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:058  |  lj.pair_coeff.set('Solvent','CH3_W2' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:059  |  lj.pair_coeff.set('Solvent','SolvTail' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:060  |  lj.pair_coeff.set('B','B' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:061  |  lj.pair_coeff.set('C','C' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:062  |  lj.pair_coeff.set('B','C' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:063  |  lj.pair_coeff.set('B','CH3_W1' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:064  |  lj.pair_coeff.set('B','CH3_W2' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:065  |  lj.pair_coeff.set('C','CH3_W1' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:066  |  lj.pair_coeff.set('C','CH3_W2' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:067  |  lj.pair_coeff.set('CH3_W1','CH3_W1' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:068  |  lj.pair_coeff.set('CH3_W1','CH3_W2' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:069  |  lj.pair_coeff.set('CH3_W2' ,'CH3_W2' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:071  |  lj.pair_coeff.set('B','SolvTail' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:072  |  lj.pair_coeff.set('C','SolvTail' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:073  |  lj.pair_coeff.set('CH3_W1','SolvTail' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:074  |  lj.pair_coeff.set('CH3_W2','SolvTail' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:075  |  lj.pair_coeff.set('SolvTail' ,'SolvTail' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:077  |  lj.pair_coeff.set('B','C' ,epsilon=0.01 , sigma=2.62 , alpha=0.0)
polymer_brush.py:078  |  lj.pair_coeff.set('W1','W2' ,epsilon=0.0 , sigma=1.0)
polymer_brush.py:079  |  lj.pair_coeff.set('W1','W1' ,epsilon=0.0 , sigma=1.0)
polymer_brush.py:080  |  lj.pair_coeff.set('W1','B' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:081  |  lj.pair_coeff.set('W1','C' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:082  |  lj.pair_coeff.set('W2','W2' ,epsilon=0.0 , sigma=1.0)
polymer_brush.py:083  |  lj.pair_coeff.set('W2','B' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:084  |  lj.pair_coeff.set('W2','C' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:085  |  lj.pair_coeff.set('W1','CH3_W1' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:086  |  lj.pair_coeff.set('W1','CH3_W2' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:087  |  lj.pair_coeff.set('W1','SolvTail' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:088  |  lj.pair_coeff.set('W2','CH3_W1' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:089  |  lj.pair_coeff.set('W2','CH3_W2' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:090  |  lj.pair_coeff.set('W2','SolvTail' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:091  |  lj.pair_coeff.set('A','C' ,epsilon=0.0 , sigma=1.0 , alpha=0.0)
polymer_brush.py:093  |  slj = pair.slj(r_cut= 1.3)
notice(2): Notice: slj set d_max=2.0
polymer_brush.py:094  |  slj.set_params(mode="shift")
pair.py:886  |          pair.set_params(self, mode=mode);
polymer_brush.py:095  |  slj.pair_coeff.set('W2','Solvent', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:096  |  slj.pair_coeff.set('W1','Solvent', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:097  |  slj.pair_coeff.set('Solvent','Solvent', epsilon = 0, sigma = 1.0)
polymer_brush.py:098  |  slj.pair_coeff.set('Solvent','B', epsilon = 0, sigma = 1.0)
polymer_brush.py:099  |  slj.pair_coeff.set('Solvent','C', epsilon = 0, sigma = 1.0)
polymer_brush.py:100  |  slj.pair_coeff.set('Solvent','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:101  |  slj.pair_coeff.set('Solvent','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:102  |  slj.pair_coeff.set('Solvent','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:103  |  slj.pair_coeff.set('W1','W2', epsilon = 0 , sigma =1.0)
polymer_brush.py:104  |  slj.pair_coeff.set('W1','W1', epsilon = 0 , sigma =1.0)
polymer_brush.py:105  |  slj.pair_coeff.set('W2','W2', epsilon = 0 , sigma =1.0)
polymer_brush.py:106  |  slj.pair_coeff.set('W1','B', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:107  |  slj.pair_coeff.set('W1','C', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:108  |  slj.pair_coeff.set('W2','B', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:109  |  slj.pair_coeff.set('W2','C', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:110  |  slj.pair_coeff.set('W1','CH3_W1', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:111  |  slj.pair_coeff.set('W1','CH3_W2', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:112  |  slj.pair_coeff.set('W2','CH3_W1', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:113  |  slj.pair_coeff.set('W2','CH3_W2', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:114  |  slj.pair_coeff.set('W1','SolvTail', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:115  |  slj.pair_coeff.set('W2','SolvTail', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:116  |  slj.pair_coeff.set('B','B', epsilon = 0, sigma = 1.0)
polymer_brush.py:117  |  slj.pair_coeff.set('C','C', epsilon = 0, sigma = 1.0)
polymer_brush.py:118  |  slj.pair_coeff.set('B','C', epsilon = 0, sigma = 1.0)
polymer_brush.py:119  |  slj.pair_coeff.set('B','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:120  |  slj.pair_coeff.set('B','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:121  |  slj.pair_coeff.set('B','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:122  |  slj.pair_coeff.set('C','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:123  |  slj.pair_coeff.set('C','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:124  |  slj.pair_coeff.set('C','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:125  |  slj.pair_coeff.set('CH3_W1','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:126  |  slj.pair_coeff.set('CH3_W1','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:127  |  slj.pair_coeff.set('CH3_W2','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:128  |  slj.pair_coeff.set('CH3_W1','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:129  |  slj.pair_coeff.set('CH3_W2','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:130  |  slj.pair_coeff.set('SolvTail','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:133  |  harmonicO_O= bond.harmonic(name = 'O-O-bond')
polymer_brush.py:135  |  harmonicO_O.bond_coeff.set('oleic', k=9892.9362 , r0=0.5)
polymer_brush.py:138  |  harmonicO_O.bond_coeff.set('wall', k=9892.9362, r0=1.25)
polymer_brush.py:141  |  angleWO = angle.harmonic()
polymer_brush.py:142  |  angleWO.set_coeff('W-O' , k = 201.2878 , t0= 2.5307)
polymer_brush.py:143  |  angleWO.set_coeff('O-O' , k = 201.2878 , t0= 1.92)
polymer_brush.py:144  |  angleWO.set_coeff('kink' , k = 1000.2878 , t0= 2.8)
polymer_brush.py:150  |  dihedralField = dihedral.harmonic()
polymer_brush.py:151  |  dihedralField.set_coeff('DihedralW1' , k = 2.6838 , d=1 , n= 1)
polymer_brush.py:152  |  dihedralField.set_coeff('DihedralW2' , k = 1.4543 , d=-1 , n= 2)
polymer_brush.py:153  |  dihedralField.set_coeff('DihedralW3' , k =5.4347 , d=1 , n= 3)
polymer_brush.py:154  |  dihedralField.set_coeff('Dihedral1' , k =2.6838 , d=1 , n= 1)
polymer_brush.py:155  |  dihedralField.set_coeff('Dihedral2' , k = 1.4543 , d=-1 , n= 2)
polymer_brush.py:156  |  dihedralField.set_coeff('Dihedral3' , k =5.4347 , d=1 , n= 3)
polymer_brush.py:158  |  integrate.mode_standard(dt= 0.005)
polymer_brush.py:160  |  integrator=integrate.nve(group=typeAll , limit=0.01 )
polymer_brush.py:161  |  zeroer = update.zero_momentum(period = 1)
polymer_brush.py:164  |  run(200)
notice(2): -- Neighborlist exclusion statistics -- :
notice(2): Particles with 1 exclusions             : 81920
notice(2): Particles with 2 exclusions             : 363520
notice(2): Neighbors included by diameter          : yes
notice(2): Neighbors excluded when in the same body: no
** starting run **
Time 00:00:10 | Step 200 / 200 | TPS 57.9095 | ETA 00:00:00
Average TPS: 57.9087
---------
-- Neighborlist stats:
9 normal updates / 1 forced updates / 0 dangerous updates
n_neigh_min: 60 / n_neigh_max: 140 / n_neigh_avg: 110.032
shortest rebuild period: 21
-- Cell list stats:
Dimension: 40, 21, 3
n_min    : 8 / n_max: 179 / n_avg: 71.6825
** run complete **
polymer_brush.py:165  |  zeroer.disable()
polymer_brush.py:167  |  integrator.disable()
polymer_brush.py:169  |  integrator=integrate.npt(group=typeAll , tau=1.0 , T= 1.0 , tauP = 1.2 , P = 0.00078 , x=False , y = False , z = True , rescale_all=True )
polymer_brush.py:172  |  run(1e4, profile=True, limit_hours=1)
** starting run **
Time 00:00:20 | Step 1161 / 10200 | TPS 95.8931 | ETA 00:01:34
Time 00:00:30 | Step 2290 / 10200 | TPS 112.706 | ETA 00:01:10
Time 00:00:40 | Step 3582 / 10200 | TPS 128.87 | ETA 00:00:51
Time 00:00:50 | Step 4899 / 10200 | TPS 131.655 | ETA 00:00:40
Time 00:01:00 | Step 6247 / 10200 | TPS 134.754 | ETA 00:00:29
Time 00:01:10 | Step 7576 / 10200 | TPS 132.88 | ETA 00:00:19
Time 00:01:20 | Step 8941 / 10200 | TPS 136.473 | ETA 00:00:09
Time 00:01:30 | Step 10200 / 10200 | TPS 133.425 | ETA 00:00:00
Average TPS: 125.769
Simulation: 79.5107s | 100.000% 
        Bond harmonic:      3.2001s |  4.025% 
                update bond table:  1.5078s |  1.896% 
                Self:               1.6923s |  2.128% 
        Harmonic Angle:     3.0639s |  3.853% 
        Harmonic Dihedral:  5.1724s |  6.505% 
        Integrate:          7.0267s |  8.837% 
                NPT step 1:  0.3479s |  0.438% 
                        Thermo:  0.0067s |  0.008% 
                        Self:    0.3412s |  0.429% 
                NPT step 2:  4.3676s |  5.493% 
                        Thermo:  1.0642s |  1.338% 
                        Self:    3.3035s |  4.155% 
                Net force:   2.1730s |  2.733% 
                Self:        0.1381s |  0.174% 
        Neighbor:          24.9764s | 31.413% 
                Cell:           0.7931s |  0.998% 
                        compute:  0.6099s |  0.767% 
                        init:     0.1533s |  0.193% 
                MPI allreduce:  1.0593s |  1.332% 
                compute:       12.8213s | 16.125% 
                filter:         8.3594s | 10.514% 
                head-list:      0.8116s |  1.021% 
                update-ex:      0.9423s |  1.185% 
                Self:           0.1894s |  0.238% 
        Pair lj:            7.8510s |  9.874% 
        Pair slj:           9.1334s | 11.487% 
        SFCPack:            0.0167s |  0.021% 
        comm_ghost_exch:    2.6045s |  3.276% 
                MPI send/recv:  1.0182s |  1.281% 2.54902 GiB/s 
                Self:           1.5863s |  1.995% 
        comm_ghost_update:  5.1064s |  6.422% 
                MPI send/recv:  2.3044s |  2.898% 5.48499 GiB/s 
                pack:           1.5069s |  1.895% 
                unpack:         1.1690s |  1.470% 
                Self:           0.1261s |  0.159% 
        comm_migrate:       7.2410s |  9.107% 
                MPI send/recv:  0.4854s |  0.610% 39.97948 MiB/s 
                angle:          1.8424s |  2.317% 
                        MPI send/recv:  0.6863s |  0.863% 29.80658 MiB/s 
                        Self:           1.1561s |  1.454% 
                bond:           1.4738s |  1.854% 
                        MPI send/recv:  0.3721s |  0.468% 24.92311 MiB/s 
                        Self:           1.1017s |  1.386% 
                dihedral:       2.4473s |  3.078% 
                        MPI send/recv:  0.6409s |  0.806% 168.14857 MiB/s 
                        Self:           1.8063s |  2.272% 
                pack:           0.4120s |  0.518% 
                unpack:         0.1672s |  0.210% 
                Self:           0.4130s |  0.519% 
        dist-check:         2.8312s |  3.561% 
        Self:               1.2871s |  1.619% 
---------
-- Neighborlist stats:
1239 normal updates / 34 forced updates / 0 dangerous updates
n_neigh_min: 3 / n_neigh_max: 151 / n_neigh_avg: 106.12476
shortest rebuild period: 5
-- Cell list stats:
Dimension: 40, 21, 4
n_min    : 0 / n_max: 142 / n_avg: 50.58274
** run complete **










################################################################
Running: mpirun -n 16 python polymer_brush.py --mode=gpu --user=16
HOOMD-blue 1.3.3-unknown CUDA (7.5) SINGLE MPI SSE SSE2 SSE3 
Compiled: 03/06/2016
Copyright 2009-2016 The Regents of the University of Michigan.

All publications and presentations based on HOOMD-blue, including any reports
or published results obtained, in whole or in part, with HOOMD-blue, will
acknowledge its use according to the terms posted at the time of submission on:
http://codeblue.umich.edu/hoomd-blue/citations.html
-----
You are using HOOMD-blue. Read and cite the following:
* J A Anderson, C D Lorenz, and A Travesset. "General purpose molecular dynamics
  simulations fully implemented on graphics processing units", Journal of
  Computational Physics 227 (2008) 5342--5359
and
* J Glaser, T D Nguyen, J A Anderson, P Liu, F Spiga, J A Millan, D C Morse, and
  S C Glotzer. "Strong scaling of general-purpose molecular dynamics simulations
  on GPUs", Computer Physics Communications 192 (2015) 97--107
and
* http://codeblue.umich.edu/hoomd-blue
You can save these citations to file using cite.save().
-----
notice(2): This system is not compute exclusive, using local rank to select GPUs
notice(2): Unable to identify node local rank information
notice(2): Using global rank to select GPUs
HOOMD-blue is running on the following GPU(s):
Rank 0:  [0]  Tesla P100-PCIE-16GB  56 SM_6.0 @ 1.33 GHz, 16276 MiB DRAM
Rank 1:  [1]  Tesla P100-PCIE-16GB  56 SM_6.0 @ 1.33 GHz, 16276 MiB DRAM
Rank 2:  [2]  Tesla P100-PCIE-16GB  56 SM_6.0 @ 1.33 GHz, 16276 MiB DRAM
Rank 3:  [3]  Tesla P100-PCIE-16GB  56 SM_6.0 @ 1.33 GHz, 16276 MiB DRAM
Rank 4:  [0]  Tesla P100-PCIE-16GB  56 SM_6.0 @ 1.33 GHz, 16276 MiB DRAM
Rank 5:  [1]  Tesla P100-PCIE-16GB  56 SM_6.0 @ 1.33 GHz, 16276 MiB DRAM
Rank 6:  [2]  Tesla P100-PCIE-16GB  56 SM_6.0 @ 1.33 GHz, 16276 MiB DRAM
Rank 7:  [3]  Tesla P100-PCIE-16GB  56 SM_6.0 @ 1.33 GHz, 16276 MiB DRAM
Rank 8:  [0]  Tesla P100-PCIE-16GB  56 SM_6.0 @ 1.33 GHz, 16276 MiB DRAM
Rank 9:  [1]  Tesla P100-PCIE-16GB  56 SM_6.0 @ 1.33 GHz, 16276 MiB DRAM
Rank 10:  [2]  Tesla P100-PCIE-16GB  56 SM_6.0 @ 1.33 GHz, 16276 MiB DRAM
Rank 11:  [3]  Tesla P100-PCIE-16GB  56 SM_6.0 @ 1.33 GHz, 16276 MiB DRAM
Rank 12:  [0]  Tesla P100-PCIE-16GB  56 SM_6.0 @ 1.33 GHz, 16276 MiB DRAM
Rank 13:  [1]  Tesla P100-PCIE-16GB  56 SM_6.0 @ 1.33 GHz, 16276 MiB DRAM
Rank 14:  [2]  Tesla P100-PCIE-16GB  56 SM_6.0 @ 1.33 GHz, 16276 MiB DRAM
Rank 15:  [3]  Tesla P100-PCIE-16GB  56 SM_6.0 @ 1.33 GHz, 16276 MiB DRAM
polymer_brush.py:012  |  system=init.read_xml(filename='init.xml')
notice(2): Reading init.xml...
notice(2): --- hoomd_xml file read summary
notice(2): 1740 positions at timestep 0
notice(2): 1740 velocities
notice(2): 1740 masses
notice(2): 1740 diameters
notice(2): 5 particle types
notice(2): 1740 particle body values
notice(2): 1580 bonds
notice(2): 1420 angles
notice(2): 3780 dihedrals
notice(2): 1740 charges
HOOMD-blue is using domain decomposition: n_x = 2 n_y = 2 n_z = 4.
2 x 2 x 4 local grid on 1 nodes
notice(2): Group "all" created containing 1740 particles
polymer_brush.py:018  |  system.replicate(nx=rep, ny=rep, nz=1)
polymer_brush.py:019  |  typeW1=group.type('W1')
notice(2): Group "type W1" created containing 15360 particles
polymer_brush.py:020  |  typeW2=group.type('W2')
*Warning*: W2 does not exist in the system, creating an empty group
notice(2): Group "type W2" created containing 0 particles
notice(2): Group "Wall" created containing 15360 particles
polymer_brush.py:022  |  typeB= group.type('B')
notice(2): Group "type B" created containing 261120 particles
polymer_brush.py:023  |  typeSolvBackBone = group.type('Solvent')
notice(2): Group "type Solvent" created containing 102400 particles
polymer_brush.py:024  |  typeC= group.type('C')
*Warning*: C does not exist in the system, creating an empty group
notice(2): Group "type C" created containing 0 particles
polymer_brush.py:025  |  typeCH3_W1=group.type('CH3_W1')
notice(2): Group "type CH3_W1" created containing 15360 particles
polymer_brush.py:026  |  typeCH3_W2=group.type('CH3_W2')
*Warning*: CH3_W2 does not exist in the system, creating an empty group
notice(2): Group "type CH3_W2" created containing 0 particles
polymer_brush.py:027  |  typeSolvTail=group.type('SolvTail')
notice(2): Group "type SolvTail" created containing 51200 particles
notice(2): Group "BCH3-particles" created containing 276480 particles
notice(2): Group "CCH3-particles" created containing 0 particles
notice(2): Group "all-solvent" created containing 153600 particles
notice(2): Group "bc-particles" created containing 276480 particles
notice(2): Group "typeAll" created containing 430080 particles
notice(2): Group "typeNPT" created containing 445440 particles
Number of polymeric particles 430080
polymer_brush.py:044  |  lj = pair.lj(r_cut=3.3)
nlist.py:1051  |          globals.neighbor_list = cell();
polymer_brush.py:052  |  lj.pair_coeff.set('Solvent','W1' ,epsilon=0 , sigma=1.3144)
polymer_brush.py:053  |  lj.pair_coeff.set('Solvent','W2' ,epsilon=0 , sigma=1.3144)
polymer_brush.py:054  |  lj.pair_coeff.set('Solvent','Solvent' ,epsilon=1.0*tether_bulk , sigma=1.3144)
polymer_brush.py:055  |  lj.pair_coeff.set('Solvent','B' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:056  |  lj.pair_coeff.set('Solvent','C' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:057  |  lj.pair_coeff.set('Solvent','CH3_W1' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:058  |  lj.pair_coeff.set('Solvent','CH3_W2' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:059  |  lj.pair_coeff.set('Solvent','SolvTail' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:060  |  lj.pair_coeff.set('B','B' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:061  |  lj.pair_coeff.set('C','C' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:062  |  lj.pair_coeff.set('B','C' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:063  |  lj.pair_coeff.set('B','CH3_W1' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:064  |  lj.pair_coeff.set('B','CH3_W2' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:065  |  lj.pair_coeff.set('C','CH3_W1' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:066  |  lj.pair_coeff.set('C','CH3_W2' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:067  |  lj.pair_coeff.set('CH3_W1','CH3_W1' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:068  |  lj.pair_coeff.set('CH3_W1','CH3_W2' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:069  |  lj.pair_coeff.set('CH3_W2' ,'CH3_W2' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:071  |  lj.pair_coeff.set('B','SolvTail' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:072  |  lj.pair_coeff.set('C','SolvTail' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:073  |  lj.pair_coeff.set('CH3_W1','SolvTail' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:074  |  lj.pair_coeff.set('CH3_W2','SolvTail' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:075  |  lj.pair_coeff.set('SolvTail' ,'SolvTail' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:077  |  lj.pair_coeff.set('B','C' ,epsilon=0.01 , sigma=2.62 , alpha=0.0)
polymer_brush.py:078  |  lj.pair_coeff.set('W1','W2' ,epsilon=0.0 , sigma=1.0)
polymer_brush.py:079  |  lj.pair_coeff.set('W1','W1' ,epsilon=0.0 , sigma=1.0)
polymer_brush.py:080  |  lj.pair_coeff.set('W1','B' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:081  |  lj.pair_coeff.set('W1','C' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:082  |  lj.pair_coeff.set('W2','W2' ,epsilon=0.0 , sigma=1.0)
polymer_brush.py:083  |  lj.pair_coeff.set('W2','B' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:084  |  lj.pair_coeff.set('W2','C' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:085  |  lj.pair_coeff.set('W1','CH3_W1' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:086  |  lj.pair_coeff.set('W1','CH3_W2' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:087  |  lj.pair_coeff.set('W1','SolvTail' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:088  |  lj.pair_coeff.set('W2','CH3_W1' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:089  |  lj.pair_coeff.set('W2','CH3_W2' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:090  |  lj.pair_coeff.set('W2','SolvTail' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:091  |  lj.pair_coeff.set('A','C' ,epsilon=0.0 , sigma=1.0 , alpha=0.0)
polymer_brush.py:093  |  slj = pair.slj(r_cut= 1.3)
notice(2): Notice: slj set d_max=2.0
polymer_brush.py:094  |  slj.set_params(mode="shift")
pair.py:886  |          pair.set_params(self, mode=mode);
polymer_brush.py:095  |  slj.pair_coeff.set('W2','Solvent', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:096  |  slj.pair_coeff.set('W1','Solvent', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:097  |  slj.pair_coeff.set('Solvent','Solvent', epsilon = 0, sigma = 1.0)
polymer_brush.py:098  |  slj.pair_coeff.set('Solvent','B', epsilon = 0, sigma = 1.0)
polymer_brush.py:099  |  slj.pair_coeff.set('Solvent','C', epsilon = 0, sigma = 1.0)
polymer_brush.py:100  |  slj.pair_coeff.set('Solvent','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:101  |  slj.pair_coeff.set('Solvent','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:102  |  slj.pair_coeff.set('Solvent','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:103  |  slj.pair_coeff.set('W1','W2', epsilon = 0 , sigma =1.0)
polymer_brush.py:104  |  slj.pair_coeff.set('W1','W1', epsilon = 0 , sigma =1.0)
polymer_brush.py:105  |  slj.pair_coeff.set('W2','W2', epsilon = 0 , sigma =1.0)
polymer_brush.py:106  |  slj.pair_coeff.set('W1','B', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:107  |  slj.pair_coeff.set('W1','C', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:108  |  slj.pair_coeff.set('W2','B', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:109  |  slj.pair_coeff.set('W2','C', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:110  |  slj.pair_coeff.set('W1','CH3_W1', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:111  |  slj.pair_coeff.set('W1','CH3_W2', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:112  |  slj.pair_coeff.set('W2','CH3_W1', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:113  |  slj.pair_coeff.set('W2','CH3_W2', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:114  |  slj.pair_coeff.set('W1','SolvTail', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:115  |  slj.pair_coeff.set('W2','SolvTail', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:116  |  slj.pair_coeff.set('B','B', epsilon = 0, sigma = 1.0)
polymer_brush.py:117  |  slj.pair_coeff.set('C','C', epsilon = 0, sigma = 1.0)
polymer_brush.py:118  |  slj.pair_coeff.set('B','C', epsilon = 0, sigma = 1.0)
polymer_brush.py:119  |  slj.pair_coeff.set('B','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:120  |  slj.pair_coeff.set('B','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:121  |  slj.pair_coeff.set('B','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:122  |  slj.pair_coeff.set('C','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:123  |  slj.pair_coeff.set('C','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:124  |  slj.pair_coeff.set('C','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:125  |  slj.pair_coeff.set('CH3_W1','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:126  |  slj.pair_coeff.set('CH3_W1','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:127  |  slj.pair_coeff.set('CH3_W2','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:128  |  slj.pair_coeff.set('CH3_W1','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:129  |  slj.pair_coeff.set('CH3_W2','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:130  |  slj.pair_coeff.set('SolvTail','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:133  |  harmonicO_O= bond.harmonic(name = 'O-O-bond')
polymer_brush.py:135  |  harmonicO_O.bond_coeff.set('oleic', k=9892.9362 , r0=0.5)
polymer_brush.py:138  |  harmonicO_O.bond_coeff.set('wall', k=9892.9362, r0=1.25)
polymer_brush.py:141  |  angleWO = angle.harmonic()
polymer_brush.py:142  |  angleWO.set_coeff('W-O' , k = 201.2878 , t0= 2.5307)
polymer_brush.py:143  |  angleWO.set_coeff('O-O' , k = 201.2878 , t0= 1.92)
polymer_brush.py:144  |  angleWO.set_coeff('kink' , k = 1000.2878 , t0= 2.8)
polymer_brush.py:150  |  dihedralField = dihedral.harmonic()
polymer_brush.py:151  |  dihedralField.set_coeff('DihedralW1' , k = 2.6838 , d=1 , n= 1)
polymer_brush.py:152  |  dihedralField.set_coeff('DihedralW2' , k = 1.4543 , d=-1 , n= 2)
polymer_brush.py:153  |  dihedralField.set_coeff('DihedralW3' , k =5.4347 , d=1 , n= 3)
polymer_brush.py:154  |  dihedralField.set_coeff('Dihedral1' , k =2.6838 , d=1 , n= 1)
polymer_brush.py:155  |  dihedralField.set_coeff('Dihedral2' , k = 1.4543 , d=-1 , n= 2)
polymer_brush.py:156  |  dihedralField.set_coeff('Dihedral3' , k =5.4347 , d=1 , n= 3)
polymer_brush.py:158  |  integrate.mode_standard(dt= 0.005)
polymer_brush.py:160  |  integrator=integrate.nve(group=typeAll , limit=0.01 )
polymer_brush.py:161  |  zeroer = update.zero_momentum(period = 1)
polymer_brush.py:164  |  run(200)
notice(2): -- Neighborlist exclusion statistics -- :
notice(2): Particles with 1 exclusions             : 81920
notice(2): Particles with 2 exclusions             : 363520
notice(2): Neighbors included by diameter          : yes
notice(2): Neighbors excluded when in the same body: no
** starting run **
Time 00:00:19 | Step 200 / 200 | TPS 40.2117 | ETA 00:00:00
Average TPS: 40.2113
---------
-- Neighborlist stats:
9 normal updates / 1 forced updates / 0 dangerous updates
n_neigh_min: 60 / n_neigh_max: 139 / n_neigh_avg: 110.035
shortest rebuild period: 21
-- Cell list stats:
Dimension: 21, 21, 3
n_min    : 8 / n_max: 191 / n_avg: 74.7082
** run complete **
polymer_brush.py:165  |  zeroer.disable()
polymer_brush.py:167  |  integrator.disable()
polymer_brush.py:169  |  integrator=integrate.npt(group=typeAll , tau=1.0 , T= 1.0 , tauP = 1.2 , P = 0.00078 , x=False , y = False , z = True , rescale_all=True )
polymer_brush.py:172  |  run(1e4, profile=True, limit_hours=1)
** starting run **
Time 00:00:30 | Step 1081 / 10200 | TPS 87.8197 | ETA 00:01:43
Time 00:00:40 | Step 2073 / 10200 | TPS 99.1736 | ETA 00:01:21
Time 00:00:50 | Step 3209 / 10200 | TPS 113.343 | ETA 00:01:01
Time 00:01:00 | Step 4374 / 10200 | TPS 116.1 | ETA 00:00:50
Time 00:01:10 | Step 5565 / 10200 | TPS 118.931 | ETA 00:00:38
Time 00:01:20 | Step 6763 / 10200 | TPS 119.774 | ETA 00:00:28
Time 00:01:30 | Step 7953 / 10200 | TPS 118.96 | ETA 00:00:18
Time 00:01:40 | Step 9148 / 10200 | TPS 119.48 | ETA 00:00:08
Time 00:01:49 | Step 10200 / 10200 | TPS 115.003 | ETA 00:00:00
Average TPS: 112.031
Simulation: 89.2607s | 100.000% 
        Bond harmonic:      2.6042s |  2.918% 
                update bond table:  1.3576s |  1.521% 
                Self:               1.2466s |  1.397% 
        Harmonic Angle:     4.1026s |  4.596% 
        Harmonic Dihedral:  5.4720s |  6.130% 
        Integrate:         13.7610s | 15.417% 
                NPT step 1:  0.3687s |  0.413% 
                        Thermo:  0.0128s |  0.014% 
                        Self:    0.3559s |  0.399% 
                NPT step 2:  9.6552s | 10.817% 
                        Thermo:  2.6686s |  2.990% 
                        Self:    6.9866s |  7.827% 
                Net force:   3.4753s |  3.893% 
                Self:        0.2619s |  0.293% 
        Neighbor:          18.6264s | 20.867% 
                Cell:           1.1530s |  1.292% 
                        compute:  0.8147s |  0.913% 
                        init:     0.2625s |  0.294% 
                MPI allreduce:  2.8954s |  3.244% 
                compute:        7.9472s |  8.903% 
                filter:         4.5320s |  5.077% 
                head-list:      1.3204s |  1.479% 
                update-ex:      0.4162s |  0.466% 
                Self:           0.3623s |  0.406% 
        Pair lj:            6.7499s |  7.562% 
        Pair slj:           7.7934s |  8.731% 
        SFCPack:            0.0180s |  0.020% 
        comm_ghost_exch:    4.0333s |  4.519% 
                MPI send/recv:  1.7209s |  1.928% 1.02501 GiB/s 
                Self:           2.3124s |  2.591% 
        comm_ghost_update:  8.0858s |  9.059% 
                MPI send/recv:  2.5365s |  2.842% 4.03765 GiB/s 
                pack:           3.3344s |  3.736% 
                unpack:         2.0638s |  2.312% 
                Self:           0.1511s |  0.169% 
        comm_migrate:      11.7444s | 13.157% 
                MPI send/recv:  0.6181s |  0.693% 26.20585 MiB/s 
                angle:          3.0989s |  3.472% 
                        MPI send/recv:  0.8669s |  0.971% 20.23594 MiB/s 
                        Self:           2.2319s |  2.500% 
                bond:           2.8102s |  3.148% 
                        MPI send/recv:  0.6897s |  0.773% 11.42657 MiB/s 
                        Self:           2.1205s |  2.376% 
                dihedral:       3.6077s |  4.042% 
                        MPI send/recv:  0.8848s |  0.991% 105.70639 MiB/s 
                        Self:           2.7229s |  3.050% 
                pack:           0.7506s |  0.841% 
                unpack:         0.3243s |  0.363% 
                Self:           0.5346s |  0.599% 
        dist-check:         5.1464s |  5.766% 
        Self:               1.1234s |  1.259% 
---------
-- Neighborlist stats:
1241 normal updates / 34 forced updates / 0 dangerous updates
n_neigh_min: 3 / n_neigh_max: 148 / n_neigh_avg: 106.38634
shortest rebuild period: 5
-- Cell list stats:
Dimension: 21, 21, 4
n_min    : 0 / n_max: 145 / n_avg: 52.93538
** run complete **










################################################################
GPU n=32
################################################################
################################################################
Running: mpirun -n 1 python polymer_brush.py --mode=gpu --user=32
HOOMD-blue 1.3.3-unknown CUDA (7.5) SINGLE MPI SSE SSE2 SSE3 
Compiled: 03/06/2016
Copyright 2009-2016 The Regents of the University of Michigan.

All publications and presentations based on HOOMD-blue, including any reports
or published results obtained, in whole or in part, with HOOMD-blue, will
acknowledge its use according to the terms posted at the time of submission on:
http://codeblue.umich.edu/hoomd-blue/citations.html
-----
You are using HOOMD-blue. Read and cite the following:
* J A Anderson, C D Lorenz, and A Travesset. "General purpose molecular dynamics
  simulations fully implemented on graphics processing units", Journal of
  Computational Physics 227 (2008) 5342--5359
and
* J Glaser, T D Nguyen, J A Anderson, P Liu, F Spiga, J A Millan, D C Morse, and
  S C Glotzer. "Strong scaling of general-purpose molecular dynamics simulations
  on GPUs", Computer Physics Communications 192 (2015) 97--107
and
* http://codeblue.umich.edu/hoomd-blue
You can save these citations to file using cite.save().
-----
notice(2): This system is not compute exclusive, using local rank to select GPUs
notice(2): Unable to identify node local rank information
notice(2): Using global rank to select GPUs
HOOMD-blue is running on the following GPU(s):
 [0]  Tesla P100-PCIE-16GB  56 SM_6.0 @ 1.33 GHz, 16276 MiB DRAM
polymer_brush.py:012  |  system=init.read_xml(filename='init.xml')
notice(2): Reading init.xml...
notice(2): --- hoomd_xml file read summary
notice(2): 1740 positions at timestep 0
notice(2): 1740 velocities
notice(2): 1740 masses
notice(2): 1740 diameters
notice(2): 5 particle types
notice(2): 1740 particle body values
notice(2): 1580 bonds
notice(2): 1420 angles
notice(2): 3780 dihedrals
notice(2): 1740 charges
notice(2): Group "all" created containing 1740 particles
polymer_brush.py:018  |  system.replicate(nx=rep, ny=rep, nz=1)
polymer_brush.py:019  |  typeW1=group.type('W1')
notice(2): Group "type W1" created containing 61440 particles
polymer_brush.py:020  |  typeW2=group.type('W2')
*Warning*: W2 does not exist in the system, creating an empty group
notice(2): Group "type W2" created containing 0 particles
notice(2): Group "Wall" created containing 61440 particles
polymer_brush.py:022  |  typeB= group.type('B')
notice(2): Group "type B" created containing 1044480 particles
polymer_brush.py:023  |  typeSolvBackBone = group.type('Solvent')
notice(2): Group "type Solvent" created containing 409600 particles
polymer_brush.py:024  |  typeC= group.type('C')
*Warning*: C does not exist in the system, creating an empty group
notice(2): Group "type C" created containing 0 particles
polymer_brush.py:025  |  typeCH3_W1=group.type('CH3_W1')
notice(2): Group "type CH3_W1" created containing 61440 particles
polymer_brush.py:026  |  typeCH3_W2=group.type('CH3_W2')
*Warning*: CH3_W2 does not exist in the system, creating an empty group
notice(2): Group "type CH3_W2" created containing 0 particles
polymer_brush.py:027  |  typeSolvTail=group.type('SolvTail')
notice(2): Group "type SolvTail" created containing 204800 particles
notice(2): Group "BCH3-particles" created containing 1105920 particles
notice(2): Group "CCH3-particles" created containing 0 particles
notice(2): Group "all-solvent" created containing 614400 particles
notice(2): Group "bc-particles" created containing 1105920 particles
notice(2): Group "typeAll" created containing 1720320 particles
notice(2): Group "typeNPT" created containing 1781760 particles
Number of polymeric particles 1720320
polymer_brush.py:044  |  lj = pair.lj(r_cut=3.3)
nlist.py:1051  |          globals.neighbor_list = cell();
polymer_brush.py:052  |  lj.pair_coeff.set('Solvent','W1' ,epsilon=0 , sigma=1.3144)
polymer_brush.py:053  |  lj.pair_coeff.set('Solvent','W2' ,epsilon=0 , sigma=1.3144)
polymer_brush.py:054  |  lj.pair_coeff.set('Solvent','Solvent' ,epsilon=1.0*tether_bulk , sigma=1.3144)
polymer_brush.py:055  |  lj.pair_coeff.set('Solvent','B' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:056  |  lj.pair_coeff.set('Solvent','C' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:057  |  lj.pair_coeff.set('Solvent','CH3_W1' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:058  |  lj.pair_coeff.set('Solvent','CH3_W2' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:059  |  lj.pair_coeff.set('Solvent','SolvTail' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:060  |  lj.pair_coeff.set('B','B' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:061  |  lj.pair_coeff.set('C','C' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:062  |  lj.pair_coeff.set('B','C' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:063  |  lj.pair_coeff.set('B','CH3_W1' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:064  |  lj.pair_coeff.set('B','CH3_W2' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:065  |  lj.pair_coeff.set('C','CH3_W1' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:066  |  lj.pair_coeff.set('C','CH3_W2' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:067  |  lj.pair_coeff.set('CH3_W1','CH3_W1' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:068  |  lj.pair_coeff.set('CH3_W1','CH3_W2' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:069  |  lj.pair_coeff.set('CH3_W2' ,'CH3_W2' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:071  |  lj.pair_coeff.set('B','SolvTail' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:072  |  lj.pair_coeff.set('C','SolvTail' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:073  |  lj.pair_coeff.set('CH3_W1','SolvTail' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:074  |  lj.pair_coeff.set('CH3_W2','SolvTail' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:075  |  lj.pair_coeff.set('SolvTail' ,'SolvTail' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:077  |  lj.pair_coeff.set('B','C' ,epsilon=0.01 , sigma=2.62 , alpha=0.0)
polymer_brush.py:078  |  lj.pair_coeff.set('W1','W2' ,epsilon=0.0 , sigma=1.0)
polymer_brush.py:079  |  lj.pair_coeff.set('W1','W1' ,epsilon=0.0 , sigma=1.0)
polymer_brush.py:080  |  lj.pair_coeff.set('W1','B' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:081  |  lj.pair_coeff.set('W1','C' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:082  |  lj.pair_coeff.set('W2','W2' ,epsilon=0.0 , sigma=1.0)
polymer_brush.py:083  |  lj.pair_coeff.set('W2','B' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:084  |  lj.pair_coeff.set('W2','C' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:085  |  lj.pair_coeff.set('W1','CH3_W1' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:086  |  lj.pair_coeff.set('W1','CH3_W2' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:087  |  lj.pair_coeff.set('W1','SolvTail' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:088  |  lj.pair_coeff.set('W2','CH3_W1' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:089  |  lj.pair_coeff.set('W2','CH3_W2' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:090  |  lj.pair_coeff.set('W2','SolvTail' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:091  |  lj.pair_coeff.set('A','C' ,epsilon=0.0 , sigma=1.0 , alpha=0.0)
polymer_brush.py:093  |  slj = pair.slj(r_cut= 1.3)
notice(2): Notice: slj set d_max=2.0
polymer_brush.py:094  |  slj.set_params(mode="shift")
pair.py:886  |          pair.set_params(self, mode=mode);
polymer_brush.py:095  |  slj.pair_coeff.set('W2','Solvent', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:096  |  slj.pair_coeff.set('W1','Solvent', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:097  |  slj.pair_coeff.set('Solvent','Solvent', epsilon = 0, sigma = 1.0)
polymer_brush.py:098  |  slj.pair_coeff.set('Solvent','B', epsilon = 0, sigma = 1.0)
polymer_brush.py:099  |  slj.pair_coeff.set('Solvent','C', epsilon = 0, sigma = 1.0)
polymer_brush.py:100  |  slj.pair_coeff.set('Solvent','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:101  |  slj.pair_coeff.set('Solvent','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:102  |  slj.pair_coeff.set('Solvent','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:103  |  slj.pair_coeff.set('W1','W2', epsilon = 0 , sigma =1.0)
polymer_brush.py:104  |  slj.pair_coeff.set('W1','W1', epsilon = 0 , sigma =1.0)
polymer_brush.py:105  |  slj.pair_coeff.set('W2','W2', epsilon = 0 , sigma =1.0)
polymer_brush.py:106  |  slj.pair_coeff.set('W1','B', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:107  |  slj.pair_coeff.set('W1','C', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:108  |  slj.pair_coeff.set('W2','B', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:109  |  slj.pair_coeff.set('W2','C', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:110  |  slj.pair_coeff.set('W1','CH3_W1', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:111  |  slj.pair_coeff.set('W1','CH3_W2', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:112  |  slj.pair_coeff.set('W2','CH3_W1', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:113  |  slj.pair_coeff.set('W2','CH3_W2', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:114  |  slj.pair_coeff.set('W1','SolvTail', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:115  |  slj.pair_coeff.set('W2','SolvTail', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:116  |  slj.pair_coeff.set('B','B', epsilon = 0, sigma = 1.0)
polymer_brush.py:117  |  slj.pair_coeff.set('C','C', epsilon = 0, sigma = 1.0)
polymer_brush.py:118  |  slj.pair_coeff.set('B','C', epsilon = 0, sigma = 1.0)
polymer_brush.py:119  |  slj.pair_coeff.set('B','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:120  |  slj.pair_coeff.set('B','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:121  |  slj.pair_coeff.set('B','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:122  |  slj.pair_coeff.set('C','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:123  |  slj.pair_coeff.set('C','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:124  |  slj.pair_coeff.set('C','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:125  |  slj.pair_coeff.set('CH3_W1','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:126  |  slj.pair_coeff.set('CH3_W1','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:127  |  slj.pair_coeff.set('CH3_W2','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:128  |  slj.pair_coeff.set('CH3_W1','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:129  |  slj.pair_coeff.set('CH3_W2','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:130  |  slj.pair_coeff.set('SolvTail','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:133  |  harmonicO_O= bond.harmonic(name = 'O-O-bond')
polymer_brush.py:135  |  harmonicO_O.bond_coeff.set('oleic', k=9892.9362 , r0=0.5)
polymer_brush.py:138  |  harmonicO_O.bond_coeff.set('wall', k=9892.9362, r0=1.25)
polymer_brush.py:141  |  angleWO = angle.harmonic()
polymer_brush.py:142  |  angleWO.set_coeff('W-O' , k = 201.2878 , t0= 2.5307)
polymer_brush.py:143  |  angleWO.set_coeff('O-O' , k = 201.2878 , t0= 1.92)
polymer_brush.py:144  |  angleWO.set_coeff('kink' , k = 1000.2878 , t0= 2.8)
polymer_brush.py:150  |  dihedralField = dihedral.harmonic()
polymer_brush.py:151  |  dihedralField.set_coeff('DihedralW1' , k = 2.6838 , d=1 , n= 1)
polymer_brush.py:152  |  dihedralField.set_coeff('DihedralW2' , k = 1.4543 , d=-1 , n= 2)
polymer_brush.py:153  |  dihedralField.set_coeff('DihedralW3' , k =5.4347 , d=1 , n= 3)
polymer_brush.py:154  |  dihedralField.set_coeff('Dihedral1' , k =2.6838 , d=1 , n= 1)
polymer_brush.py:155  |  dihedralField.set_coeff('Dihedral2' , k = 1.4543 , d=-1 , n= 2)
polymer_brush.py:156  |  dihedralField.set_coeff('Dihedral3' , k =5.4347 , d=1 , n= 3)
polymer_brush.py:158  |  integrate.mode_standard(dt= 0.005)
polymer_brush.py:160  |  integrator=integrate.nve(group=typeAll , limit=0.01 )
polymer_brush.py:161  |  zeroer = update.zero_momentum(period = 1)
polymer_brush.py:164  |  run(200)
notice(2): -- Neighborlist exclusion statistics -- :
notice(2): Particles with 1 exclusions             : 327680
notice(2): Particles with 2 exclusions             : 1454080
notice(2): Neighbors included by diameter          : yes
notice(2): Neighbors excluded when in the same body: no
** starting run **
Time 00:00:16 | Step 127 / 200 | TPS 12.5464 | ETA 00:00:05
Time 00:00:20 | Step 200 / 200 | TPS 18.1556 | ETA 00:00:00
Average TPS: 14.141
---------
-- Neighborlist stats:
9 normal updates / 1 forced updates / 0 dangerous updates
n_neigh_min: 5 / n_neigh_max: 142 / n_neigh_avg: 83.9629
shortest rebuild period: 21
-- Cell list stats:
Dimension: 81, 81, 8
n_min    : 0 / n_max: 123 / n_avg: 33.946
** run complete **
polymer_brush.py:165  |  zeroer.disable()
polymer_brush.py:167  |  integrator.disable()
polymer_brush.py:169  |  integrator=integrate.npt(group=typeAll , tau=1.0 , T= 1.0 , tauP = 1.2 , P = 0.00078 , x=False , y = False , z = True , rescale_all=True )
polymer_brush.py:172  |  run(1e4, profile=True, limit_hours=1)
** starting run **
Time 00:00:30 | Step 411 / 10200 | TPS 20.9907 | ETA 00:07:46
Time 00:00:40 | Step 601 / 10200 | TPS 18.9505 | ETA 00:08:26
Time 00:00:50 | Step 808 / 10200 | TPS 20.6951 | ETA 00:07:33
Time 00:01:01 | Step 1031 / 10200 | TPS 22.2473 | ETA 00:06:52
Time 00:01:11 | Step 1319 / 10200 | TPS 28.4957 | ETA 00:05:11
Time 00:01:21 | Step 1647 / 10200 | TPS 32.748 | ETA 00:04:21
Time 00:01:31 | Step 1947 / 10200 | TPS 29.9813 | ETA 00:04:35
Time 00:01:41 | Step 2244 / 10200 | TPS 29.6913 | ETA 00:04:27
Time 00:01:51 | Step 2576 / 10200 | TPS 32.8592 | ETA 00:03:52
Time 00:02:01 | Step 2898 / 10200 | TPS 31.9074 | ETA 00:03:48
Time 00:02:11 | Step 3210 / 10200 | TPS 31.1951 | ETA 00:03:44
Time 00:02:21 | Step 3528 / 10200 | TPS 31.7965 | ETA 00:03:29
Time 00:02:31 | Step 3868 / 10200 | TPS 33.9623 | ETA 00:03:06
Time 00:02:41 | Step 4194 / 10200 | TPS 32.4541 | ETA 00:03:05
Time 00:02:51 | Step 4515 / 10200 | TPS 32.0758 | ETA 00:02:57
Time 00:03:01 | Step 4841 / 10200 | TPS 32.3585 | ETA 00:02:45
Time 00:03:11 | Step 5192 / 10200 | TPS 34.6924 | ETA 00:02:24
Time 00:03:21 | Step 5524 / 10200 | TPS 33.1644 | ETA 00:02:20
Time 00:03:31 | Step 5828 / 10200 | TPS 30.3581 | ETA 00:02:24
Time 00:03:41 | Step 6162 / 10200 | TPS 33.192 | ETA 00:02:01
Time 00:03:51 | Step 6469 / 10200 | TPS 30.0442 | ETA 00:02:04
Time 00:04:01 | Step 6798 / 10200 | TPS 32.8924 | ETA 00:01:43
Time 00:04:11 | Step 7121 / 10200 | TPS 32.2928 | ETA 00:01:35
Time 00:04:21 | Step 7463 / 10200 | TPS 34.1953 | ETA 00:01:20
Time 00:04:31 | Step 7810 / 10200 | TPS 34.6721 | ETA 00:01:08
Time 00:04:41 | Step 8157 / 10200 | TPS 34.6973 | ETA 00:00:58
Time 00:04:52 | Step 8505 / 10200 | TPS 34.3958 | ETA 00:00:49
Time 00:05:02 | Step 8852 / 10200 | TPS 34.3879 | ETA 00:00:39
Time 00:05:12 | Step 9191 / 10200 | TPS 33.579 | ETA 00:00:30
Time 00:05:22 | Step 9537 / 10200 | TPS 34.49 | ETA 00:00:19
Time 00:05:32 | Step 9881 / 10200 | TPS 34.3209 | ETA 00:00:09
Time 00:05:41 | Step 10200 / 10200 | TPS 33.6584 | ETA 00:00:00
Average TPS: 31.1676
Simulation: 320.8465s | 100.000% 
        Bond harmonic:      3.0018s |  0.936% 
                update bond table:  0.0805s |  0.025% 
                Self:               2.9213s |  0.910% 
        Harmonic Angle:     4.6092s |  1.437% 
        Harmonic Dihedral: 15.3862s |  4.796% 
        Integrate:         17.5155s |  5.459% 
                NPT step 1:  0.1671s |  0.052% 
                        Thermo:  0.0014s |  0.000% 
                NPT step 2:  5.9463s |  1.853% 
                        Thermo:  3.6180s |  1.128% 
                        Self:    2.3283s |  0.726% 
                Net force:  11.3468s |  3.537% 
        Neighbor:          167.9088s | 52.333% 
                Cell:        4.5341s |  1.413% 
                        compute:  0.4662s |  0.145% 
                        init:     3.8392s |  1.197% 
                compute:    84.1489s | 26.227% 
                dist-check:  1.1590s |  0.361% 
                filter:     71.2547s | 22.208% 
                head-list:   1.1792s |  0.368% 
                update-ex:   0.0060s |  0.002% 
                Self:        5.6270s |  1.754% 
        Pair lj:           50.8583s | 15.851% 
        Pair slj:          61.3539s | 19.123% 
        SFCPack:            0.0839s |  0.026% 
---------
-- Neighborlist stats:
1306 normal updates / 34 forced updates / 0 dangerous updates
n_neigh_min: 3 / n_neigh_max: 149 / n_neigh_avg: 81.73432
shortest rebuild period: 5
-- Cell list stats:
Dimension: 81, 81, 12
n_min    : 0 / n_max: 128 / n_avg: 22.63070
** run complete **










################################################################
Running: mpirun -n 2 python polymer_brush.py --mode=gpu --user=32
HOOMD-blue 1.3.3-unknown CUDA (7.5) SINGLE MPI SSE SSE2 SSE3 
Compiled: 03/06/2016
Copyright 2009-2016 The Regents of the University of Michigan.

All publications and presentations based on HOOMD-blue, including any reports
or published results obtained, in whole or in part, with HOOMD-blue, will
acknowledge its use according to the terms posted at the time of submission on:
http://codeblue.umich.edu/hoomd-blue/citations.html
-----
You are using HOOMD-blue. Read and cite the following:
* J A Anderson, C D Lorenz, and A Travesset. "General purpose molecular dynamics
  simulations fully implemented on graphics processing units", Journal of
  Computational Physics 227 (2008) 5342--5359
and
* J Glaser, T D Nguyen, J A Anderson, P Liu, F Spiga, J A Millan, D C Morse, and
  S C Glotzer. "Strong scaling of general-purpose molecular dynamics simulations
  on GPUs", Computer Physics Communications 192 (2015) 97--107
and
* http://codeblue.umich.edu/hoomd-blue
You can save these citations to file using cite.save().
-----
notice(2): This system is not compute exclusive, using local rank to select GPUs
notice(2): Unable to identify node local rank information
notice(2): Using global rank to select GPUs
HOOMD-blue is running on the following GPU(s):
Rank 0:  [0]  Tesla P100-PCIE-16GB  56 SM_6.0 @ 1.33 GHz, 16276 MiB DRAM
Rank 1:  [1]  Tesla P100-PCIE-16GB  56 SM_6.0 @ 1.33 GHz, 16276 MiB DRAM
polymer_brush.py:012  |  system=init.read_xml(filename='init.xml')
notice(2): Reading init.xml...
notice(2): --- hoomd_xml file read summary
notice(2): 1740 positions at timestep 0
notice(2): 1740 velocities
notice(2): 1740 masses
notice(2): 1740 diameters
notice(2): 5 particle types
notice(2): 1740 particle body values
notice(2): 1580 bonds
notice(2): 1420 angles
notice(2): 3780 dihedrals
notice(2): 1740 charges
HOOMD-blue is using domain decomposition: n_x = 1 n_y = 1 n_z = 2.
1 x 1 x 2 local grid on 1 nodes
notice(2): Group "all" created containing 1740 particles
polymer_brush.py:018  |  system.replicate(nx=rep, ny=rep, nz=1)
polymer_brush.py:019  |  typeW1=group.type('W1')
notice(2): Group "type W1" created containing 61440 particles
polymer_brush.py:020  |  typeW2=group.type('W2')
*Warning*: W2 does not exist in the system, creating an empty group
notice(2): Group "type W2" created containing 0 particles
notice(2): Group "Wall" created containing 61440 particles
polymer_brush.py:022  |  typeB= group.type('B')
notice(2): Group "type B" created containing 1044480 particles
polymer_brush.py:023  |  typeSolvBackBone = group.type('Solvent')
notice(2): Group "type Solvent" created containing 409600 particles
polymer_brush.py:024  |  typeC= group.type('C')
*Warning*: C does not exist in the system, creating an empty group
notice(2): Group "type C" created containing 0 particles
polymer_brush.py:025  |  typeCH3_W1=group.type('CH3_W1')
notice(2): Group "type CH3_W1" created containing 61440 particles
polymer_brush.py:026  |  typeCH3_W2=group.type('CH3_W2')
*Warning*: CH3_W2 does not exist in the system, creating an empty group
notice(2): Group "type CH3_W2" created containing 0 particles
polymer_brush.py:027  |  typeSolvTail=group.type('SolvTail')
notice(2): Group "type SolvTail" created containing 204800 particles
notice(2): Group "BCH3-particles" created containing 1105920 particles
notice(2): Group "CCH3-particles" created containing 0 particles
notice(2): Group "all-solvent" created containing 614400 particles
notice(2): Group "bc-particles" created containing 1105920 particles
notice(2): Group "typeAll" created containing 1720320 particles
notice(2): Group "typeNPT" created containing 1781760 particles
Number of polymeric particles 1720320
polymer_brush.py:044  |  lj = pair.lj(r_cut=3.3)
nlist.py:1051  |          globals.neighbor_list = cell();
polymer_brush.py:052  |  lj.pair_coeff.set('Solvent','W1' ,epsilon=0 , sigma=1.3144)
polymer_brush.py:053  |  lj.pair_coeff.set('Solvent','W2' ,epsilon=0 , sigma=1.3144)
polymer_brush.py:054  |  lj.pair_coeff.set('Solvent','Solvent' ,epsilon=1.0*tether_bulk , sigma=1.3144)
polymer_brush.py:055  |  lj.pair_coeff.set('Solvent','B' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:056  |  lj.pair_coeff.set('Solvent','C' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:057  |  lj.pair_coeff.set('Solvent','CH3_W1' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:058  |  lj.pair_coeff.set('Solvent','CH3_W2' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:059  |  lj.pair_coeff.set('Solvent','SolvTail' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:060  |  lj.pair_coeff.set('B','B' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:061  |  lj.pair_coeff.set('C','C' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:062  |  lj.pair_coeff.set('B','C' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:063  |  lj.pair_coeff.set('B','CH3_W1' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:064  |  lj.pair_coeff.set('B','CH3_W2' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:065  |  lj.pair_coeff.set('C','CH3_W1' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:066  |  lj.pair_coeff.set('C','CH3_W2' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:067  |  lj.pair_coeff.set('CH3_W1','CH3_W1' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:068  |  lj.pair_coeff.set('CH3_W1','CH3_W2' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:069  |  lj.pair_coeff.set('CH3_W2' ,'CH3_W2' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:071  |  lj.pair_coeff.set('B','SolvTail' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:072  |  lj.pair_coeff.set('C','SolvTail' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:073  |  lj.pair_coeff.set('CH3_W1','SolvTail' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:074  |  lj.pair_coeff.set('CH3_W2','SolvTail' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:075  |  lj.pair_coeff.set('SolvTail' ,'SolvTail' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:077  |  lj.pair_coeff.set('B','C' ,epsilon=0.01 , sigma=2.62 , alpha=0.0)
polymer_brush.py:078  |  lj.pair_coeff.set('W1','W2' ,epsilon=0.0 , sigma=1.0)
polymer_brush.py:079  |  lj.pair_coeff.set('W1','W1' ,epsilon=0.0 , sigma=1.0)
polymer_brush.py:080  |  lj.pair_coeff.set('W1','B' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:081  |  lj.pair_coeff.set('W1','C' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:082  |  lj.pair_coeff.set('W2','W2' ,epsilon=0.0 , sigma=1.0)
polymer_brush.py:083  |  lj.pair_coeff.set('W2','B' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:084  |  lj.pair_coeff.set('W2','C' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:085  |  lj.pair_coeff.set('W1','CH3_W1' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:086  |  lj.pair_coeff.set('W1','CH3_W2' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:087  |  lj.pair_coeff.set('W1','SolvTail' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:088  |  lj.pair_coeff.set('W2','CH3_W1' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:089  |  lj.pair_coeff.set('W2','CH3_W2' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:090  |  lj.pair_coeff.set('W2','SolvTail' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:091  |  lj.pair_coeff.set('A','C' ,epsilon=0.0 , sigma=1.0 , alpha=0.0)
polymer_brush.py:093  |  slj = pair.slj(r_cut= 1.3)
notice(2): Notice: slj set d_max=2.0
polymer_brush.py:094  |  slj.set_params(mode="shift")
pair.py:886  |          pair.set_params(self, mode=mode);
polymer_brush.py:095  |  slj.pair_coeff.set('W2','Solvent', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:096  |  slj.pair_coeff.set('W1','Solvent', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:097  |  slj.pair_coeff.set('Solvent','Solvent', epsilon = 0, sigma = 1.0)
polymer_brush.py:098  |  slj.pair_coeff.set('Solvent','B', epsilon = 0, sigma = 1.0)
polymer_brush.py:099  |  slj.pair_coeff.set('Solvent','C', epsilon = 0, sigma = 1.0)
polymer_brush.py:100  |  slj.pair_coeff.set('Solvent','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:101  |  slj.pair_coeff.set('Solvent','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:102  |  slj.pair_coeff.set('Solvent','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:103  |  slj.pair_coeff.set('W1','W2', epsilon = 0 , sigma =1.0)
polymer_brush.py:104  |  slj.pair_coeff.set('W1','W1', epsilon = 0 , sigma =1.0)
polymer_brush.py:105  |  slj.pair_coeff.set('W2','W2', epsilon = 0 , sigma =1.0)
polymer_brush.py:106  |  slj.pair_coeff.set('W1','B', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:107  |  slj.pair_coeff.set('W1','C', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:108  |  slj.pair_coeff.set('W2','B', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:109  |  slj.pair_coeff.set('W2','C', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:110  |  slj.pair_coeff.set('W1','CH3_W1', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:111  |  slj.pair_coeff.set('W1','CH3_W2', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:112  |  slj.pair_coeff.set('W2','CH3_W1', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:113  |  slj.pair_coeff.set('W2','CH3_W2', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:114  |  slj.pair_coeff.set('W1','SolvTail', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:115  |  slj.pair_coeff.set('W2','SolvTail', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:116  |  slj.pair_coeff.set('B','B', epsilon = 0, sigma = 1.0)
polymer_brush.py:117  |  slj.pair_coeff.set('C','C', epsilon = 0, sigma = 1.0)
polymer_brush.py:118  |  slj.pair_coeff.set('B','C', epsilon = 0, sigma = 1.0)
polymer_brush.py:119  |  slj.pair_coeff.set('B','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:120  |  slj.pair_coeff.set('B','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:121  |  slj.pair_coeff.set('B','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:122  |  slj.pair_coeff.set('C','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:123  |  slj.pair_coeff.set('C','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:124  |  slj.pair_coeff.set('C','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:125  |  slj.pair_coeff.set('CH3_W1','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:126  |  slj.pair_coeff.set('CH3_W1','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:127  |  slj.pair_coeff.set('CH3_W2','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:128  |  slj.pair_coeff.set('CH3_W1','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:129  |  slj.pair_coeff.set('CH3_W2','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:130  |  slj.pair_coeff.set('SolvTail','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:133  |  harmonicO_O= bond.harmonic(name = 'O-O-bond')
polymer_brush.py:135  |  harmonicO_O.bond_coeff.set('oleic', k=9892.9362 , r0=0.5)
polymer_brush.py:138  |  harmonicO_O.bond_coeff.set('wall', k=9892.9362, r0=1.25)
polymer_brush.py:141  |  angleWO = angle.harmonic()
polymer_brush.py:142  |  angleWO.set_coeff('W-O' , k = 201.2878 , t0= 2.5307)
polymer_brush.py:143  |  angleWO.set_coeff('O-O' , k = 201.2878 , t0= 1.92)
polymer_brush.py:144  |  angleWO.set_coeff('kink' , k = 1000.2878 , t0= 2.8)
polymer_brush.py:150  |  dihedralField = dihedral.harmonic()
polymer_brush.py:151  |  dihedralField.set_coeff('DihedralW1' , k = 2.6838 , d=1 , n= 1)
polymer_brush.py:152  |  dihedralField.set_coeff('DihedralW2' , k = 1.4543 , d=-1 , n= 2)
polymer_brush.py:153  |  dihedralField.set_coeff('DihedralW3' , k =5.4347 , d=1 , n= 3)
polymer_brush.py:154  |  dihedralField.set_coeff('Dihedral1' , k =2.6838 , d=1 , n= 1)
polymer_brush.py:155  |  dihedralField.set_coeff('Dihedral2' , k = 1.4543 , d=-1 , n= 2)
polymer_brush.py:156  |  dihedralField.set_coeff('Dihedral3' , k =5.4347 , d=1 , n= 3)
polymer_brush.py:158  |  integrate.mode_standard(dt= 0.005)
polymer_brush.py:160  |  integrator=integrate.nve(group=typeAll , limit=0.01 )
polymer_brush.py:161  |  zeroer = update.zero_momentum(period = 1)
polymer_brush.py:164  |  run(200)
notice(2): -- Neighborlist exclusion statistics -- :
notice(2): Particles with 1 exclusions             : 327680
notice(2): Particles with 2 exclusions             : 1454080
notice(2): Neighbors included by diameter          : yes
notice(2): Neighbors excluded when in the same body: no
** starting run **
Time 00:00:21 | Step 105 / 200 | TPS 10.4649 | ETA 00:00:09
Time 00:00:27 | Step 200 / 200 | TPS 16.7558 | ETA 00:00:00
Average TPS: 12.7362
---------
-- Neighborlist stats:
9 normal updates / 1 forced updates / 0 dangerous updates
n_neigh_min: 14 / n_neigh_max: 142 / n_neigh_avg: 91.7704
shortest rebuild period: 21
-- Cell list stats:
Dimension: 81, 81, 5
n_min    : 6 / n_max: 137 / n_avg: 51.0049
** run complete **
polymer_brush.py:165  |  zeroer.disable()
polymer_brush.py:167  |  integrator.disable()
polymer_brush.py:169  |  integrator=integrate.npt(group=typeAll , tau=1.0 , T= 1.0 , tauP = 1.2 , P = 0.00078 , x=False , y = False , z = True , rescale_all=True )
polymer_brush.py:172  |  run(1e4, profile=True, limit_hours=1)
** starting run **
Time 00:00:37 | Step 376 / 10200 | TPS 17.3231 | ETA 00:09:27
Time 00:00:47 | Step 555 / 10200 | TPS 17.5346 | ETA 00:09:10
Time 00:00:57 | Step 723 / 10200 | TPS 16.7895 | ETA 00:09:24
Time 00:01:07 | Step 897 / 10200 | TPS 17.3826 | ETA 00:08:55
Time 00:01:18 | Step 1138 / 10200 | TPS 24.0691 | ETA 00:06:16
Time 00:01:28 | Step 1425 / 10200 | TPS 28.3145 | ETA 00:05:09
Time 00:01:38 | Step 1696 / 10200 | TPS 26.7152 | ETA 00:05:18
Time 00:01:48 | Step 1943 / 10200 | TPS 24.6658 | ETA 00:05:34
Time 00:01:58 | Step 2206 / 10200 | TPS 26.2959 | ETA 00:05:04
Time 00:02:08 | Step 2499 / 10200 | TPS 29.2702 | ETA 00:04:23
Time 00:02:18 | Step 2805 / 10200 | TPS 30.5788 | ETA 00:04:01
Time 00:02:28 | Step 3086 / 10200 | TPS 28.0922 | ETA 00:04:13
Time 00:02:38 | Step 3372 / 10200 | TPS 28.3694 | ETA 00:04:00
Time 00:02:48 | Step 3681 / 10200 | TPS 30.8574 | ETA 00:03:31
Time 00:02:58 | Step 3997 / 10200 | TPS 31.5307 | ETA 00:03:16
Time 00:03:08 | Step 4300 / 10200 | TPS 30.2742 | ETA 00:03:14
Time 00:03:18 | Step 4596 / 10200 | TPS 29.4854 | ETA 00:03:10
Time 00:03:28 | Step 4917 / 10200 | TPS 31.8885 | ETA 00:02:45
Time 00:03:38 | Step 5246 / 10200 | TPS 32.7539 | ETA 00:02:31
Time 00:03:48 | Step 5554 / 10200 | TPS 30.7906 | ETA 00:02:30
Time 00:03:58 | Step 5857 / 10200 | TPS 30.2417 | ETA 00:02:23
Time 00:04:08 | Step 6178 / 10200 | TPS 32.0942 | ETA 00:02:05
Time 00:04:18 | Step 6498 / 10200 | TPS 31.9824 | ETA 00:01:55
Time 00:04:28 | Step 6809 / 10200 | TPS 30.6409 | ETA 00:01:50
Time 00:04:38 | Step 7116 / 10200 | TPS 30.6938 | ETA 00:01:40
Time 00:04:48 | Step 7452 / 10200 | TPS 33.5332 | ETA 00:01:21
Time 00:04:58 | Step 7787 / 10200 | TPS 33.4929 | ETA 00:01:12
Time 00:05:08 | Step 8111 / 10200 | TPS 32.3998 | ETA 00:01:04
Time 00:05:18 | Step 8448 / 10200 | TPS 33.6767 | ETA 00:00:52
Time 00:05:28 | Step 8780 / 10200 | TPS 32.7884 | ETA 00:00:43
Time 00:05:38 | Step 9114 / 10200 | TPS 33.2339 | ETA 00:00:32
Time 00:05:49 | Step 9440 / 10200 | TPS 32.1652 | ETA 00:00:23
Time 00:05:59 | Step 9771 / 10200 | TPS 32.6873 | ETA 00:00:13
Time 00:06:09 | Step 10099 / 10200 | TPS 32.5263 | ETA 00:00:03
Time 00:06:12 | Step 10200 / 10200 | TPS 33.7997 | ETA 00:00:00
Average TPS: 29.0101
Simulation: 344.7080s | 100.000% 
        Bond harmonic:      4.8857s |  1.417% 
                update bond table:  2.5964s |  0.753% 
                Self:               2.2893s |  0.664% 
        Harmonic Angle:     7.3459s |  2.131% 
        Harmonic Dihedral: 28.2549s |  8.197% 
        Integrate:         14.0647s |  4.080% 
                NPT step 1:  0.4111s |  0.119% 
                        Thermo:  0.0017s |  0.001% 
                        Self:    0.4093s |  0.119% 
                NPT step 2:  4.7461s |  1.377% 
                        Thermo:  2.8500s |  0.827% 
                        Self:    1.8961s |  0.550% 
                Net force:   8.7397s |  2.535% 
        Neighbor:          152.1909s | 44.151% 
                Cell:           1.6222s |  0.471% 
                        compute:  0.4201s |  0.122% 
                        init:     1.1262s |  0.327% 
                MPI allreduce:  0.0347s |  0.010% 
                compute:       83.3582s | 24.182% 
                filter:        66.0848s | 19.171% 
                head-list:      0.7798s |  0.226% 
                update-ex:      0.2274s |  0.066% 
        Pair lj:           44.4347s | 12.891% 
        Pair slj:          54.7786s | 15.891% 
        SFCPack:            0.0666s |  0.019% 
        comm_ghost_exch:    5.9646s |  1.730% 
                MPI send/recv:  2.5322s |  0.735% 5.93625 GiB/s 
                Self:           3.4324s |  0.996% 
        comm_ghost_update: 17.7657s |  5.154% 
                MPI send/recv:  9.8812s |  2.867% 7.00265 GiB/s 
                pack:           4.7268s |  1.371% 
                unpack:         3.0296s |  0.879% 
        comm_migrate:       8.6231s |  2.502% 
                MPI send/recv:  0.2285s |  0.066% 315.23475 MiB/s 
                angle:          1.4705s |  0.427% 
                        MPI send/recv:  0.1662s |  0.048% 338.44742 MiB/s 
                        Self:           1.3044s |  0.378% 
                bond:           1.1410s |  0.331% 
                        MPI send/recv:  0.0618s |  0.018% 473.33532 MiB/s 
                        Self:           1.0792s |  0.313% 
                dihedral:       3.9745s |  1.153% 
                        MPI send/recv:  0.1768s |  0.051% 1.39056 GiB/s 
                        Self:           3.7978s |  1.102% 
                pack:           1.2159s |  0.353% 
                unpack:         0.0249s |  0.007% 
                Self:           0.5677s |  0.165% 
        dist-check:         1.8151s |  0.527% 
        Self:               4.5175s |  1.311% 
---------
-- Neighborlist stats:
1312 normal updates / 34 forced updates / 0 dangerous updates
n_neigh_min: 3 / n_neigh_max: 150 / n_neigh_avg: 99.33273
shortest rebuild period: 5
-- Cell list stats:
Dimension: 81, 81, 7
n_min    : 0 / n_max: 116 / n_avg: 30.07349
** run complete **










################################################################
Running: mpirun -n 4 python polymer_brush.py --mode=gpu --user=32
HOOMD-blue 1.3.3-unknown CUDA (7.5) SINGLE MPI SSE SSE2 SSE3 
Compiled: 03/06/2016
Copyright 2009-2016 The Regents of the University of Michigan.

All publications and presentations based on HOOMD-blue, including any reports
or published results obtained, in whole or in part, with HOOMD-blue, will
acknowledge its use according to the terms posted at the time of submission on:
http://codeblue.umich.edu/hoomd-blue/citations.html
-----
You are using HOOMD-blue. Read and cite the following:
* J A Anderson, C D Lorenz, and A Travesset. "General purpose molecular dynamics
  simulations fully implemented on graphics processing units", Journal of
  Computational Physics 227 (2008) 5342--5359
and
* J Glaser, T D Nguyen, J A Anderson, P Liu, F Spiga, J A Millan, D C Morse, and
  S C Glotzer. "Strong scaling of general-purpose molecular dynamics simulations
  on GPUs", Computer Physics Communications 192 (2015) 97--107
and
* http://codeblue.umich.edu/hoomd-blue
You can save these citations to file using cite.save().
-----
notice(2): This system is not compute exclusive, using local rank to select GPUs
notice(2): Unable to identify node local rank information
notice(2): Using global rank to select GPUs
HOOMD-blue is running on the following GPU(s):
Rank 0:  [0]  Tesla P100-PCIE-16GB  56 SM_6.0 @ 1.33 GHz, 16276 MiB DRAM
Rank 1:  [1]  Tesla P100-PCIE-16GB  56 SM_6.0 @ 1.33 GHz, 16276 MiB DRAM
Rank 2:  [2]  Tesla P100-PCIE-16GB  56 SM_6.0 @ 1.33 GHz, 16276 MiB DRAM
Rank 3:  [3]  Tesla P100-PCIE-16GB  56 SM_6.0 @ 1.33 GHz, 16276 MiB DRAM
polymer_brush.py:012  |  system=init.read_xml(filename='init.xml')
notice(2): Reading init.xml...
notice(2): --- hoomd_xml file read summary
notice(2): 1740 positions at timestep 0
notice(2): 1740 velocities
notice(2): 1740 masses
notice(2): 1740 diameters
notice(2): 5 particle types
notice(2): 1740 particle body values
notice(2): 1580 bonds
notice(2): 1420 angles
notice(2): 3780 dihedrals
notice(2): 1740 charges
HOOMD-blue is using domain decomposition: n_x = 1 n_y = 1 n_z = 4.
1 x 1 x 4 local grid on 1 nodes
notice(2): Group "all" created containing 1740 particles
polymer_brush.py:018  |  system.replicate(nx=rep, ny=rep, nz=1)
polymer_brush.py:019  |  typeW1=group.type('W1')
notice(2): Group "type W1" created containing 61440 particles
polymer_brush.py:020  |  typeW2=group.type('W2')
*Warning*: W2 does not exist in the system, creating an empty group
notice(2): Group "type W2" created containing 0 particles
notice(2): Group "Wall" created containing 61440 particles
polymer_brush.py:022  |  typeB= group.type('B')
notice(2): Group "type B" created containing 1044480 particles
polymer_brush.py:023  |  typeSolvBackBone = group.type('Solvent')
notice(2): Group "type Solvent" created containing 409600 particles
polymer_brush.py:024  |  typeC= group.type('C')
*Warning*: C does not exist in the system, creating an empty group
notice(2): Group "type C" created containing 0 particles
polymer_brush.py:025  |  typeCH3_W1=group.type('CH3_W1')
notice(2): Group "type CH3_W1" created containing 61440 particles
polymer_brush.py:026  |  typeCH3_W2=group.type('CH3_W2')
*Warning*: CH3_W2 does not exist in the system, creating an empty group
notice(2): Group "type CH3_W2" created containing 0 particles
polymer_brush.py:027  |  typeSolvTail=group.type('SolvTail')
notice(2): Group "type SolvTail" created containing 204800 particles
notice(2): Group "BCH3-particles" created containing 1105920 particles
notice(2): Group "CCH3-particles" created containing 0 particles
notice(2): Group "all-solvent" created containing 614400 particles
notice(2): Group "bc-particles" created containing 1105920 particles
notice(2): Group "typeAll" created containing 1720320 particles
notice(2): Group "typeNPT" created containing 1781760 particles
Number of polymeric particles 1720320
polymer_brush.py:044  |  lj = pair.lj(r_cut=3.3)
nlist.py:1051  |          globals.neighbor_list = cell();
polymer_brush.py:052  |  lj.pair_coeff.set('Solvent','W1' ,epsilon=0 , sigma=1.3144)
polymer_brush.py:053  |  lj.pair_coeff.set('Solvent','W2' ,epsilon=0 , sigma=1.3144)
polymer_brush.py:054  |  lj.pair_coeff.set('Solvent','Solvent' ,epsilon=1.0*tether_bulk , sigma=1.3144)
polymer_brush.py:055  |  lj.pair_coeff.set('Solvent','B' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:056  |  lj.pair_coeff.set('Solvent','C' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:057  |  lj.pair_coeff.set('Solvent','CH3_W1' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:058  |  lj.pair_coeff.set('Solvent','CH3_W2' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:059  |  lj.pair_coeff.set('Solvent','SolvTail' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:060  |  lj.pair_coeff.set('B','B' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:061  |  lj.pair_coeff.set('C','C' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:062  |  lj.pair_coeff.set('B','C' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:063  |  lj.pair_coeff.set('B','CH3_W1' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:064  |  lj.pair_coeff.set('B','CH3_W2' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:065  |  lj.pair_coeff.set('C','CH3_W1' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:066  |  lj.pair_coeff.set('C','CH3_W2' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:067  |  lj.pair_coeff.set('CH3_W1','CH3_W1' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:068  |  lj.pair_coeff.set('CH3_W1','CH3_W2' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:069  |  lj.pair_coeff.set('CH3_W2' ,'CH3_W2' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:071  |  lj.pair_coeff.set('B','SolvTail' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:072  |  lj.pair_coeff.set('C','SolvTail' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:073  |  lj.pair_coeff.set('CH3_W1','SolvTail' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:074  |  lj.pair_coeff.set('CH3_W2','SolvTail' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:075  |  lj.pair_coeff.set('SolvTail' ,'SolvTail' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:077  |  lj.pair_coeff.set('B','C' ,epsilon=0.01 , sigma=2.62 , alpha=0.0)
polymer_brush.py:078  |  lj.pair_coeff.set('W1','W2' ,epsilon=0.0 , sigma=1.0)
polymer_brush.py:079  |  lj.pair_coeff.set('W1','W1' ,epsilon=0.0 , sigma=1.0)
polymer_brush.py:080  |  lj.pair_coeff.set('W1','B' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:081  |  lj.pair_coeff.set('W1','C' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:082  |  lj.pair_coeff.set('W2','W2' ,epsilon=0.0 , sigma=1.0)
polymer_brush.py:083  |  lj.pair_coeff.set('W2','B' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:084  |  lj.pair_coeff.set('W2','C' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:085  |  lj.pair_coeff.set('W1','CH3_W1' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:086  |  lj.pair_coeff.set('W1','CH3_W2' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:087  |  lj.pair_coeff.set('W1','SolvTail' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:088  |  lj.pair_coeff.set('W2','CH3_W1' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:089  |  lj.pair_coeff.set('W2','CH3_W2' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:090  |  lj.pair_coeff.set('W2','SolvTail' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:091  |  lj.pair_coeff.set('A','C' ,epsilon=0.0 , sigma=1.0 , alpha=0.0)
polymer_brush.py:093  |  slj = pair.slj(r_cut= 1.3)
notice(2): Notice: slj set d_max=2.0
polymer_brush.py:094  |  slj.set_params(mode="shift")
pair.py:886  |          pair.set_params(self, mode=mode);
polymer_brush.py:095  |  slj.pair_coeff.set('W2','Solvent', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:096  |  slj.pair_coeff.set('W1','Solvent', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:097  |  slj.pair_coeff.set('Solvent','Solvent', epsilon = 0, sigma = 1.0)
polymer_brush.py:098  |  slj.pair_coeff.set('Solvent','B', epsilon = 0, sigma = 1.0)
polymer_brush.py:099  |  slj.pair_coeff.set('Solvent','C', epsilon = 0, sigma = 1.0)
polymer_brush.py:100  |  slj.pair_coeff.set('Solvent','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:101  |  slj.pair_coeff.set('Solvent','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:102  |  slj.pair_coeff.set('Solvent','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:103  |  slj.pair_coeff.set('W1','W2', epsilon = 0 , sigma =1.0)
polymer_brush.py:104  |  slj.pair_coeff.set('W1','W1', epsilon = 0 , sigma =1.0)
polymer_brush.py:105  |  slj.pair_coeff.set('W2','W2', epsilon = 0 , sigma =1.0)
polymer_brush.py:106  |  slj.pair_coeff.set('W1','B', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:107  |  slj.pair_coeff.set('W1','C', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:108  |  slj.pair_coeff.set('W2','B', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:109  |  slj.pair_coeff.set('W2','C', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:110  |  slj.pair_coeff.set('W1','CH3_W1', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:111  |  slj.pair_coeff.set('W1','CH3_W2', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:112  |  slj.pair_coeff.set('W2','CH3_W1', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:113  |  slj.pair_coeff.set('W2','CH3_W2', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:114  |  slj.pair_coeff.set('W1','SolvTail', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:115  |  slj.pair_coeff.set('W2','SolvTail', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:116  |  slj.pair_coeff.set('B','B', epsilon = 0, sigma = 1.0)
polymer_brush.py:117  |  slj.pair_coeff.set('C','C', epsilon = 0, sigma = 1.0)
polymer_brush.py:118  |  slj.pair_coeff.set('B','C', epsilon = 0, sigma = 1.0)
polymer_brush.py:119  |  slj.pair_coeff.set('B','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:120  |  slj.pair_coeff.set('B','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:121  |  slj.pair_coeff.set('B','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:122  |  slj.pair_coeff.set('C','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:123  |  slj.pair_coeff.set('C','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:124  |  slj.pair_coeff.set('C','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:125  |  slj.pair_coeff.set('CH3_W1','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:126  |  slj.pair_coeff.set('CH3_W1','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:127  |  slj.pair_coeff.set('CH3_W2','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:128  |  slj.pair_coeff.set('CH3_W1','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:129  |  slj.pair_coeff.set('CH3_W2','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:130  |  slj.pair_coeff.set('SolvTail','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:133  |  harmonicO_O= bond.harmonic(name = 'O-O-bond')
polymer_brush.py:135  |  harmonicO_O.bond_coeff.set('oleic', k=9892.9362 , r0=0.5)
polymer_brush.py:138  |  harmonicO_O.bond_coeff.set('wall', k=9892.9362, r0=1.25)
polymer_brush.py:141  |  angleWO = angle.harmonic()
polymer_brush.py:142  |  angleWO.set_coeff('W-O' , k = 201.2878 , t0= 2.5307)
polymer_brush.py:143  |  angleWO.set_coeff('O-O' , k = 201.2878 , t0= 1.92)
polymer_brush.py:144  |  angleWO.set_coeff('kink' , k = 1000.2878 , t0= 2.8)
polymer_brush.py:150  |  dihedralField = dihedral.harmonic()
polymer_brush.py:151  |  dihedralField.set_coeff('DihedralW1' , k = 2.6838 , d=1 , n= 1)
polymer_brush.py:152  |  dihedralField.set_coeff('DihedralW2' , k = 1.4543 , d=-1 , n= 2)
polymer_brush.py:153  |  dihedralField.set_coeff('DihedralW3' , k =5.4347 , d=1 , n= 3)
polymer_brush.py:154  |  dihedralField.set_coeff('Dihedral1' , k =2.6838 , d=1 , n= 1)
polymer_brush.py:155  |  dihedralField.set_coeff('Dihedral2' , k = 1.4543 , d=-1 , n= 2)
polymer_brush.py:156  |  dihedralField.set_coeff('Dihedral3' , k =5.4347 , d=1 , n= 3)
polymer_brush.py:158  |  integrate.mode_standard(dt= 0.005)
polymer_brush.py:160  |  integrator=integrate.nve(group=typeAll , limit=0.01 )
polymer_brush.py:161  |  zeroer = update.zero_momentum(period = 1)
polymer_brush.py:164  |  run(200)
notice(2): -- Neighborlist exclusion statistics -- :
notice(2): Particles with 1 exclusions             : 327680
notice(2): Particles with 2 exclusions             : 1454080
notice(2): Neighbors included by diameter          : yes
notice(2): Neighbors excluded when in the same body: no
** starting run **
Time 00:00:22 | Step 123 / 200 | TPS 12.267 | ETA 00:00:06
Time 00:00:26 | Step 200 / 200 | TPS 18.7301 | ETA 00:00:00
Average TPS: 14.1463
---------
-- Neighborlist stats:
9 normal updates / 1 forced updates / 0 dangerous updates
n_neigh_min: 58 / n_neigh_max: 142 / n_neigh_avg: 110.009
shortest rebuild period: 21
-- Cell list stats:
Dimension: 81, 81, 3
n_min    : 6 / n_max: 163 / n_avg: 66.9557
** run complete **
polymer_brush.py:165  |  zeroer.disable()
polymer_brush.py:167  |  integrator.disable()
polymer_brush.py:169  |  integrator=integrate.npt(group=typeAll , tau=1.0 , T= 1.0 , tauP = 1.2 , P = 0.00078 , x=False , y = False , z = True , rescale_all=True )
polymer_brush.py:172  |  run(1e4, profile=True, limit_hours=1)
** starting run **
Time 00:00:37 | Step 393 / 10200 | TPS 18.3853 | ETA 00:08:53
Time 00:00:47 | Step 574 / 10200 | TPS 18.0963 | ETA 00:08:51
Time 00:00:57 | Step 750 / 10200 | TPS 17.4442 | ETA 00:09:01
Time 00:01:07 | Step 928 / 10200 | TPS 17.7519 | ETA 00:08:42
Time 00:01:17 | Step 1174 / 10200 | TPS 24.4793 | ETA 00:06:08
Time 00:01:27 | Step 1439 / 10200 | TPS 26.4848 | ETA 00:05:30
Time 00:01:37 | Step 1700 / 10200 | TPS 26.0896 | ETA 00:05:25
Time 00:01:47 | Step 1940 / 10200 | TPS 23.9913 | ETA 00:05:44
Time 00:01:57 | Step 2189 / 10200 | TPS 24.8599 | ETA 00:05:22
Time 00:02:07 | Step 2475 / 10200 | TPS 28.5983 | ETA 00:04:30
Time 00:02:17 | Step 2782 / 10200 | TPS 30.6719 | ETA 00:04:01
Time 00:02:27 | Step 3064 / 10200 | TPS 27.7755 | ETA 00:04:16
Time 00:02:37 | Step 3336 / 10200 | TPS 27.1199 | ETA 00:04:13
Time 00:02:47 | Step 3640 / 10200 | TPS 30.3751 | ETA 00:03:35
Time 00:02:57 | Step 3949 / 10200 | TPS 30.6649 | ETA 00:03:23
Time 00:03:07 | Step 4249 / 10200 | TPS 29.9767 | ETA 00:03:18
Time 00:03:17 | Step 4537 / 10200 | TPS 28.7837 | ETA 00:03:16
Time 00:03:27 | Step 4840 / 10200 | TPS 30.1055 | ETA 00:02:58
Time 00:03:37 | Step 5158 / 10200 | TPS 31.5209 | ETA 00:02:39
Time 00:03:47 | Step 5465 / 10200 | TPS 30.3276 | ETA 00:02:36
Time 00:03:57 | Step 5758 / 10200 | TPS 28.9966 | ETA 00:02:33
Time 00:04:07 | Step 6065 / 10200 | TPS 30.4352 | ETA 00:02:15
Time 00:04:17 | Step 6383 / 10200 | TPS 31.7765 | ETA 00:02:00
Time 00:04:27 | Step 6682 / 10200 | TPS 29.8848 | ETA 00:01:57
Time 00:04:37 | Step 6971 / 10200 | TPS 28.8915 | ETA 00:01:51
Time 00:04:47 | Step 7275 / 10200 | TPS 30.3815 | ETA 00:01:36
Time 00:04:58 | Step 7595 / 10200 | TPS 31.7745 | ETA 00:01:21
Time 00:05:08 | Step 7910 / 10200 | TPS 31.466 | ETA 00:01:12
Time 00:05:18 | Step 8217 / 10200 | TPS 30.4207 | ETA 00:01:05
Time 00:05:28 | Step 8537 / 10200 | TPS 31.5965 | ETA 00:00:52
Time 00:05:38 | Step 8853 / 10200 | TPS 31.492 | ETA 00:00:42
Time 00:05:48 | Step 9164 / 10200 | TPS 31.0589 | ETA 00:00:33
Time 00:05:58 | Step 9476 / 10200 | TPS 31.157 | ETA 00:00:23
Time 00:06:08 | Step 9787 / 10200 | TPS 30.863 | ETA 00:00:13
Time 00:06:18 | Step 10093 / 10200 | TPS 30.5716 | ETA 00:00:03
Time 00:06:22 | Step 10200 / 10200 | TPS 29.8561 | ETA 00:00:00
Average TPS: 28.1289
Simulation: 355.5065s | 100.000% 
        Bond harmonic:      5.3209s |  1.497% 
                update bond table:  3.2999s |  0.928% 
                Self:               2.0209s |  0.568% 
        Harmonic Angle:     7.4686s |  2.101% 
        Harmonic Dihedral: 27.2957s |  7.678% 
        Integrate:         12.5862s |  3.540% 
                NPT step 1:  0.3469s |  0.098% 
                        Thermo:  0.0029s |  0.001% 
                NPT step 2:  4.1468s |  1.166% 
                        Thermo:  2.5022s |  0.704% 
                        Self:    1.6445s |  0.463% 
                Net force:   7.6543s |  2.153% 
                Self:        0.4383s |  0.123% 
        Neighbor:          150.3873s | 42.302% 
                Cell:           0.6745s |  0.190% 
                        compute:  0.3069s |  0.086% 
                        init:     0.3404s |  0.096% 
                MPI allreduce:  0.0422s |  0.012% 
                compute:       84.5048s | 23.770% 
                filter:        64.0923s | 18.028% 
                head-list:      0.7316s |  0.206% 
                update-ex:      0.2616s |  0.074% 
        Pair lj:           50.9862s | 14.342% 
        Pair slj:          66.9354s | 18.828% 
        SFCPack:            0.0594s |  0.017% 
        comm_ghost_exch:    5.8101s |  1.634% 
                MPI send/recv:  2.6365s |  0.742% 5.40835 GiB/s 
                Self:           3.1737s |  0.893% 
        comm_ghost_update: 15.6127s |  4.392% 
                MPI send/recv:  8.6639s |  2.437% 6.95041 GiB/s 
                pack:           4.5969s |  1.293% 
                unpack:         2.2338s |  0.628% 
        comm_migrate:       7.5062s |  2.111% 
                MPI send/recv:  0.4468s |  0.126% 34.34248 MiB/s 
                angle:          1.4562s |  0.410% 
                        MPI send/recv:  0.4462s |  0.126% 25.99120 MiB/s 
                        Self:           1.0100s |  0.284% 
                bond:           1.0330s |  0.291% 
                        MPI send/recv:  0.1731s |  0.049% 35.30609 MiB/s 
                        Self:           0.8599s |  0.242% 
                dihedral:       3.1897s |  0.897% 
                        MPI send/recv:  0.4510s |  0.127% 111.86246 MiB/s 
                        Self:           2.7387s |  0.770% 
                pack:           1.0916s |  0.307% 
                unpack:         0.0229s |  0.006% 
        dist-check:         1.5733s |  0.443% 
        Self:               3.9646s |  1.115% 
---------
-- Neighborlist stats:
1314 normal updates / 34 forced updates / 0 dangerous updates
n_neigh_min: 3 / n_neigh_max: 151 / n_neigh_avg: 106.13525
shortest rebuild period: 5
-- Cell list stats:
Dimension: 81, 81, 4
n_min    : 0 / n_max: 136 / n_avg: 47.05300
** run complete **










################################################################
Running: mpirun -n 8 python polymer_brush.py --mode=gpu --user=32
HOOMD-blue 1.3.3-unknown CUDA (7.5) SINGLE MPI SSE SSE2 SSE3 
Compiled: 03/06/2016
Copyright 2009-2016 The Regents of the University of Michigan.

All publications and presentations based on HOOMD-blue, including any reports
or published results obtained, in whole or in part, with HOOMD-blue, will
acknowledge its use according to the terms posted at the time of submission on:
http://codeblue.umich.edu/hoomd-blue/citations.html
-----
You are using HOOMD-blue. Read and cite the following:
* J A Anderson, C D Lorenz, and A Travesset. "General purpose molecular dynamics
  simulations fully implemented on graphics processing units", Journal of
  Computational Physics 227 (2008) 5342--5359
and
* J Glaser, T D Nguyen, J A Anderson, P Liu, F Spiga, J A Millan, D C Morse, and
  S C Glotzer. "Strong scaling of general-purpose molecular dynamics simulations
  on GPUs", Computer Physics Communications 192 (2015) 97--107
and
* http://codeblue.umich.edu/hoomd-blue
You can save these citations to file using cite.save().
-----
notice(2): This system is not compute exclusive, using local rank to select GPUs
notice(2): Unable to identify node local rank information
notice(2): Using global rank to select GPUs
HOOMD-blue is running on the following GPU(s):
Rank 0:  [0]  Tesla P100-PCIE-16GB  56 SM_6.0 @ 1.33 GHz, 16276 MiB DRAM
Rank 1:  [1]  Tesla P100-PCIE-16GB  56 SM_6.0 @ 1.33 GHz, 16276 MiB DRAM
Rank 2:  [2]  Tesla P100-PCIE-16GB  56 SM_6.0 @ 1.33 GHz, 16276 MiB DRAM
Rank 3:  [3]  Tesla P100-PCIE-16GB  56 SM_6.0 @ 1.33 GHz, 16276 MiB DRAM
Rank 4:  [0]  Tesla P100-PCIE-16GB  56 SM_6.0 @ 1.33 GHz, 16276 MiB DRAM
Rank 5:  [1]  Tesla P100-PCIE-16GB  56 SM_6.0 @ 1.33 GHz, 16276 MiB DRAM
Rank 6:  [2]  Tesla P100-PCIE-16GB  56 SM_6.0 @ 1.33 GHz, 16276 MiB DRAM
Rank 7:  [3]  Tesla P100-PCIE-16GB  56 SM_6.0 @ 1.33 GHz, 16276 MiB DRAM
polymer_brush.py:012  |  system=init.read_xml(filename='init.xml')
notice(2): Reading init.xml...
notice(2): --- hoomd_xml file read summary
notice(2): 1740 positions at timestep 0
notice(2): 1740 velocities
notice(2): 1740 masses
notice(2): 1740 diameters
notice(2): 5 particle types
notice(2): 1740 particle body values
notice(2): 1580 bonds
notice(2): 1420 angles
notice(2): 3780 dihedrals
notice(2): 1740 charges
HOOMD-blue is using domain decomposition: n_x = 1 n_y = 2 n_z = 4.
1 x 2 x 4 local grid on 1 nodes
notice(2): Group "all" created containing 1740 particles
polymer_brush.py:018  |  system.replicate(nx=rep, ny=rep, nz=1)
polymer_brush.py:019  |  typeW1=group.type('W1')
notice(2): Group "type W1" created containing 61440 particles
polymer_brush.py:020  |  typeW2=group.type('W2')
*Warning*: W2 does not exist in the system, creating an empty group
notice(2): Group "type W2" created containing 0 particles
notice(2): Group "Wall" created containing 61440 particles
polymer_brush.py:022  |  typeB= group.type('B')
notice(2): Group "type B" created containing 1044480 particles
polymer_brush.py:023  |  typeSolvBackBone = group.type('Solvent')
notice(2): Group "type Solvent" created containing 409600 particles
polymer_brush.py:024  |  typeC= group.type('C')
*Warning*: C does not exist in the system, creating an empty group
notice(2): Group "type C" created containing 0 particles
polymer_brush.py:025  |  typeCH3_W1=group.type('CH3_W1')
notice(2): Group "type CH3_W1" created containing 61440 particles
polymer_brush.py:026  |  typeCH3_W2=group.type('CH3_W2')
*Warning*: CH3_W2 does not exist in the system, creating an empty group
notice(2): Group "type CH3_W2" created containing 0 particles
polymer_brush.py:027  |  typeSolvTail=group.type('SolvTail')
notice(2): Group "type SolvTail" created containing 204800 particles
notice(2): Group "BCH3-particles" created containing 1105920 particles
notice(2): Group "CCH3-particles" created containing 0 particles
notice(2): Group "all-solvent" created containing 614400 particles
notice(2): Group "bc-particles" created containing 1105920 particles
notice(2): Group "typeAll" created containing 1720320 particles
notice(2): Group "typeNPT" created containing 1781760 particles
Number of polymeric particles 1720320
polymer_brush.py:044  |  lj = pair.lj(r_cut=3.3)
nlist.py:1051  |          globals.neighbor_list = cell();
polymer_brush.py:052  |  lj.pair_coeff.set('Solvent','W1' ,epsilon=0 , sigma=1.3144)
polymer_brush.py:053  |  lj.pair_coeff.set('Solvent','W2' ,epsilon=0 , sigma=1.3144)
polymer_brush.py:054  |  lj.pair_coeff.set('Solvent','Solvent' ,epsilon=1.0*tether_bulk , sigma=1.3144)
polymer_brush.py:055  |  lj.pair_coeff.set('Solvent','B' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:056  |  lj.pair_coeff.set('Solvent','C' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:057  |  lj.pair_coeff.set('Solvent','CH3_W1' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:058  |  lj.pair_coeff.set('Solvent','CH3_W2' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:059  |  lj.pair_coeff.set('Solvent','SolvTail' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:060  |  lj.pair_coeff.set('B','B' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:061  |  lj.pair_coeff.set('C','C' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:062  |  lj.pair_coeff.set('B','C' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:063  |  lj.pair_coeff.set('B','CH3_W1' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:064  |  lj.pair_coeff.set('B','CH3_W2' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:065  |  lj.pair_coeff.set('C','CH3_W1' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:066  |  lj.pair_coeff.set('C','CH3_W2' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:067  |  lj.pair_coeff.set('CH3_W1','CH3_W1' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:068  |  lj.pair_coeff.set('CH3_W1','CH3_W2' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:069  |  lj.pair_coeff.set('CH3_W2' ,'CH3_W2' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:071  |  lj.pair_coeff.set('B','SolvTail' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:072  |  lj.pair_coeff.set('C','SolvTail' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:073  |  lj.pair_coeff.set('CH3_W1','SolvTail' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:074  |  lj.pair_coeff.set('CH3_W2','SolvTail' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:075  |  lj.pair_coeff.set('SolvTail' ,'SolvTail' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:077  |  lj.pair_coeff.set('B','C' ,epsilon=0.01 , sigma=2.62 , alpha=0.0)
polymer_brush.py:078  |  lj.pair_coeff.set('W1','W2' ,epsilon=0.0 , sigma=1.0)
polymer_brush.py:079  |  lj.pair_coeff.set('W1','W1' ,epsilon=0.0 , sigma=1.0)
polymer_brush.py:080  |  lj.pair_coeff.set('W1','B' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:081  |  lj.pair_coeff.set('W1','C' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:082  |  lj.pair_coeff.set('W2','W2' ,epsilon=0.0 , sigma=1.0)
polymer_brush.py:083  |  lj.pair_coeff.set('W2','B' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:084  |  lj.pair_coeff.set('W2','C' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:085  |  lj.pair_coeff.set('W1','CH3_W1' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:086  |  lj.pair_coeff.set('W1','CH3_W2' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:087  |  lj.pair_coeff.set('W1','SolvTail' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:088  |  lj.pair_coeff.set('W2','CH3_W1' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:089  |  lj.pair_coeff.set('W2','CH3_W2' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:090  |  lj.pair_coeff.set('W2','SolvTail' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:091  |  lj.pair_coeff.set('A','C' ,epsilon=0.0 , sigma=1.0 , alpha=0.0)
polymer_brush.py:093  |  slj = pair.slj(r_cut= 1.3)
notice(2): Notice: slj set d_max=2.0
polymer_brush.py:094  |  slj.set_params(mode="shift")
pair.py:886  |          pair.set_params(self, mode=mode);
polymer_brush.py:095  |  slj.pair_coeff.set('W2','Solvent', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:096  |  slj.pair_coeff.set('W1','Solvent', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:097  |  slj.pair_coeff.set('Solvent','Solvent', epsilon = 0, sigma = 1.0)
polymer_brush.py:098  |  slj.pair_coeff.set('Solvent','B', epsilon = 0, sigma = 1.0)
polymer_brush.py:099  |  slj.pair_coeff.set('Solvent','C', epsilon = 0, sigma = 1.0)
polymer_brush.py:100  |  slj.pair_coeff.set('Solvent','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:101  |  slj.pair_coeff.set('Solvent','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:102  |  slj.pair_coeff.set('Solvent','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:103  |  slj.pair_coeff.set('W1','W2', epsilon = 0 , sigma =1.0)
polymer_brush.py:104  |  slj.pair_coeff.set('W1','W1', epsilon = 0 , sigma =1.0)
polymer_brush.py:105  |  slj.pair_coeff.set('W2','W2', epsilon = 0 , sigma =1.0)
polymer_brush.py:106  |  slj.pair_coeff.set('W1','B', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:107  |  slj.pair_coeff.set('W1','C', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:108  |  slj.pair_coeff.set('W2','B', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:109  |  slj.pair_coeff.set('W2','C', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:110  |  slj.pair_coeff.set('W1','CH3_W1', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:111  |  slj.pair_coeff.set('W1','CH3_W2', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:112  |  slj.pair_coeff.set('W2','CH3_W1', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:113  |  slj.pair_coeff.set('W2','CH3_W2', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:114  |  slj.pair_coeff.set('W1','SolvTail', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:115  |  slj.pair_coeff.set('W2','SolvTail', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:116  |  slj.pair_coeff.set('B','B', epsilon = 0, sigma = 1.0)
polymer_brush.py:117  |  slj.pair_coeff.set('C','C', epsilon = 0, sigma = 1.0)
polymer_brush.py:118  |  slj.pair_coeff.set('B','C', epsilon = 0, sigma = 1.0)
polymer_brush.py:119  |  slj.pair_coeff.set('B','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:120  |  slj.pair_coeff.set('B','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:121  |  slj.pair_coeff.set('B','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:122  |  slj.pair_coeff.set('C','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:123  |  slj.pair_coeff.set('C','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:124  |  slj.pair_coeff.set('C','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:125  |  slj.pair_coeff.set('CH3_W1','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:126  |  slj.pair_coeff.set('CH3_W1','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:127  |  slj.pair_coeff.set('CH3_W2','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:128  |  slj.pair_coeff.set('CH3_W1','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:129  |  slj.pair_coeff.set('CH3_W2','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:130  |  slj.pair_coeff.set('SolvTail','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:133  |  harmonicO_O= bond.harmonic(name = 'O-O-bond')
polymer_brush.py:135  |  harmonicO_O.bond_coeff.set('oleic', k=9892.9362 , r0=0.5)
polymer_brush.py:138  |  harmonicO_O.bond_coeff.set('wall', k=9892.9362, r0=1.25)
polymer_brush.py:141  |  angleWO = angle.harmonic()
polymer_brush.py:142  |  angleWO.set_coeff('W-O' , k = 201.2878 , t0= 2.5307)
polymer_brush.py:143  |  angleWO.set_coeff('O-O' , k = 201.2878 , t0= 1.92)
polymer_brush.py:144  |  angleWO.set_coeff('kink' , k = 1000.2878 , t0= 2.8)
polymer_brush.py:150  |  dihedralField = dihedral.harmonic()
polymer_brush.py:151  |  dihedralField.set_coeff('DihedralW1' , k = 2.6838 , d=1 , n= 1)
polymer_brush.py:152  |  dihedralField.set_coeff('DihedralW2' , k = 1.4543 , d=-1 , n= 2)
polymer_brush.py:153  |  dihedralField.set_coeff('DihedralW3' , k =5.4347 , d=1 , n= 3)
polymer_brush.py:154  |  dihedralField.set_coeff('Dihedral1' , k =2.6838 , d=1 , n= 1)
polymer_brush.py:155  |  dihedralField.set_coeff('Dihedral2' , k = 1.4543 , d=-1 , n= 2)
polymer_brush.py:156  |  dihedralField.set_coeff('Dihedral3' , k =5.4347 , d=1 , n= 3)
polymer_brush.py:158  |  integrate.mode_standard(dt= 0.005)
polymer_brush.py:160  |  integrator=integrate.nve(group=typeAll , limit=0.01 )
polymer_brush.py:161  |  zeroer = update.zero_momentum(period = 1)
polymer_brush.py:164  |  run(200)
notice(2): -- Neighborlist exclusion statistics -- :
notice(2): Particles with 1 exclusions             : 327680
notice(2): Particles with 2 exclusions             : 1454080
notice(2): Neighbors included by diameter          : yes
notice(2): Neighbors excluded when in the same body: no
** starting run **
Time 00:00:24 | Step 200 / 200 | TPS 21.5345 | ETA 00:00:00
Average TPS: 21.5344
---------
-- Neighborlist stats:
9 normal updates / 1 forced updates / 0 dangerous updates
n_neigh_min: 0 / n_neigh_max: 142 / n_neigh_avg: 109.974
shortest rebuild period: 21
-- Cell list stats:
Dimension: 81, 41, 3
n_min    : 8 / n_max: 175 / n_avg: 69.3407
** run complete **
polymer_brush.py:165  |  zeroer.disable()
polymer_brush.py:167  |  integrator.disable()
polymer_brush.py:169  |  integrator=integrate.npt(group=typeAll , tau=1.0 , T= 1.0 , tauP = 1.2 , P = 0.00078 , x=False , y = False , z = True , rescale_all=True )
polymer_brush.py:172  |  run(1e4, profile=True, limit_hours=1)
** starting run **
Time 00:00:34 | Step 507 / 10200 | TPS 30.6356 | ETA 00:05:16
Time 00:00:44 | Step 786 / 10200 | TPS 27.8853 | ETA 00:05:37
Time 00:00:54 | Step 1102 / 10200 | TPS 31.5605 | ETA 00:04:48
Time 00:01:04 | Step 1501 / 10200 | TPS 39.8345 | ETA 00:03:38
Time 00:01:14 | Step 1867 / 10200 | TPS 36.5835 | ETA 00:03:47
Time 00:01:24 | Step 2220 / 10200 | TPS 35.0911 | ETA 00:03:47
Time 00:01:34 | Step 2642 / 10200 | TPS 42.0226 | ETA 00:02:59
Time 00:01:44 | Step 3050 / 10200 | TPS 40.2928 | ETA 00:02:57
Time 00:01:54 | Step 3434 / 10200 | TPS 38.1001 | ETA 00:02:57
Time 00:02:04 | Step 3857 / 10200 | TPS 42.112 | ETA 00:02:30
Time 00:02:14 | Step 4257 / 10200 | TPS 39.9139 | ETA 00:02:28
Time 00:02:25 | Step 4652 / 10200 | TPS 39.0875 | ETA 00:02:21
Time 00:02:35 | Step 5078 / 10200 | TPS 42.5701 | ETA 00:02:00
Time 00:02:45 | Step 5495 / 10200 | TPS 41.5607 | ETA 00:01:53
Time 00:02:55 | Step 5886 / 10200 | TPS 39.0112 | ETA 00:01:50
Time 00:03:05 | Step 6301 / 10200 | TPS 41.3019 | ETA 00:01:34
Time 00:03:15 | Step 6705 / 10200 | TPS 40.2543 | ETA 00:01:26
Time 00:03:25 | Step 7097 / 10200 | TPS 39.1841 | ETA 00:01:19
Time 00:03:35 | Step 7526 / 10200 | TPS 42.6477 | ETA 00:01:02
Time 00:03:45 | Step 7954 / 10200 | TPS 42.5079 | ETA 00:00:52
Time 00:03:55 | Step 8372 / 10200 | TPS 41.7997 | ETA 00:00:43
Time 00:04:05 | Step 8791 / 10200 | TPS 41.8666 | ETA 00:00:33
Time 00:04:15 | Step 9207 / 10200 | TPS 41.2912 | ETA 00:00:24
Time 00:04:25 | Step 9617 / 10200 | TPS 40.8352 | ETA 00:00:14
Time 00:04:35 | Step 10035 / 10200 | TPS 41.7752 | ETA 00:00:03
Time 00:04:39 | Step 10200 / 10200 | TPS 41.2871 | ETA 00:00:00
Average TPS: 39.2245
Simulation: 254.9426s | 100.000% 
        Bond harmonic:      7.7572s |  3.043% 
                update bond table:  4.8258s |  1.893% 
                Self:               2.9315s |  1.150% 
        Harmonic Angle:     9.2911s |  3.644% 
        Harmonic Dihedral: 18.6017s |  7.296% 
        Integrate:         11.6374s |  4.565% 
                NPT step 1:  0.4188s |  0.164% 
                        Thermo:  0.0077s |  0.003% 
                        Self:    0.4111s |  0.161% 
                NPT step 2:  5.9361s |  2.328% 
                        Thermo:  1.4854s |  0.583% 
                        Self:    4.4507s |  1.746% 
                Net force:   4.6726s |  1.833% 
                Self:        0.6099s |  0.239% 
        Neighbor:          95.4138s | 37.426% 
                Cell:           1.2427s |  0.487% 
                        compute:  0.8031s |  0.315% 
                        init:     0.4021s |  0.158% 
                MPI allreduce:  1.2183s |  0.478% 
                compute:       54.9905s | 21.570% 
                filter:        33.0459s | 12.962% 
                head-list:      3.9473s |  1.548% 
                update-ex:      0.7328s |  0.287% 
        Pair lj:           32.4032s | 12.710% 
        Pair slj:          37.8855s | 14.860% 
        SFCPack:            0.0375s |  0.015% 
        comm_ghost_exch:    7.1340s |  2.798% 
                MPI send/recv:  2.5301s |  0.992% 3.49615 GiB/s 
                Self:           4.6039s |  1.806% 
        comm_ghost_update: 16.9917s |  6.665% 
                MPI send/recv:  6.8533s |  2.688% 5.72362 GiB/s 
                pack:           0.7356s |  0.289% 
                unpack:         2.0589s |  0.808% 
                Self:           7.3438s |  2.881% 
        comm_migrate:      11.0337s |  4.328% 
                MPI send/recv:  0.6152s |  0.241% 66.41666 MiB/s 
                angle:          2.5322s |  0.993% 
                        MPI send/recv:  0.8470s |  0.332% 49.60205 MiB/s 
                        Self:           1.6852s |  0.661% 
                bond:           2.0540s |  0.806% 
                        MPI send/recv:  0.4944s |  0.194% 38.81221 MiB/s 
                        Self:           1.5596s |  0.612% 
                dihedral:       4.1768s |  1.638% 
                        MPI send/recv:  0.7974s |  0.313% 275.09373 MiB/s 
                        Self:           3.3794s |  1.326% 
                pack:           0.8457s |  0.332% 
                unpack:         0.2106s |  0.083% 
                Self:           0.5993s |  0.235% 
        dist-check:         3.8393s |  1.506% 
        Self:               2.9167s |  1.144% 
---------
-- Neighborlist stats:
1315 normal updates / 34 forced updates / 0 dangerous updates
n_neigh_min: 3 / n_neigh_max: 148 / n_neigh_avg: 105.95312
shortest rebuild period: 5
-- Cell list stats:
Dimension: 81, 41, 4
n_min    : 0 / n_max: 143 / n_avg: 48.70619
** run complete **










################################################################
Running: mpirun -n 16 python polymer_brush.py --mode=gpu --user=32
HOOMD-blue 1.3.3-unknown CUDA (7.5) SINGLE MPI SSE SSE2 SSE3 
Compiled: 03/06/2016
Copyright 2009-2016 The Regents of the University of Michigan.

All publications and presentations based on HOOMD-blue, including any reports
or published results obtained, in whole or in part, with HOOMD-blue, will
acknowledge its use according to the terms posted at the time of submission on:
http://codeblue.umich.edu/hoomd-blue/citations.html
-----
You are using HOOMD-blue. Read and cite the following:
* J A Anderson, C D Lorenz, and A Travesset. "General purpose molecular dynamics
  simulations fully implemented on graphics processing units", Journal of
  Computational Physics 227 (2008) 5342--5359
and
* J Glaser, T D Nguyen, J A Anderson, P Liu, F Spiga, J A Millan, D C Morse, and
  S C Glotzer. "Strong scaling of general-purpose molecular dynamics simulations
  on GPUs", Computer Physics Communications 192 (2015) 97--107
and
* http://codeblue.umich.edu/hoomd-blue
You can save these citations to file using cite.save().
-----
notice(2): This system is not compute exclusive, using local rank to select GPUs
notice(2): Unable to identify node local rank information
notice(2): Using global rank to select GPUs
HOOMD-blue is running on the following GPU(s):
Rank 0:  [0]  Tesla P100-PCIE-16GB  56 SM_6.0 @ 1.33 GHz, 16276 MiB DRAM
Rank 1:  [1]  Tesla P100-PCIE-16GB  56 SM_6.0 @ 1.33 GHz, 16276 MiB DRAM
Rank 2:  [2]  Tesla P100-PCIE-16GB  56 SM_6.0 @ 1.33 GHz, 16276 MiB DRAM
Rank 3:  [3]  Tesla P100-PCIE-16GB  56 SM_6.0 @ 1.33 GHz, 16276 MiB DRAM
Rank 4:  [0]  Tesla P100-PCIE-16GB  56 SM_6.0 @ 1.33 GHz, 16276 MiB DRAM
Rank 5:  [1]  Tesla P100-PCIE-16GB  56 SM_6.0 @ 1.33 GHz, 16276 MiB DRAM
Rank 6:  [2]  Tesla P100-PCIE-16GB  56 SM_6.0 @ 1.33 GHz, 16276 MiB DRAM
Rank 7:  [3]  Tesla P100-PCIE-16GB  56 SM_6.0 @ 1.33 GHz, 16276 MiB DRAM
Rank 8:  [0]  Tesla P100-PCIE-16GB  56 SM_6.0 @ 1.33 GHz, 16276 MiB DRAM
Rank 9:  [1]  Tesla P100-PCIE-16GB  56 SM_6.0 @ 1.33 GHz, 16276 MiB DRAM
Rank 10:  [2]  Tesla P100-PCIE-16GB  56 SM_6.0 @ 1.33 GHz, 16276 MiB DRAM
Rank 11:  [3]  Tesla P100-PCIE-16GB  56 SM_6.0 @ 1.33 GHz, 16276 MiB DRAM
Rank 12:  [0]  Tesla P100-PCIE-16GB  56 SM_6.0 @ 1.33 GHz, 16276 MiB DRAM
Rank 13:  [1]  Tesla P100-PCIE-16GB  56 SM_6.0 @ 1.33 GHz, 16276 MiB DRAM
Rank 14:  [2]  Tesla P100-PCIE-16GB  56 SM_6.0 @ 1.33 GHz, 16276 MiB DRAM
Rank 15:  [3]  Tesla P100-PCIE-16GB  56 SM_6.0 @ 1.33 GHz, 16276 MiB DRAM
polymer_brush.py:012  |  system=init.read_xml(filename='init.xml')
notice(2): Reading init.xml...
notice(2): --- hoomd_xml file read summary
notice(2): 1740 positions at timestep 0
notice(2): 1740 velocities
notice(2): 1740 masses
notice(2): 1740 diameters
notice(2): 5 particle types
notice(2): 1740 particle body values
notice(2): 1580 bonds
notice(2): 1420 angles
notice(2): 3780 dihedrals
notice(2): 1740 charges
HOOMD-blue is using domain decomposition: n_x = 2 n_y = 2 n_z = 4.
2 x 2 x 4 local grid on 1 nodes
notice(2): Group "all" created containing 1740 particles
polymer_brush.py:018  |  system.replicate(nx=rep, ny=rep, nz=1)
polymer_brush.py:019  |  typeW1=group.type('W1')
notice(2): Group "type W1" created containing 61440 particles
polymer_brush.py:020  |  typeW2=group.type('W2')
*Warning*: W2 does not exist in the system, creating an empty group
notice(2): Group "type W2" created containing 0 particles
notice(2): Group "Wall" created containing 61440 particles
polymer_brush.py:022  |  typeB= group.type('B')
notice(2): Group "type B" created containing 1044480 particles
polymer_brush.py:023  |  typeSolvBackBone = group.type('Solvent')
notice(2): Group "type Solvent" created containing 409600 particles
polymer_brush.py:024  |  typeC= group.type('C')
*Warning*: C does not exist in the system, creating an empty group
notice(2): Group "type C" created containing 0 particles
polymer_brush.py:025  |  typeCH3_W1=group.type('CH3_W1')
notice(2): Group "type CH3_W1" created containing 61440 particles
polymer_brush.py:026  |  typeCH3_W2=group.type('CH3_W2')
*Warning*: CH3_W2 does not exist in the system, creating an empty group
notice(2): Group "type CH3_W2" created containing 0 particles
polymer_brush.py:027  |  typeSolvTail=group.type('SolvTail')
notice(2): Group "type SolvTail" created containing 204800 particles
notice(2): Group "BCH3-particles" created containing 1105920 particles
notice(2): Group "CCH3-particles" created containing 0 particles
notice(2): Group "all-solvent" created containing 614400 particles
notice(2): Group "bc-particles" created containing 1105920 particles
notice(2): Group "typeAll" created containing 1720320 particles
notice(2): Group "typeNPT" created containing 1781760 particles
Number of polymeric particles 1720320
polymer_brush.py:044  |  lj = pair.lj(r_cut=3.3)
nlist.py:1051  |          globals.neighbor_list = cell();
polymer_brush.py:052  |  lj.pair_coeff.set('Solvent','W1' ,epsilon=0 , sigma=1.3144)
polymer_brush.py:053  |  lj.pair_coeff.set('Solvent','W2' ,epsilon=0 , sigma=1.3144)
polymer_brush.py:054  |  lj.pair_coeff.set('Solvent','Solvent' ,epsilon=1.0*tether_bulk , sigma=1.3144)
polymer_brush.py:055  |  lj.pair_coeff.set('Solvent','B' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:056  |  lj.pair_coeff.set('Solvent','C' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:057  |  lj.pair_coeff.set('Solvent','CH3_W1' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:058  |  lj.pair_coeff.set('Solvent','CH3_W2' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:059  |  lj.pair_coeff.set('Solvent','SolvTail' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:060  |  lj.pair_coeff.set('B','B' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:061  |  lj.pair_coeff.set('C','C' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:062  |  lj.pair_coeff.set('B','C' ,epsilon=tether_bulk , sigma=1.3144)
polymer_brush.py:063  |  lj.pair_coeff.set('B','CH3_W1' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:064  |  lj.pair_coeff.set('B','CH3_W2' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:065  |  lj.pair_coeff.set('C','CH3_W1' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:066  |  lj.pair_coeff.set('C','CH3_W2' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:067  |  lj.pair_coeff.set('CH3_W1','CH3_W1' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:068  |  lj.pair_coeff.set('CH3_W1','CH3_W2' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:069  |  lj.pair_coeff.set('CH3_W2' ,'CH3_W2' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:071  |  lj.pair_coeff.set('B','SolvTail' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:072  |  lj.pair_coeff.set('C','SolvTail' ,epsilon=bulk_tails , sigma=1.3144)
polymer_brush.py:073  |  lj.pair_coeff.set('CH3_W1','SolvTail' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:074  |  lj.pair_coeff.set('CH3_W2','SolvTail' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:075  |  lj.pair_coeff.set('SolvTail' ,'SolvTail' ,epsilon=tails , sigma=1.3144)
polymer_brush.py:077  |  lj.pair_coeff.set('B','C' ,epsilon=0.01 , sigma=2.62 , alpha=0.0)
polymer_brush.py:078  |  lj.pair_coeff.set('W1','W2' ,epsilon=0.0 , sigma=1.0)
polymer_brush.py:079  |  lj.pair_coeff.set('W1','W1' ,epsilon=0.0 , sigma=1.0)
polymer_brush.py:080  |  lj.pair_coeff.set('W1','B' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:081  |  lj.pair_coeff.set('W1','C' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:082  |  lj.pair_coeff.set('W2','W2' ,epsilon=0.0 , sigma=1.0)
polymer_brush.py:083  |  lj.pair_coeff.set('W2','B' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:084  |  lj.pair_coeff.set('W2','C' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:085  |  lj.pair_coeff.set('W1','CH3_W1' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:086  |  lj.pair_coeff.set('W1','CH3_W2' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:087  |  lj.pair_coeff.set('W1','SolvTail' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:088  |  lj.pair_coeff.set('W2','CH3_W1' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:089  |  lj.pair_coeff.set('W2','CH3_W2' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:090  |  lj.pair_coeff.set('W2','SolvTail' ,epsilon=0.0 , sigma = 1.0)
polymer_brush.py:091  |  lj.pair_coeff.set('A','C' ,epsilon=0.0 , sigma=1.0 , alpha=0.0)
polymer_brush.py:093  |  slj = pair.slj(r_cut= 1.3)
notice(2): Notice: slj set d_max=2.0
polymer_brush.py:094  |  slj.set_params(mode="shift")
pair.py:886  |          pair.set_params(self, mode=mode);
polymer_brush.py:095  |  slj.pair_coeff.set('W2','Solvent', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:096  |  slj.pair_coeff.set('W1','Solvent', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:097  |  slj.pair_coeff.set('Solvent','Solvent', epsilon = 0, sigma = 1.0)
polymer_brush.py:098  |  slj.pair_coeff.set('Solvent','B', epsilon = 0, sigma = 1.0)
polymer_brush.py:099  |  slj.pair_coeff.set('Solvent','C', epsilon = 0, sigma = 1.0)
polymer_brush.py:100  |  slj.pair_coeff.set('Solvent','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:101  |  slj.pair_coeff.set('Solvent','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:102  |  slj.pair_coeff.set('Solvent','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:103  |  slj.pair_coeff.set('W1','W2', epsilon = 0 , sigma =1.0)
polymer_brush.py:104  |  slj.pair_coeff.set('W1','W1', epsilon = 0 , sigma =1.0)
polymer_brush.py:105  |  slj.pair_coeff.set('W2','W2', epsilon = 0 , sigma =1.0)
polymer_brush.py:106  |  slj.pair_coeff.set('W1','B', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:107  |  slj.pair_coeff.set('W1','C', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:108  |  slj.pair_coeff.set('W2','B', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:109  |  slj.pair_coeff.set('W2','C', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:110  |  slj.pair_coeff.set('W1','CH3_W1', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:111  |  slj.pair_coeff.set('W1','CH3_W2', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:112  |  slj.pair_coeff.set('W2','CH3_W1', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:113  |  slj.pair_coeff.set('W2','CH3_W2', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:114  |  slj.pair_coeff.set('W1','SolvTail', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:115  |  slj.pair_coeff.set('W2','SolvTail', epsilon = 1.0 , sigma =1.25 ,r_cut =1.25* 2**(1.0/6.0))
polymer_brush.py:116  |  slj.pair_coeff.set('B','B', epsilon = 0, sigma = 1.0)
polymer_brush.py:117  |  slj.pair_coeff.set('C','C', epsilon = 0, sigma = 1.0)
polymer_brush.py:118  |  slj.pair_coeff.set('B','C', epsilon = 0, sigma = 1.0)
polymer_brush.py:119  |  slj.pair_coeff.set('B','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:120  |  slj.pair_coeff.set('B','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:121  |  slj.pair_coeff.set('B','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:122  |  slj.pair_coeff.set('C','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:123  |  slj.pair_coeff.set('C','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:124  |  slj.pair_coeff.set('C','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:125  |  slj.pair_coeff.set('CH3_W1','CH3_W1', epsilon = 0, sigma = 1.0)
polymer_brush.py:126  |  slj.pair_coeff.set('CH3_W1','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:127  |  slj.pair_coeff.set('CH3_W2','CH3_W2', epsilon = 0, sigma = 1.0)
polymer_brush.py:128  |  slj.pair_coeff.set('CH3_W1','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:129  |  slj.pair_coeff.set('CH3_W2','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:130  |  slj.pair_coeff.set('SolvTail','SolvTail', epsilon = 0, sigma = 1.0)
polymer_brush.py:133  |  harmonicO_O= bond.harmonic(name = 'O-O-bond')
polymer_brush.py:135  |  harmonicO_O.bond_coeff.set('oleic', k=9892.9362 , r0=0.5)
polymer_brush.py:138  |  harmonicO_O.bond_coeff.set('wall', k=9892.9362, r0=1.25)
polymer_brush.py:141  |  angleWO = angle.harmonic()
polymer_brush.py:142  |  angleWO.set_coeff('W-O' , k = 201.2878 , t0= 2.5307)
polymer_brush.py:143  |  angleWO.set_coeff('O-O' , k = 201.2878 , t0= 1.92)
polymer_brush.py:144  |  angleWO.set_coeff('kink' , k = 1000.2878 , t0= 2.8)
polymer_brush.py:150  |  dihedralField = dihedral.harmonic()
polymer_brush.py:151  |  dihedralField.set_coeff('DihedralW1' , k = 2.6838 , d=1 , n= 1)
polymer_brush.py:152  |  dihedralField.set_coeff('DihedralW2' , k = 1.4543 , d=-1 , n= 2)
polymer_brush.py:153  |  dihedralField.set_coeff('DihedralW3' , k =5.4347 , d=1 , n= 3)
polymer_brush.py:154  |  dihedralField.set_coeff('Dihedral1' , k =2.6838 , d=1 , n= 1)
polymer_brush.py:155  |  dihedralField.set_coeff('Dihedral2' , k = 1.4543 , d=-1 , n= 2)
polymer_brush.py:156  |  dihedralField.set_coeff('Dihedral3' , k =5.4347 , d=1 , n= 3)
polymer_brush.py:158  |  integrate.mode_standard(dt= 0.005)
polymer_brush.py:160  |  integrator=integrate.nve(group=typeAll , limit=0.01 )
polymer_brush.py:161  |  zeroer = update.zero_momentum(period = 1)
polymer_brush.py:164  |  run(200)
notice(2): -- Neighborlist exclusion statistics -- :
notice(2): Particles with 1 exclusions             : 327680
notice(2): Particles with 2 exclusions             : 1454080
notice(2): Neighbors included by diameter          : yes
notice(2): Neighbors excluded when in the same body: no
** starting run **
Time 00:00:33 | Step 200 / 200 | TPS 21.8801 | ETA 00:00:00
Average TPS: 21.8799
---------
-- Neighborlist stats:
9 normal updates / 1 forced updates / 0 dangerous updates
n_neigh_min: 0 / n_neigh_max: 142 / n_neigh_avg: 109.982
shortest rebuild period: 21
-- Cell list stats:
Dimension: 41, 41, 3
n_min    : 8 / n_max: 179 / n_avg: 71.7194
** run complete **
polymer_brush.py:165  |  zeroer.disable()
polymer_brush.py:167  |  integrator.disable()
polymer_brush.py:169  |  integrator=integrate.npt(group=typeAll , tau=1.0 , T= 1.0 , tauP = 1.2 , P = 0.00078 , x=False , y = False , z = True , rescale_all=True )
polymer_brush.py:172  |  run(1e4, profile=True, limit_hours=1)
** starting run **
Time 00:00:43 | Step 568 / 10200 | TPS 36.7748 | ETA 00:04:21
Time 00:00:53 | Step 913 / 10200 | TPS 34.2464 | ETA 00:04:31
Time 00:01:03 | Step 1356 / 10200 | TPS 44.2616 | ETA 00:03:19
Time 00:01:14 | Step 1814 / 10200 | TPS 45.4307 | ETA 00:03:04
Time 00:01:24 | Step 2276 / 10200 | TPS 46.1829 | ETA 00:02:51
Time 00:01:34 | Step 2813 / 10200 | TPS 53.3551 | ETA 00:02:18
Time 00:01:44 | Step 3315 / 10200 | TPS 50.1023 | ETA 00:02:17
Time 00:01:54 | Step 3869 / 10200 | TPS 55.3367 | ETA 00:01:54
Time 00:02:04 | Step 4410 / 10200 | TPS 53.8443 | ETA 00:01:47
Time 00:02:14 | Step 4968 / 10200 | TPS 55.781 | ETA 00:01:33
Time 00:02:24 | Step 5531 / 10200 | TPS 56.2742 | ETA 00:01:22
Time 00:02:34 | Step 6064 / 10200 | TPS 53.2738 | ETA 00:01:17
Time 00:02:44 | Step 6615 / 10200 | TPS 55.0516 | ETA 00:01:05
Time 00:02:54 | Step 7134 / 10200 | TPS 51.8564 | ETA 00:00:59
Time 00:03:04 | Step 7680 / 10200 | TPS 54.4252 | ETA 00:00:46
Time 00:03:14 | Step 8199 / 10200 | TPS 51.7901 | ETA 00:00:38
Time 00:03:24 | Step 8727 / 10200 | TPS 52.7675 | ETA 00:00:27
Time 00:03:34 | Step 9269 / 10200 | TPS 53.9179 | ETA 00:00:17
Time 00:03:44 | Step 9795 / 10200 | TPS 52.3411 | ETA 00:00:07
Time 00:03:52 | Step 10200 / 10200 | TPS 50.2235 | ETA 00:00:00
Average TPS: 50.3593
Simulation: 198.5729s | 100.000% 
        Bond harmonic:      6.3492s |  3.197% 
                update bond table:  2.3526s |  1.185% 
                Self:               3.9966s |  2.013% 
        Harmonic Angle:     7.1243s |  3.588% 
        Harmonic Dihedral: 11.5287s |  5.806% 
        Integrate:         25.0100s | 12.595% 
                NPT step 1:  0.4418s |  0.222% 
                        Thermo:  0.0158s |  0.008% 
                        Self:    0.4260s |  0.215% 
                NPT step 2: 19.6528s |  9.897% 
                        Thermo:  2.9672s |  1.494% 
                        Self:   16.6855s |  8.403% 
                Net force:   4.7391s |  2.387% 
        Neighbor:          61.2047s | 30.822% 
                Cell:           1.5692s |  0.790% 
                        compute:  1.1359s |  0.572% 
                        init:     0.3620s |  0.182% 
                MPI allreduce:  2.1160s |  1.066% 
                compute:       32.4191s | 16.326% 
                filter:        21.0020s | 10.576% 
                head-list:      2.3970s |  1.207% 
                update-ex:      0.9802s |  0.494% 
                Self:           0.7212s |  0.363% 
        Pair lj:           17.2506s |  8.687% 
        Pair slj:          19.5617s |  9.851% 
        SFCPack:            0.0271s |  0.014% 
        comm_ghost_exch:    8.0646s |  4.061% 
                MPI send/recv:  3.9519s |  1.990% 1.35887 GiB/s 
                Self:           4.1126s |  2.071% 
        comm_ghost_update: 19.1893s |  9.664% 
                MPI send/recv:  9.0387s |  4.552% 2.73496 GiB/s 
                pack:           1.2045s |  0.607% 
                unpack:         3.6488s |  1.837% 
                Self:           5.2974s |  2.668% 
        comm_migrate:      15.0339s |  7.571% 
                MPI send/recv:  0.7801s |  0.393% 42.03786 MiB/s 
                angle:          3.7458s |  1.886% 
                        MPI send/recv:  1.2376s |  0.623% 28.18679 MiB/s 
                        Self:           2.5083s |  1.263% 
                bond:           3.1094s |  1.566% 
                        MPI send/recv:  0.6416s |  0.323% 24.39865 MiB/s 
                        Self:           2.4679s |  1.243% 
                dihedral:       5.2454s |  2.642% 
                        MPI send/recv:  1.3075s |  0.658% 141.94263 MiB/s 
                        Self:           3.9380s |  1.983% 
                pack:           0.9046s |  0.456% 
                unpack:         0.3664s |  0.185% 
                Self:           0.8820s |  0.444% 
        dist-check:         5.9164s |  2.979% 
        Self:               2.3124s |  1.165% 
---------
-- Neighborlist stats:
1311 normal updates / 34 forced updates / 0 dangerous updates
n_neigh_min: 3 / n_neigh_max: 148 / n_neigh_avg: 106.16438
shortest rebuild period: 5
-- Cell list stats:
Dimension: 41, 41, 4
n_min    : 0 / n_max: 145 / n_avg: 50.55666
** run complete **










